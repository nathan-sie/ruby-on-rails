{"ast":null,"code":"import { inject, computed, ref, getCurrentInstance, watch } from 'vue';\nimport { toTypeString } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport { useGlobalConfig } from '../../../utils/util.mjs';\nimport '../../../tokens/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nvar useCheckboxProps = {\n  modelValue: {\n    type: [Boolean, Number, String],\n    \"default\": function _default() {\n      return void 0;\n    }\n  },\n  label: {\n    type: [String, Boolean, Number, Object]\n  },\n  indeterminate: Boolean,\n  disabled: Boolean,\n  checked: Boolean,\n  name: {\n    type: String,\n    \"default\": void 0\n  },\n  trueLabel: {\n    type: [String, Number],\n    \"default\": void 0\n  },\n  falseLabel: {\n    type: [String, Number],\n    \"default\": void 0\n  },\n  tabindex: [String, Number],\n  size: String\n};\n\nvar useCheckboxGroup = function useCheckboxGroup() {\n  var ELEMENT = useGlobalConfig();\n  var elForm = inject(elFormKey, {});\n  var elFormItem = inject(elFormItemKey, {});\n  var checkboxGroup = inject(\"CheckboxGroup\", {});\n  var isGroup = computed(function () {\n    return checkboxGroup && (checkboxGroup == null ? void 0 : checkboxGroup.name) === \"ElCheckboxGroup\";\n  });\n  var elFormItemSize = computed(function () {\n    return elFormItem.size;\n  });\n  return {\n    isGroup: isGroup,\n    checkboxGroup: checkboxGroup,\n    elForm: elForm,\n    ELEMENT: ELEMENT,\n    elFormItemSize: elFormItemSize,\n    elFormItem: elFormItem\n  };\n};\n\nvar useModel = function useModel(props) {\n  var selfModel = ref(false);\n\n  var _getCurrentInstance = getCurrentInstance(),\n      emit = _getCurrentInstance.emit;\n\n  var _useCheckboxGroup = useCheckboxGroup(),\n      isGroup = _useCheckboxGroup.isGroup,\n      checkboxGroup = _useCheckboxGroup.checkboxGroup;\n\n  var isLimitExceeded = ref(false);\n  var store = computed(function () {\n    var _a;\n\n    return checkboxGroup ? (_a = checkboxGroup.modelValue) == null ? void 0 : _a.value : props.modelValue;\n  });\n  var model = computed({\n    get: function get() {\n      var _a;\n\n      return isGroup.value ? store.value : (_a = props.modelValue) != null ? _a : selfModel.value;\n    },\n    set: function set(val) {\n      var _a;\n\n      if (isGroup.value && Array.isArray(val)) {\n        isLimitExceeded.value = checkboxGroup.max !== void 0 && val.length > checkboxGroup.max.value;\n        isLimitExceeded.value === false && ((_a = checkboxGroup == null ? void 0 : checkboxGroup.changeEvent) == null ? void 0 : _a.call(checkboxGroup, val));\n      } else {\n        emit(UPDATE_MODEL_EVENT, val);\n        selfModel.value = val;\n      }\n    }\n  });\n  return {\n    model: model,\n    isLimitExceeded: isLimitExceeded\n  };\n};\n\nvar useCheckboxStatus = function useCheckboxStatus(props, _ref) {\n  var model = _ref.model;\n\n  var _useCheckboxGroup2 = useCheckboxGroup(),\n      isGroup = _useCheckboxGroup2.isGroup,\n      checkboxGroup = _useCheckboxGroup2.checkboxGroup,\n      elFormItemSize = _useCheckboxGroup2.elFormItemSize,\n      ELEMENT = _useCheckboxGroup2.ELEMENT;\n\n  var focus = ref(false);\n  var size = computed(function () {\n    var _a;\n\n    return ((_a = checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize) == null ? void 0 : _a.value) || elFormItemSize.value || ELEMENT.size;\n  });\n  var isChecked = computed(function () {\n    var value = model.value;\n\n    if (toTypeString(value) === \"[object Boolean]\") {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.includes(props.label);\n    } else if (value !== null && value !== void 0) {\n      return value === props.trueLabel;\n    } else {\n      return !!value;\n    }\n  });\n  var checkboxSize = computed(function () {\n    var _a;\n\n    var temCheckboxSize = props.size || elFormItemSize.value || ELEMENT.size;\n    return isGroup.value ? ((_a = checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize) == null ? void 0 : _a.value) || temCheckboxSize : temCheckboxSize;\n  });\n  return {\n    isChecked: isChecked,\n    focus: focus,\n    size: size,\n    checkboxSize: checkboxSize\n  };\n};\n\nvar useDisabled = function useDisabled(props, _ref2) {\n  var model = _ref2.model,\n      isChecked = _ref2.isChecked;\n\n  var _useCheckboxGroup3 = useCheckboxGroup(),\n      elForm = _useCheckboxGroup3.elForm,\n      isGroup = _useCheckboxGroup3.isGroup,\n      checkboxGroup = _useCheckboxGroup3.checkboxGroup;\n\n  var isLimitDisabled = computed(function () {\n    var _a, _b;\n\n    var max = (_a = checkboxGroup.max) == null ? void 0 : _a.value;\n    var min = (_b = checkboxGroup.min) == null ? void 0 : _b.value;\n    return !!(max || min) && model.value.length >= max && !isChecked.value || model.value.length <= min && isChecked.value;\n  });\n  var isDisabled = computed(function () {\n    var _a;\n\n    var disabled = props.disabled || elForm.disabled;\n    return isGroup.value ? ((_a = checkboxGroup.disabled) == null ? void 0 : _a.value) || disabled || isLimitDisabled.value : props.disabled || elForm.disabled;\n  });\n  return {\n    isDisabled: isDisabled,\n    isLimitDisabled: isLimitDisabled\n  };\n};\n\nvar setStoreValue = function setStoreValue(props, _ref3) {\n  var model = _ref3.model;\n\n  function addToStore() {\n    if (Array.isArray(model.value) && !model.value.includes(props.label)) {\n      model.value.push(props.label);\n    } else {\n      model.value = props.trueLabel || true;\n    }\n  }\n\n  props.checked && addToStore();\n};\n\nvar useEvent = function useEvent(props, _ref4) {\n  var isLimitExceeded = _ref4.isLimitExceeded;\n\n  var _useCheckboxGroup4 = useCheckboxGroup(),\n      elFormItem = _useCheckboxGroup4.elFormItem;\n\n  var _getCurrentInstance2 = getCurrentInstance(),\n      emit = _getCurrentInstance2.emit;\n\n  function handleChange(e) {\n    var _a, _b;\n\n    if (isLimitExceeded.value) return;\n    var target = e.target;\n    var value = target.checked ? (_a = props.trueLabel) != null ? _a : true : (_b = props.falseLabel) != null ? _b : false;\n    emit(\"change\", value, e);\n  }\n\n  watch(function () {\n    return props.modelValue;\n  }, function () {\n    var _a;\n\n    (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n  });\n  return {\n    handleChange: handleChange\n  };\n};\n\nvar useCheckbox = function useCheckbox(props) {\n  var _useModel = useModel(props),\n      model = _useModel.model,\n      isLimitExceeded = _useModel.isLimitExceeded;\n\n  var _useCheckboxStatus = useCheckboxStatus(props, {\n    model: model\n  }),\n      focus = _useCheckboxStatus.focus,\n      size = _useCheckboxStatus.size,\n      isChecked = _useCheckboxStatus.isChecked,\n      checkboxSize = _useCheckboxStatus.checkboxSize;\n\n  var _useDisabled = useDisabled(props, {\n    model: model,\n    isChecked: isChecked\n  }),\n      isDisabled = _useDisabled.isDisabled;\n\n  var _useEvent = useEvent(props, {\n    isLimitExceeded: isLimitExceeded\n  }),\n      handleChange = _useEvent.handleChange;\n\n  setStoreValue(props, {\n    model: model\n  });\n  return {\n    isChecked: isChecked,\n    isDisabled: isDisabled,\n    checkboxSize: checkboxSize,\n    model: model,\n    handleChange: handleChange,\n    focus: focus,\n    size: size\n  };\n};\n\nexport { useCheckbox, useCheckboxGroup, useCheckboxProps };","map":null,"metadata":{},"sourceType":"module"}