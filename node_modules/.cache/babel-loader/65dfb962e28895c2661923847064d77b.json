{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createVNode, Fragment, renderList, vShow } from 'vue';\nvar _hoisted_1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"draggable\", \"data-key\"];\nvar _hoisted_2 = [\"aria-expanded\"];\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  var _component_el_checkbox = resolveComponent(\"el-checkbox\");\n\n  var _component_loading = resolveComponent(\"loading\");\n\n  var _component_node_content = resolveComponent(\"node-content\");\n\n  var _component_el_tree_node = resolveComponent(\"el-tree-node\");\n\n  var _component_el_collapse_transition = resolveComponent(\"el-collapse-transition\");\n\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    \"class\": normalizeClass([\"el-tree-node\", _objectSpread({\n      \"is-expanded\": _ctx.expanded,\n      \"is-current\": _ctx.node.isCurrent,\n      \"is-hidden\": !_ctx.node.visible,\n      \"is-focusable\": !_ctx.node.disabled,\n      \"is-checked\": !_ctx.node.disabled && _ctx.node.checked\n    }, _ctx.getNodeClass(_ctx.node))]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.node.disabled,\n    \"aria-checked\": _ctx.node.checked,\n    draggable: _ctx.tree.props.draggable,\n    \"data-key\": _ctx.getNodeKey(_ctx.node),\n    onClick: _cache[1] || (_cache[1] = withModifiers(function () {\n      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);\n    }, [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = function () {\n      return _ctx.handleContextMenu && _ctx.handleContextMenu.apply(_ctx, arguments);\n    }),\n    onDragstart: _cache[3] || (_cache[3] = withModifiers(function () {\n      return _ctx.handleDragStart && _ctx.handleDragStart.apply(_ctx, arguments);\n    }, [\"stop\"])),\n    onDragover: _cache[4] || (_cache[4] = withModifiers(function () {\n      return _ctx.handleDragOver && _ctx.handleDragOver.apply(_ctx, arguments);\n    }, [\"stop\"])),\n    onDragend: _cache[5] || (_cache[5] = withModifiers(function () {\n      return _ctx.handleDragEnd && _ctx.handleDragEnd.apply(_ctx, arguments);\n    }, [\"stop\"])),\n    onDrop: _cache[6] || (_cache[6] = withModifiers(function () {\n      return _ctx.handleDrop && _ctx.handleDrop.apply(_ctx, arguments);\n    }, [\"stop\"]))\n  }, [createElementVNode(\"div\", {\n    \"class\": \"el-tree-node__content\",\n    style: normalizeStyle({\n      paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + \"px\"\n    })\n  }, [_ctx.tree.props.icon || _ctx.CaretRight ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    \"class\": normalizeClass([{\n      \"is-leaf\": _ctx.node.isLeaf,\n      expanded: !_ctx.node.isLeaf && _ctx.expanded\n    }, \"el-tree-node__expand-icon\"]),\n    onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    \"default\": withCtx(function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.tree.props.icon || _ctx.CaretRight)))];\n    }),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 1,\n    \"model-value\": _ctx.node.checked,\n    indeterminate: _ctx.node.indeterminate,\n    disabled: !!_ctx.node.disabled,\n    onClick: _cache[0] || (_cache[0] = withModifiers(function () {}, [\"stop\"])),\n    onChange: _ctx.handleCheckChange\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true), _ctx.node.loading ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    \"class\": \"el-tree-node__loading-icon is-loading\"\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(_component_loading)];\n    }),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true), createVNode(_component_node_content, {\n    node: _ctx.node,\n    \"render-content\": _ctx.renderContent\n  }, null, 8, [\"node\", \"render-content\"])], 4), createVNode(_component_el_collapse_transition, null, {\n    \"default\": withCtx(function () {\n      return [!_ctx.renderAfterExpand || _ctx.childNodeRendered ? withDirectives((openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"class\": \"el-tree-node__children\",\n        role: \"group\",\n        \"aria-expanded\": _ctx.expanded\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.node.childNodes, function (child) {\n        return openBlock(), createBlock(_component_el_tree_node, {\n          key: _ctx.getNodeKey(child),\n          \"render-content\": _ctx.renderContent,\n          \"render-after-expand\": _ctx.renderAfterExpand,\n          \"show-checkbox\": _ctx.showCheckbox,\n          node: child,\n          props: _ctx.props,\n          onNodeExpand: _ctx.handleChildNodeExpand\n        }, null, 8, [\"render-content\", \"render-after-expand\", \"show-checkbox\", \"node\", \"props\", \"onNodeExpand\"]);\n      }), 128))], 8, _hoisted_2)), [[vShow, _ctx.expanded]]) : createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1\n  })], 42, _hoisted_1)), [[vShow, _ctx.node.visible]]);\n}\n\nexport { render };","map":null,"metadata":{},"sourceType":"module"}