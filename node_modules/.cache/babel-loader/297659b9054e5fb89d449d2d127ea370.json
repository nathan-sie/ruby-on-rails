{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, ref, provide, h } from 'vue';\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nimport { DEFAULT_FORMATS_TIME } from './common/constant.mjs';\nimport './common/picker.mjs';\nimport './time-picker-com/panel-time-pick.mjs';\nimport './time-picker-com/panel-time-range.mjs';\nimport { timePickerDefaultProps } from './common/props.mjs';\nimport script from './time-picker-com/panel-time-range.vue_vue&type=script&lang.mjs';\nimport script$1 from './time-picker-com/panel-time-pick.vue_vue&type=script&lang.mjs';\nimport script$2 from './common/picker.vue_vue&type=script&lang.mjs';\ndayjs.extend(customParseFormat);\nvar TimePicker = defineComponent({\n  name: \"ElTimePicker\",\n  install: null,\n  props: _objectSpread(_objectSpread({}, timePickerDefaultProps), {}, {\n    isRange: {\n      type: Boolean,\n      \"default\": false\n    }\n  }),\n  emits: [\"update:modelValue\"],\n  setup: function setup(props, ctx) {\n    var commonPicker = ref(null);\n    var type = props.isRange ? \"timerange\" : \"time\";\n    var panel = props.isRange ? script : script$1;\n\n    var refProps = _objectSpread(_objectSpread({}, props), {}, {\n      focus: function focus() {\n        var _a;\n\n        (_a = commonPicker.value) == null ? void 0 : _a.handleFocus();\n      },\n      blur: function blur() {\n        var _a;\n\n        (_a = commonPicker.value) == null ? void 0 : _a.handleBlur();\n      }\n    });\n\n    provide(\"ElPopperOptions\", props.popperOptions);\n    ctx.expose(refProps);\n    return function () {\n      var _a;\n\n      var format = (_a = props.format) != null ? _a : DEFAULT_FORMATS_TIME;\n      return h(script$2, _objectSpread(_objectSpread({}, props), {}, {\n        format: format,\n        type: type,\n        ref: commonPicker,\n        \"onUpdate:modelValue\": function onUpdateModelValue(value) {\n          return ctx.emit(\"update:modelValue\", value);\n        }\n      }), {\n        \"default\": function _default(scopedProps) {\n          return h(panel, scopedProps);\n        }\n      });\n    };\n  }\n});\nexport { TimePicker as default };","map":null,"metadata":{},"sourceType":"module"}