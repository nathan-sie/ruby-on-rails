{"ast":null,"code":"import { defineComponent, inject, ref, watch, nextTick, computed, provide } from 'vue';\nimport dayjs from 'dayjs';\nimport isEqual from 'lodash/isEqual';\nimport '../../../../hooks/index.mjs';\nimport '../../../../directives/index.mjs';\nimport '../../../../tokens/index.mjs';\nimport { ElInput } from '../../../input/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport _Popper from '../../../popper/index.mjs';\nimport { EVENT_CODE } from '../../../../utils/aria.mjs';\nimport { isEmpty, useGlobalConfig } from '../../../../utils/util.mjs';\nimport { Clock, Calendar } from '@element-plus/icons';\nimport { timePickerDefaultProps } from './props.mjs';\nimport ClickOutside from '../../../../directives/click-outside/index.mjs';\nimport { useLocaleInject } from '../../../../hooks/use-locale/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../../tokens/form.mjs';\nimport { Effect } from '../../../popper/src/use-popper/defaults.mjs';\n\nvar dateEquals = function dateEquals(a, b) {\n  var aIsDate = a instanceof Date;\n  var bIsDate = b instanceof Date;\n\n  if (aIsDate && bIsDate) {\n    return a.getTime() === b.getTime();\n  }\n\n  if (!aIsDate && !bIsDate) {\n    return a === b;\n  }\n\n  return false;\n};\n\nvar valueEquals = function valueEquals(a, b) {\n  var aIsArray = a instanceof Array;\n  var bIsArray = b instanceof Array;\n\n  if (aIsArray && bIsArray) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    return a.every(function (item, index) {\n      return dateEquals(item, b[index]);\n    });\n  }\n\n  if (!aIsArray && !bIsArray) {\n    return dateEquals(a, b);\n  }\n\n  return false;\n};\n\nvar parser = function parser(date, format, lang) {\n  var day = isEmpty(format) ? dayjs(date).locale(lang) : dayjs(date, format).locale(lang);\n  return day.isValid() ? day : void 0;\n};\n\nvar formatter = function formatter(date, format, lang) {\n  return isEmpty(format) ? date : dayjs(date).locale(lang).format(format);\n};\n\nvar script = defineComponent({\n  name: \"Picker\",\n  components: {\n    ElInput: ElInput,\n    ElPopper: _Popper,\n    ElIcon: ElIcon\n  },\n  directives: {\n    clickoutside: ClickOutside\n  },\n  props: timePickerDefaultProps,\n  emits: [\"update:modelValue\", \"change\", \"focus\", \"blur\", \"calendar-change\"],\n  setup: function setup(props, ctx) {\n    var ELEMENT = useGlobalConfig();\n\n    var _useLocaleInject = useLocaleInject(),\n        lang = _useLocaleInject.lang;\n\n    var elForm = inject(elFormKey, {});\n    var elFormItem = inject(elFormItemKey, {});\n    var elPopperOptions = inject(\"ElPopperOptions\", {});\n    var refPopper = ref(null);\n    var pickerVisible = ref(false);\n    var pickerActualVisible = ref(false);\n    var valueOnOpen = ref(null);\n    watch(pickerVisible, function (val) {\n      var _a;\n\n      if (!val) {\n        userInput.value = null;\n        nextTick(function () {\n          emitChange(props.modelValue);\n        });\n        ctx.emit(\"blur\");\n        blurInput();\n        props.validateEvent && ((_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"blur\"));\n      } else {\n        valueOnOpen.value = props.modelValue;\n      }\n    });\n\n    var emitChange = function emitChange(val, isClear) {\n      var _a;\n\n      if (isClear || !valueEquals(val, valueOnOpen.value)) {\n        ctx.emit(\"change\", val);\n        props.validateEvent && ((_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\"));\n      }\n    };\n\n    var emitInput = function emitInput(val) {\n      if (!valueEquals(props.modelValue, val)) {\n        var formatValue;\n\n        if (Array.isArray(val)) {\n          formatValue = val.map(function (_) {\n            return formatter(_, props.valueFormat, lang.value);\n          });\n        } else if (val) {\n          formatValue = formatter(val, props.valueFormat, lang.value);\n        }\n\n        ctx.emit(\"update:modelValue\", val ? formatValue : val, lang.value);\n      }\n    };\n\n    var refInput = computed(function () {\n      if (refPopper.value.triggerRef) {\n        var _r = isRangeInput.value ? refPopper.value.triggerRef : refPopper.value.triggerRef.$el;\n\n        return [].slice.call(_r.querySelectorAll(\"input\"));\n      }\n\n      return [];\n    });\n\n    var setSelectionRange = function setSelectionRange(start, end, pos) {\n      var _inputs = refInput.value;\n      if (!_inputs.length) return;\n\n      if (!pos || pos === \"min\") {\n        _inputs[0].setSelectionRange(start, end);\n\n        _inputs[0].focus();\n      } else if (pos === \"max\") {\n        _inputs[1].setSelectionRange(start, end);\n\n        _inputs[1].focus();\n      }\n    };\n\n    var onPick = function onPick() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      pickerVisible.value = visible;\n      var result;\n\n      if (Array.isArray(date)) {\n        result = date.map(function (_) {\n          return _.toDate();\n        });\n      } else {\n        result = date ? date.toDate() : date;\n      }\n\n      userInput.value = null;\n      emitInput(result);\n    };\n\n    var handleFocus = function handleFocus(e) {\n      if (props.readonly || pickerDisabled.value || pickerVisible.value) return;\n      pickerVisible.value = true;\n      ctx.emit(\"focus\", e);\n    };\n\n    var handleBlur = function handleBlur() {\n      pickerVisible.value = false;\n      blurInput();\n    };\n\n    var pickerDisabled = computed(function () {\n      return props.disabled || elForm.disabled;\n    });\n    var parsedValue = computed(function () {\n      var result;\n\n      if (valueIsEmpty.value) {\n        if (pickerOptions.value.getDefaultValue) {\n          result = pickerOptions.value.getDefaultValue();\n        }\n      } else {\n        if (Array.isArray(props.modelValue)) {\n          result = props.modelValue.map(function (_) {\n            return parser(_, props.valueFormat, lang.value);\n          });\n        } else {\n          result = parser(props.modelValue, props.valueFormat, lang.value);\n        }\n      }\n\n      if (pickerOptions.value.getRangeAvailableTime) {\n        var availableResult = pickerOptions.value.getRangeAvailableTime(result);\n\n        if (!isEqual(availableResult, result)) {\n          result = availableResult;\n          emitInput(Array.isArray(result) ? result.map(function (_) {\n            return _.toDate();\n          }) : result.toDate());\n        }\n      }\n\n      if (Array.isArray(result) && result.some(function (_) {\n        return !_;\n      })) {\n        result = [];\n      }\n\n      return result;\n    });\n    var displayValue = computed(function () {\n      if (!pickerOptions.value.panelReady) return;\n      var formattedValue = formatDayjsToString(parsedValue.value);\n\n      if (Array.isArray(userInput.value)) {\n        return [userInput.value[0] || formattedValue && formattedValue[0] || \"\", userInput.value[1] || formattedValue && formattedValue[1] || \"\"];\n      } else if (userInput.value !== null) {\n        return userInput.value;\n      }\n\n      if (!isTimePicker.value && valueIsEmpty.value) return;\n      if (!pickerVisible.value && valueIsEmpty.value) return;\n\n      if (formattedValue) {\n        return isDatesPicker.value ? formattedValue.join(\", \") : formattedValue;\n      }\n\n      return \"\";\n    });\n    var isTimeLikePicker = computed(function () {\n      return props.type.includes(\"time\");\n    });\n    var isTimePicker = computed(function () {\n      return props.type.startsWith(\"time\");\n    });\n    var isDatesPicker = computed(function () {\n      return props.type === \"dates\";\n    });\n    var triggerIcon = computed(function () {\n      return props.prefixIcon || (isTimeLikePicker.value ? Clock : Calendar);\n    });\n    var showClose = ref(false);\n\n    var onClearIconClick = function onClearIconClick(event) {\n      if (props.readonly || pickerDisabled.value) return;\n\n      if (showClose.value) {\n        event.stopPropagation();\n        emitInput(null);\n        emitChange(null, true);\n        showClose.value = false;\n        pickerVisible.value = false;\n        pickerOptions.value.handleClear && pickerOptions.value.handleClear();\n      }\n    };\n\n    var valueIsEmpty = computed(function () {\n      return !props.modelValue || Array.isArray(props.modelValue) && !props.modelValue.length;\n    });\n\n    var onMouseEnter = function onMouseEnter() {\n      if (props.readonly || pickerDisabled.value) return;\n\n      if (!valueIsEmpty.value && props.clearable) {\n        showClose.value = true;\n      }\n    };\n\n    var onMouseLeave = function onMouseLeave() {\n      showClose.value = false;\n    };\n\n    var isRangeInput = computed(function () {\n      return props.type.indexOf(\"range\") > -1;\n    });\n    var pickerSize = computed(function () {\n      return props.size || elFormItem.size || ELEMENT.size;\n    });\n    var popperPaneRef = computed(function () {\n      var _a;\n\n      return (_a = refPopper.value) == null ? void 0 : _a.popperRef;\n    });\n\n    var onClickOutside = function onClickOutside() {\n      if (!pickerVisible.value) return;\n      pickerVisible.value = false;\n    };\n\n    var userInput = ref(null);\n\n    var handleChange = function handleChange() {\n      if (userInput.value) {\n        var value = parseUserInputToDayjs(displayValue.value);\n\n        if (value) {\n          if (isValidValue(value)) {\n            emitInput(Array.isArray(value) ? value.map(function (_) {\n              return _.toDate();\n            }) : value.toDate());\n            userInput.value = null;\n          }\n        }\n      }\n\n      if (userInput.value === \"\") {\n        emitInput(null);\n        emitChange(null);\n        userInput.value = null;\n      }\n    };\n\n    var blurInput = function blurInput() {\n      refInput.value.forEach(function (input) {\n        return input.blur();\n      });\n    };\n\n    var parseUserInputToDayjs = function parseUserInputToDayjs(value) {\n      if (!value) return null;\n      return pickerOptions.value.parseUserInput(value);\n    };\n\n    var formatDayjsToString = function formatDayjsToString(value) {\n      if (!value) return null;\n      return pickerOptions.value.formatToString(value);\n    };\n\n    var isValidValue = function isValidValue(value) {\n      return pickerOptions.value.isValidValue(value);\n    };\n\n    var handleKeydown = function handleKeydown(event) {\n      var code = event.code;\n\n      if (code === EVENT_CODE.esc) {\n        pickerVisible.value = false;\n        event.stopPropagation();\n        return;\n      }\n\n      if (code === EVENT_CODE.tab) {\n        if (!isRangeInput.value) {\n          handleChange();\n          pickerVisible.value = false;\n          event.stopPropagation();\n        } else {\n          setTimeout(function () {\n            if (refInput.value.indexOf(document.activeElement) === -1) {\n              pickerVisible.value = false;\n              blurInput();\n            }\n          }, 0);\n        }\n\n        return;\n      }\n\n      if (code === EVENT_CODE.enter) {\n        if (userInput.value === \"\" || isValidValue(parseUserInputToDayjs(displayValue.value))) {\n          handleChange();\n          pickerVisible.value = false;\n        }\n\n        event.stopPropagation();\n        return;\n      }\n\n      if (userInput.value) {\n        event.stopPropagation();\n        return;\n      }\n\n      if (pickerOptions.value.handleKeydown) {\n        pickerOptions.value.handleKeydown(event);\n      }\n    };\n\n    var onUserInput = function onUserInput(e) {\n      userInput.value = e;\n    };\n\n    var handleStartInput = function handleStartInput(event) {\n      if (userInput.value) {\n        userInput.value = [event.target.value, userInput.value[1]];\n      } else {\n        userInput.value = [event.target.value, null];\n      }\n    };\n\n    var handleEndInput = function handleEndInput(event) {\n      if (userInput.value) {\n        userInput.value = [userInput.value[0], event.target.value];\n      } else {\n        userInput.value = [null, event.target.value];\n      }\n    };\n\n    var handleStartChange = function handleStartChange() {\n      var value = parseUserInputToDayjs(userInput.value && userInput.value[0]);\n\n      if (value && value.isValid()) {\n        userInput.value = [formatDayjsToString(value), displayValue.value[1]];\n        var newValue = [value, parsedValue.value && parsedValue.value[1]];\n\n        if (isValidValue(newValue)) {\n          emitInput(newValue);\n          userInput.value = null;\n        }\n      }\n    };\n\n    var handleEndChange = function handleEndChange() {\n      var value = parseUserInputToDayjs(userInput.value && userInput.value[1]);\n\n      if (value && value.isValid()) {\n        userInput.value = [displayValue.value[0], formatDayjsToString(value)];\n        var newValue = [parsedValue.value && parsedValue.value[0], value];\n\n        if (isValidValue(newValue)) {\n          emitInput(newValue);\n          userInput.value = null;\n        }\n      }\n    };\n\n    var pickerOptions = ref({});\n\n    var onSetPickerOption = function onSetPickerOption(e) {\n      pickerOptions.value[e[0]] = e[1];\n      pickerOptions.value.panelReady = true;\n    };\n\n    var onCalendarChange = function onCalendarChange(e) {\n      ctx.emit(\"calendar-change\", e);\n    };\n\n    provide(\"EP_PICKER_BASE\", {\n      props: props\n    });\n    return {\n      Effect: Effect,\n      elPopperOptions: elPopperOptions,\n      isDatesPicker: isDatesPicker,\n      handleEndChange: handleEndChange,\n      handleStartChange: handleStartChange,\n      handleStartInput: handleStartInput,\n      handleEndInput: handleEndInput,\n      onUserInput: onUserInput,\n      handleChange: handleChange,\n      handleKeydown: handleKeydown,\n      popperPaneRef: popperPaneRef,\n      onClickOutside: onClickOutside,\n      pickerSize: pickerSize,\n      isRangeInput: isRangeInput,\n      onMouseLeave: onMouseLeave,\n      onMouseEnter: onMouseEnter,\n      onClearIconClick: onClearIconClick,\n      showClose: showClose,\n      triggerIcon: triggerIcon,\n      onPick: onPick,\n      handleFocus: handleFocus,\n      handleBlur: handleBlur,\n      pickerVisible: pickerVisible,\n      pickerActualVisible: pickerActualVisible,\n      displayValue: displayValue,\n      parsedValue: parsedValue,\n      setSelectionRange: setSelectionRange,\n      refPopper: refPopper,\n      pickerDisabled: pickerDisabled,\n      onSetPickerOption: onSetPickerOption,\n      onCalendarChange: onCalendarChange\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}