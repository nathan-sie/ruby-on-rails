{"ast":null,"code":"import { ref, computed } from 'vue';\nimport { isFunction } from '@vue/shared';\n\nfunction useFilter(props, tree) {\n  var hiddenNodeKeySet = ref(new Set([]));\n  var hiddenExpandIconKeySet = ref(new Set([]));\n  var filterable = computed(function () {\n    return isFunction(props.filterMethod);\n  });\n\n  function doFilter(query) {\n    var _a;\n\n    if (!filterable.value) {\n      return;\n    }\n\n    var expandKeySet = new Set();\n    var hiddenExpandIconKeys = hiddenExpandIconKeySet.value;\n    var hiddenKeys = hiddenNodeKeySet.value;\n    var family = [];\n    var nodes = ((_a = tree.value) == null ? void 0 : _a.treeNodes) || [];\n    var filter = props.filterMethod;\n    hiddenKeys.clear();\n\n    function traverse(nodes2) {\n      nodes2.forEach(function (node) {\n        family.push(node);\n\n        if (filter == null ? void 0 : filter(query, node.data)) {\n          family.forEach(function (member) {\n            expandKeySet.add(member.key);\n          });\n        } else if (node.isLeaf) {\n          hiddenKeys.add(node.key);\n        }\n\n        var children = node.children;\n\n        if (children) {\n          traverse(children);\n        }\n\n        if (!node.isLeaf) {\n          if (!expandKeySet.has(node.key)) {\n            hiddenKeys.add(node.key);\n          } else if (children) {\n            var allHidden = true;\n\n            for (var i = 0; i < children.length; ++i) {\n              var childNode = children[i];\n\n              if (!hiddenKeys.has(childNode.key)) {\n                allHidden = false;\n                break;\n              }\n            }\n\n            if (allHidden) {\n              hiddenExpandIconKeys.add(node.key);\n            } else {\n              hiddenExpandIconKeys[\"delete\"](node.key);\n            }\n          }\n        }\n\n        family.pop();\n      });\n    }\n\n    traverse(nodes);\n    return expandKeySet;\n  }\n\n  function isForceHiddenExpandIcon(node) {\n    return hiddenExpandIconKeySet.value.has(node.key);\n  }\n\n  return {\n    hiddenExpandIconKeySet: hiddenExpandIconKeySet,\n    hiddenNodeKeySet: hiddenNodeKeySet,\n    doFilter: doFilter,\n    isForceHiddenExpandIcon: isForceHiddenExpandIcon\n  };\n}\n\nexport { useFilter };","map":null,"metadata":{},"sourceType":"module"}