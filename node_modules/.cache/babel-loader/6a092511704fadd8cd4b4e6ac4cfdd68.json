{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, provide, onMounted } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport _Popper from '../../popper/index.mjs';\nimport _Scrollbar from '../../scrollbar/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { addClass, removeClass, on } from '../../../utils/dom.mjs';\nimport { addUnit } from '../../../utils/util.mjs';\nimport { ArrowDown } from '@element-plus/icons';\nimport { useDropdown } from './useDropdown.mjs';\nimport { Effect } from '../../popper/src/use-popper/defaults.mjs';\nvar ElButtonGroup = ElButton.ButtonGroup;\nvar script = defineComponent({\n  name: \"ElDropdown\",\n  components: {\n    ElButton: ElButton,\n    ElButtonGroup: ElButtonGroup,\n    ElScrollbar: _Scrollbar,\n    ElPopper: _Popper,\n    ElIcon: ElIcon,\n    ArrowDown: ArrowDown\n  },\n  props: {\n    trigger: {\n      type: String,\n      \"default\": \"hover\"\n    },\n    type: String,\n    size: {\n      type: String,\n      \"default\": \"\"\n    },\n    splitButton: Boolean,\n    hideOnClick: {\n      type: Boolean,\n      \"default\": true\n    },\n    placement: {\n      type: String,\n      \"default\": \"bottom\"\n    },\n    showTimeout: {\n      type: Number,\n      \"default\": 150\n    },\n    hideTimeout: {\n      type: Number,\n      \"default\": 150\n    },\n    tabindex: {\n      type: [Number, String],\n      \"default\": 0\n    },\n    effect: {\n      type: String,\n      \"default\": Effect.LIGHT\n    },\n    maxHeight: {\n      type: [Number, String],\n      \"default\": \"\"\n    }\n  },\n  emits: [\"visible-change\", \"click\", \"command\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n\n    var _instance = getCurrentInstance();\n\n    var _useDropdown = useDropdown(),\n        ELEMENT = _useDropdown.ELEMENT;\n\n    var timeout = ref(null);\n    var visible = ref(false);\n    var scrollbar = ref(null);\n    var wrapStyle = computed(function () {\n      return \"max-height: \".concat(addUnit(props.maxHeight));\n    });\n    watch(function () {\n      return visible.value;\n    }, function (val) {\n      if (val) triggerElmFocus();\n      if (!val) triggerElmBlur();\n      emit(\"visible-change\", val);\n    });\n    var focusing = ref(false);\n    watch(function () {\n      return focusing.value;\n    }, function (val) {\n      var selfDefine = triggerElm.value;\n\n      if (selfDefine) {\n        if (val) {\n          addClass(selfDefine, \"focusing\");\n        } else {\n          removeClass(selfDefine, \"focusing\");\n        }\n      }\n    });\n    var triggerVnode = ref(null);\n    var triggerElm = computed(function () {\n      var _a, _b, _c;\n\n      var _ = (_b = (_a = triggerVnode.value) == null ? void 0 : _a.$refs.triggerRef) == null ? void 0 : _b.children[0];\n\n      return !props.splitButton ? _ : (_c = _ == null ? void 0 : _.children) == null ? void 0 : _c[1];\n    });\n\n    function handleClick() {\n      var _a;\n\n      if ((_a = triggerElm.value) == null ? void 0 : _a.disabled) return;\n\n      if (visible.value) {\n        hide();\n      } else {\n        show();\n      }\n    }\n\n    function show() {\n      var _a;\n\n      if ((_a = triggerElm.value) == null ? void 0 : _a.disabled) return;\n      timeout.value && clearTimeout(timeout.value);\n      timeout.value = window.setTimeout(function () {\n        visible.value = true;\n      }, [\"click\", \"contextmenu\"].includes(props.trigger) ? 0 : props.showTimeout);\n    }\n\n    function hide() {\n      var _a;\n\n      if ((_a = triggerElm.value) == null ? void 0 : _a.disabled) return;\n      removeTabindex();\n\n      if (props.tabindex >= 0) {\n        resetTabindex(triggerElm.value);\n      }\n\n      clearTimeout(timeout.value);\n      timeout.value = window.setTimeout(function () {\n        visible.value = false;\n      }, [\"click\", \"contextmenu\"].includes(props.trigger) ? 0 : props.hideTimeout);\n    }\n\n    function removeTabindex() {\n      var _a;\n\n      (_a = triggerElm.value) == null ? void 0 : _a.setAttribute(\"tabindex\", \"-1\");\n    }\n\n    function resetTabindex(ele) {\n      removeTabindex();\n      ele == null ? void 0 : ele.setAttribute(\"tabindex\", \"0\");\n    }\n\n    function triggerElmFocus() {\n      var _a, _b;\n\n      (_b = (_a = triggerElm.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    }\n\n    function triggerElmBlur() {\n      var _a, _b;\n\n      (_b = (_a = triggerElm.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    }\n\n    var dropdownSize = computed(function () {\n      return props.size || ELEMENT.size;\n    });\n\n    function commandHandler() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      emit.apply(void 0, [\"command\"].concat(args));\n    }\n\n    provide(\"elDropdown\", {\n      instance: _instance,\n      dropdownSize: dropdownSize,\n      visible: visible,\n      handleClick: handleClick,\n      commandHandler: commandHandler,\n      show: show,\n      hide: hide,\n      trigger: computed(function () {\n        return props.trigger;\n      }),\n      hideOnClick: computed(function () {\n        return props.hideOnClick;\n      }),\n      triggerElm: triggerElm\n    });\n    onMounted(function () {\n      if (!props.splitButton) {\n        on(triggerElm.value, \"focus\", function () {\n          focusing.value = true;\n        });\n        on(triggerElm.value, \"blur\", function () {\n          focusing.value = false;\n        });\n        on(triggerElm.value, \"click\", function () {\n          focusing.value = false;\n        });\n      }\n\n      if (props.trigger === \"hover\") {\n        on(triggerElm.value, \"mouseenter\", show);\n        on(triggerElm.value, \"mouseleave\", hide);\n      } else if (props.trigger === \"click\") {\n        on(triggerElm.value, \"click\", handleClick);\n      } else if (props.trigger === \"contextmenu\") {\n        on(triggerElm.value, \"contextmenu\", function (e) {\n          e.preventDefault();\n          handleClick();\n        });\n      }\n\n      Object.assign(_instance, {\n        handleClick: handleClick,\n        hide: hide,\n        resetTabindex: resetTabindex\n      });\n    });\n\n    var handlerMainButtonClick = function handlerMainButtonClick(event) {\n      emit(\"click\", event);\n      hide();\n    };\n\n    return {\n      visible: visible,\n      scrollbar: scrollbar,\n      wrapStyle: wrapStyle,\n      dropdownSize: dropdownSize,\n      handlerMainButtonClick: handlerMainButtonClick,\n      triggerVnode: triggerVnode\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}