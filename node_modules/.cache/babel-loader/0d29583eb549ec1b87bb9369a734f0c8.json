{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, inject, ref, computed, watch } from 'vue';\nimport { isObject, isArray } from '@vue/shared';\nimport '../../../tokens/index.mjs';\nimport { hasClass } from '../../../utils/dom.mjs';\nimport { EVENT_CODE } from '../../../utils/aria.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { StarFilled, Star } from '@element-plus/icons';\nimport { rateProps, rateEmits } from './rate.mjs';\nimport { elFormKey } from '../../../tokens/form.mjs';\n\nfunction getValueFromMap(value, map) {\n  var isExcludedObject = function isExcludedObject(val) {\n    return isObject(val);\n  };\n\n  var matchedKeys = Object.keys(map).map(function (key) {\n    return +key;\n  }).filter(function (key) {\n    var val = map[key];\n    var excluded = isExcludedObject(val) ? val.excluded : false;\n    return excluded ? value < key : value <= key;\n  }).sort(function (a, b) {\n    return a - b;\n  });\n  var matchedValue = map[matchedKeys[0]];\n  return isExcludedObject(matchedValue) ? matchedValue.value : matchedValue;\n}\n\nvar script = defineComponent({\n  name: \"ElRate\",\n  components: {\n    ElIcon: ElIcon,\n    StarFilled: StarFilled,\n    Star: Star\n  },\n  props: rateProps,\n  emits: rateEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var elForm = inject(elFormKey, {});\n    var currentValue = ref(props.modelValue);\n    var hoverIndex = ref(-1);\n    var pointerAtLeftHalf = ref(true);\n    var rateDisabled = computed(function () {\n      return props.disabled || elForm.disabled;\n    });\n    var text = computed(function () {\n      var result = \"\";\n\n      if (props.showScore) {\n        result = props.scoreTemplate.replace(/\\{\\s*value\\s*\\}/, rateDisabled.value ? \"\".concat(props.modelValue) : \"\".concat(currentValue.value));\n      } else if (props.showText) {\n        result = props.texts[Math.ceil(currentValue.value) - 1];\n      }\n\n      return result;\n    });\n    var valueDecimal = computed(function () {\n      return props.modelValue * 100 - Math.floor(props.modelValue) * 100;\n    });\n    var colorMap = computed(function () {\n      var _ref2;\n\n      return isArray(props.colors) ? (_ref2 = {}, _defineProperty(_ref2, props.lowThreshold, props.colors[0]), _defineProperty(_ref2, props.highThreshold, {\n        value: props.colors[1],\n        excluded: true\n      }), _defineProperty(_ref2, props.max, props.colors[2]), _ref2) : props.colors;\n    });\n    var activeColor = computed(function () {\n      return getValueFromMap(currentValue.value, colorMap.value);\n    });\n    var decimalStyle = computed(function () {\n      var width = \"\";\n\n      if (rateDisabled.value) {\n        width = \"\".concat(valueDecimal.value, \"%\");\n      } else if (props.allowHalf) {\n        width = \"50%\";\n      }\n\n      return {\n        color: activeColor.value,\n        width: width\n      };\n    });\n    var componentMap = computed(function () {\n      var _ref3;\n\n      return isArray(props.icons) ? (_ref3 = {}, _defineProperty(_ref3, props.lowThreshold, props.icons[0]), _defineProperty(_ref3, props.highThreshold, {\n        value: props.icons[1],\n        excluded: true\n      }), _defineProperty(_ref3, props.max, props.icons[2]), _ref3) : props.icons;\n    });\n    var decimalIconComponent = computed(function () {\n      return getValueFromMap(props.modelValue, componentMap.value);\n    });\n    var voidComponent = computed(function () {\n      return rateDisabled.value ? props.disabledvoidIcon : props.voidIcon;\n    });\n    var activeComponent = computed(function () {\n      return getValueFromMap(currentValue.value, componentMap.value);\n    });\n    var iconComponents = computed(function () {\n      var result = Array(props.max);\n      var threshold = currentValue.value;\n      result.fill(activeComponent.value, 0, threshold);\n      result.fill(voidComponent.value, threshold, props.max);\n      return result;\n    });\n\n    function showDecimalIcon(item) {\n      var showWhenDisabled = rateDisabled.value && valueDecimal.value > 0 && item - 1 < props.modelValue && item > props.modelValue;\n      var showWhenAllowHalf = props.allowHalf && pointerAtLeftHalf.value && item - 0.5 <= currentValue.value && item > currentValue.value;\n      return showWhenDisabled || showWhenAllowHalf;\n    }\n\n    function getIconStyle(item) {\n      var voidColor = rateDisabled.value ? props.disabledVoidColor : props.voidColor;\n      return {\n        color: item <= currentValue.value ? activeColor.value : voidColor\n      };\n    }\n\n    function selectValue(value) {\n      if (rateDisabled.value) {\n        return;\n      }\n\n      if (props.allowHalf && pointerAtLeftHalf.value) {\n        emit(UPDATE_MODEL_EVENT, currentValue.value);\n\n        if (props.modelValue !== currentValue.value) {\n          emit(\"change\", currentValue.value);\n        }\n      } else {\n        emit(UPDATE_MODEL_EVENT, value);\n\n        if (props.modelValue !== value) {\n          emit(\"change\", value);\n        }\n      }\n    }\n\n    function handleKey(e) {\n      if (rateDisabled.value) {\n        return;\n      }\n\n      var _currentValue = currentValue.value;\n      var code = e.code;\n\n      if (code === EVENT_CODE.up || code === EVENT_CODE.right) {\n        if (props.allowHalf) {\n          _currentValue += 0.5;\n        } else {\n          _currentValue += 1;\n        }\n\n        e.stopPropagation();\n        e.preventDefault();\n      } else if (code === EVENT_CODE.left || code === EVENT_CODE.down) {\n        if (props.allowHalf) {\n          _currentValue -= 0.5;\n        } else {\n          _currentValue -= 1;\n        }\n\n        e.stopPropagation();\n        e.preventDefault();\n      }\n\n      _currentValue = _currentValue < 0 ? 0 : _currentValue;\n      _currentValue = _currentValue > props.max ? props.max : _currentValue;\n      emit(UPDATE_MODEL_EVENT, _currentValue);\n      emit(\"change\", _currentValue);\n      return _currentValue;\n    }\n\n    function setCurrentValue(value, event) {\n      if (rateDisabled.value) {\n        return;\n      }\n\n      if (props.allowHalf) {\n        var target = event.target;\n\n        if (hasClass(target, \"el-rate__item\")) {\n          target = target.querySelector(\".el-rate__icon\");\n        }\n\n        if (target.clientWidth === 0 || hasClass(target, \"el-rate__decimal\")) {\n          target = target.parentNode;\n        }\n\n        pointerAtLeftHalf.value = event.offsetX * 2 <= target.clientWidth;\n        currentValue.value = pointerAtLeftHalf.value ? value - 0.5 : value;\n      } else {\n        currentValue.value = value;\n      }\n\n      hoverIndex.value = value;\n    }\n\n    function resetCurrentValue() {\n      if (rateDisabled.value) {\n        return;\n      }\n\n      if (props.allowHalf) {\n        pointerAtLeftHalf.value = props.modelValue !== Math.floor(props.modelValue);\n      }\n\n      currentValue.value = props.modelValue;\n      hoverIndex.value = -1;\n    }\n\n    watch(function () {\n      return props.modelValue;\n    }, function (val) {\n      currentValue.value = val;\n      pointerAtLeftHalf.value = props.modelValue !== Math.floor(props.modelValue);\n    });\n\n    if (!props.modelValue) {\n      emit(UPDATE_MODEL_EVENT, 0);\n    }\n\n    return {\n      hoverIndex: hoverIndex,\n      currentValue: currentValue,\n      rateDisabled: rateDisabled,\n      text: text,\n      decimalStyle: decimalStyle,\n      decimalIconComponent: decimalIconComponent,\n      iconComponents: iconComponents,\n      showDecimalIcon: showDecimalIcon,\n      getIconStyle: getIconStyle,\n      selectValue: selectValue,\n      handleKey: handleKey,\n      setCurrentValue: setCurrentValue,\n      resetCurrentValue: resetCurrentValue\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}