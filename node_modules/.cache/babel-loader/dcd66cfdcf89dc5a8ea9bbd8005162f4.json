{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, toDisplayString, renderSlot, createTextVNode, createCommentVNode, h, Fragment, withDirectives, Teleport } from 'vue';\nimport '../../../directives/index.mjs';\nimport _Popper from '../../popper/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { renderIf, PatchFlags } from '../../../utils/vnode.mjs';\nimport usePopover, { SHOW_EVENT, HIDE_EVENT } from './usePopover.mjs';\nimport popperDefaultProps, { Effect } from '../../popper/src/use-popper/defaults.mjs';\nimport renderPopper from '../../popper/src/renderers/popper.mjs';\nimport renderArrow from '../../popper/src/renderers/arrow.mjs';\nimport renderTrigger from '../../popper/src/renderers/trigger.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nvar emits = [\"update:visible\", \"after-enter\", \"after-leave\", SHOW_EVENT, HIDE_EVENT];\nvar NAME = \"ElPopover\";\nvar _hoist = {\n  key: 0,\n  \"class\": \"el-popover__title\",\n  role: \"title\"\n};\nvar script = defineComponent({\n  name: NAME,\n  components: {\n    ElPopper: _Popper\n  },\n  props: _objectSpread(_objectSpread({}, popperDefaultProps), {}, {\n    content: {\n      type: String\n    },\n    trigger: {\n      type: String,\n      \"default\": \"click\"\n    },\n    title: {\n      type: String\n    },\n    transition: {\n      type: String,\n      \"default\": \"fade-in-linear\"\n    },\n    width: {\n      type: [String, Number],\n      \"default\": 150\n    },\n    appendToBody: {\n      type: Boolean,\n      \"default\": true\n    },\n    tabindex: [String, Number]\n  }),\n  emits: emits,\n  setup: function setup(props, ctx) {\n    if (props.visible && !ctx.slots.reference) {\n      debugWarn(NAME, \"\\n        You cannot init popover without given reference\\n      \");\n    }\n\n    var states = usePopover(props, ctx);\n    return states;\n  },\n  render: function render() {\n    var _this = this;\n\n    var $slots = this.$slots;\n    var trigger = $slots.reference ? $slots.reference() : null;\n    var title = renderIf(!!this.title, \"div\", _hoist, toDisplayString(this.title), PatchFlags.TEXT);\n    var content = renderSlot($slots, \"default\", {}, function () {\n      return [createTextVNode(toDisplayString(_this.content), PatchFlags.TEXT)];\n    });\n    var events = this.events,\n        onAfterEnter = this.onAfterEnter,\n        onAfterLeave = this.onAfterLeave,\n        onPopperMouseEnter = this.onPopperMouseEnter,\n        onPopperMouseLeave = this.onPopperMouseLeave,\n        popperStyle = this.popperStyle,\n        popperId = this.popperId,\n        popperClass = this.popperClass,\n        showArrow = this.showArrow,\n        transition = this.transition,\n        visibility = this.visibility,\n        tabindex = this.tabindex;\n    var kls = [this.content ? \"el-popover--plain\" : \"\", \"el-popover\", popperClass].join(\" \");\n    var popover = renderPopper({\n      effect: Effect.LIGHT,\n      name: transition,\n      popperClass: kls,\n      popperStyle: popperStyle,\n      popperId: popperId,\n      visibility: visibility,\n      onMouseenter: onPopperMouseEnter,\n      onMouseleave: onPopperMouseLeave,\n      onAfterEnter: onAfterEnter,\n      onAfterLeave: onAfterLeave,\n      stopPopperMouseEvent: false\n    }, [title, content, renderArrow(showArrow)]);\n\n    var _trigger = trigger ? renderTrigger(trigger, _objectSpread({\n      ariaDescribedby: popperId,\n      ref: \"triggerRef\",\n      tabindex: tabindex\n    }, events)) : createCommentVNode(\"v-if\", true);\n\n    return h(Fragment, null, [this.trigger === \"click\" ? withDirectives(_trigger, [[ClickOutside, this.hide]]) : _trigger, h(Teleport, {\n      disabled: !this.appendToBody,\n      to: \"body\"\n    }, [popover])]);\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}