{"ast":null,"code":"import { getCurrentInstance, ref, h } from 'vue';\nimport debounce from 'lodash/debounce';\nimport { hasClass, getStyle } from '../../../../utils/dom.mjs';\nimport { getCell, getColumnByCell, createTablePopper } from '../util.mjs';\n\nfunction useEvents(props) {\n  var instance = getCurrentInstance();\n  var parent = instance.parent;\n  var tooltipContent = ref(\"\");\n  var tooltipTrigger = ref(h(\"div\"));\n\n  var handleEvent = function handleEvent(event, row, name) {\n    var table = parent;\n    var cell = getCell(event);\n    var column;\n\n    if (cell) {\n      column = getColumnByCell({\n        columns: props.store.states.columns.value\n      }, cell);\n\n      if (column) {\n        table.emit(\"cell-\".concat(name), row, column, cell, event);\n      }\n    }\n\n    table.emit(\"row-\".concat(name), row, column, event);\n  };\n\n  var handleDoubleClick = function handleDoubleClick(event, row) {\n    handleEvent(event, row, \"dblclick\");\n  };\n\n  var handleClick = function handleClick(event, row) {\n    props.store.commit(\"setCurrentRow\", row);\n    handleEvent(event, row, \"click\");\n  };\n\n  var handleContextMenu = function handleContextMenu(event, row) {\n    handleEvent(event, row, \"contextmenu\");\n  };\n\n  var handleMouseEnter = debounce(function (index) {\n    props.store.commit(\"setHoverRow\", index);\n  }, 30);\n  var handleMouseLeave = debounce(function () {\n    props.store.commit(\"setHoverRow\", null);\n  }, 30);\n\n  var handleCellMouseEnter = function handleCellMouseEnter(event, row) {\n    var table = parent;\n    var cell = getCell(event);\n\n    if (cell) {\n      var column = getColumnByCell({\n        columns: props.store.states.columns.value\n      }, cell);\n      var hoverState = table.hoverState = {\n        cell: cell,\n        column: column,\n        row: row\n      };\n      table.emit(\"cell-mouse-enter\", hoverState.row, hoverState.column, hoverState.cell, event);\n    }\n\n    var cellChild = event.target.querySelector(\".cell\");\n\n    if (!(hasClass(cellChild, \"el-tooltip\") && cellChild.childNodes.length)) {\n      return;\n    }\n\n    var range = document.createRange();\n    range.setStart(cellChild, 0);\n    range.setEnd(cellChild, cellChild.childNodes.length);\n    var rangeWidth = range.getBoundingClientRect().width;\n    var padding = (parseInt(getStyle(cellChild, \"paddingLeft\"), 10) || 0) + (parseInt(getStyle(cellChild, \"paddingRight\"), 10) || 0);\n\n    if (rangeWidth + padding > cellChild.offsetWidth || cellChild.scrollWidth > cellChild.offsetWidth) {\n      createTablePopper(cell, cell.innerText || cell.textContent, {\n        placement: \"top\",\n        strategy: \"fixed\"\n      }, row.tooltipEffect);\n    }\n  };\n\n  var handleCellMouseLeave = function handleCellMouseLeave(event) {\n    var cell = getCell(event);\n    if (!cell) return;\n    var oldHoverState = parent.hoverState;\n    parent.emit(\"cell-mouse-leave\", oldHoverState == null ? void 0 : oldHoverState.row, oldHoverState == null ? void 0 : oldHoverState.column, oldHoverState == null ? void 0 : oldHoverState.cell, event);\n  };\n\n  return {\n    handleDoubleClick: handleDoubleClick,\n    handleClick: handleClick,\n    handleContextMenu: handleContextMenu,\n    handleMouseEnter: handleMouseEnter,\n    handleMouseLeave: handleMouseLeave,\n    handleCellMouseEnter: handleCellMouseEnter,\n    handleCellMouseLeave: handleCellMouseLeave,\n    tooltipContent: tooltipContent,\n    tooltipTrigger: tooltipTrigger\n  };\n}\n\nexport { useEvents as default };","map":null,"metadata":{},"sourceType":"module"}