{"ast":null,"code":"import { defineComponent, inject, ref, watch, computed, nextTick, onMounted } from 'vue';\nimport { isPromise } from '@vue/shared';\nimport '../../../tokens/index.mjs';\nimport { isBool } from '../../../utils/util.mjs';\nimport { throwError, debugWarn } from '../../../utils/error.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Loading } from '@element-plus/icons';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nvar script = defineComponent({\n  name: \"ElSwitch\",\n  components: {\n    ElIcon: ElIcon,\n    Loading: Loading\n  },\n  props: {\n    modelValue: {\n      type: [Boolean, String, Number],\n      \"default\": false\n    },\n    value: {\n      type: [Boolean, String, Number],\n      \"default\": false\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    width: {\n      type: Number,\n      \"default\": 40\n    },\n    inlinePrompt: {\n      type: Boolean,\n      \"default\": false\n    },\n    activeIcon: {\n      type: [String, Object],\n      \"default\": \"\"\n    },\n    inactiveIcon: {\n      type: [String, Object],\n      \"default\": \"\"\n    },\n    activeText: {\n      type: String,\n      \"default\": \"\"\n    },\n    inactiveText: {\n      type: String,\n      \"default\": \"\"\n    },\n    activeColor: {\n      type: String,\n      \"default\": \"\"\n    },\n    inactiveColor: {\n      type: String,\n      \"default\": \"\"\n    },\n    borderColor: {\n      type: String,\n      \"default\": \"\"\n    },\n    activeValue: {\n      type: [Boolean, String, Number],\n      \"default\": true\n    },\n    inactiveValue: {\n      type: [Boolean, String, Number],\n      \"default\": false\n    },\n    name: {\n      type: String,\n      \"default\": \"\"\n    },\n    validateEvent: {\n      type: Boolean,\n      \"default\": true\n    },\n    id: String,\n    loading: {\n      type: Boolean,\n      \"default\": false\n    },\n    beforeChange: Function\n  },\n  emits: [\"update:modelValue\", \"change\", \"input\"],\n  setup: function setup(props, ctx) {\n    var elForm = inject(elFormKey, {});\n    var elFormItem = inject(elFormItemKey, {});\n    var isModelValue = ref(props.modelValue !== false);\n    var input = ref(null);\n    var core = ref(null);\n    var scope = \"ElSwitch\";\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      isModelValue.value = true;\n    });\n    watch(function () {\n      return props.value;\n    }, function () {\n      isModelValue.value = false;\n    });\n    var actualValue = computed(function () {\n      return isModelValue.value ? props.modelValue : props.value;\n    });\n    var checked = computed(function () {\n      return actualValue.value === props.activeValue;\n    });\n\n    if (!~[props.activeValue, props.inactiveValue].indexOf(actualValue.value)) {\n      ctx.emit(\"update:modelValue\", props.inactiveValue);\n      ctx.emit(\"change\", props.inactiveValue);\n      ctx.emit(\"input\", props.inactiveValue);\n    }\n\n    watch(checked, function () {\n      var _a;\n\n      input.value.checked = checked.value;\n\n      if (props.activeColor || props.inactiveColor) {\n        setBackgroundColor();\n      }\n\n      if (props.validateEvent) {\n        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n      }\n    });\n    var switchDisabled = computed(function () {\n      return props.disabled || props.loading || (elForm || {}).disabled;\n    });\n\n    var handleChange = function handleChange() {\n      var val = checked.value ? props.inactiveValue : props.activeValue;\n      ctx.emit(\"update:modelValue\", val);\n      ctx.emit(\"change\", val);\n      ctx.emit(\"input\", val);\n      nextTick(function () {\n        input.value.checked = checked.value;\n      });\n    };\n\n    var switchValue = function switchValue() {\n      if (switchDisabled.value) return;\n      var beforeChange = props.beforeChange;\n\n      if (!beforeChange) {\n        handleChange();\n        return;\n      }\n\n      var shouldChange = beforeChange();\n      var isExpectType = [isPromise(shouldChange), isBool(shouldChange)].some(function (i) {\n        return i;\n      });\n\n      if (!isExpectType) {\n        throwError(scope, \"beforeChange must return type `Promise<boolean>` or `boolean`\");\n      }\n\n      if (isPromise(shouldChange)) {\n        shouldChange.then(function (result) {\n          if (result) {\n            handleChange();\n          }\n        })[\"catch\"](function (e) {\n          debugWarn(scope, \"some error occurred: \".concat(e));\n        });\n      } else if (shouldChange) {\n        handleChange();\n      }\n    };\n\n    var setBackgroundColor = function setBackgroundColor() {\n      var newColor = checked.value ? props.activeColor : props.inactiveColor;\n      var coreEl = core.value;\n      if (props.borderColor) coreEl.style.borderColor = props.borderColor;else if (!props.borderColor) coreEl.style.borderColor = newColor;\n      coreEl.style.backgroundColor = newColor;\n      coreEl.children[0].style.color = newColor;\n    };\n\n    var focus = function focus() {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n\n    onMounted(function () {\n      if (props.activeColor || props.inactiveColor || props.borderColor) {\n        setBackgroundColor();\n      }\n\n      input.value.checked = checked.value;\n    });\n    return {\n      input: input,\n      core: core,\n      switchDisabled: switchDisabled,\n      checked: checked,\n      handleChange: handleChange,\n      switchValue: switchValue,\n      focus: focus\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}