{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, provide, computed } from 'vue';\nimport { useGlobalConfig } from '../../../utils/util.mjs';\nimport { isValidComponentSize } from '../../../utils/validators.mjs';\nimport './descriptions-row.mjs';\nimport { elDescriptionsKey } from './token.mjs';\nimport script$1 from './descriptions-row.vue_vue&type=script&lang.mjs';\nvar script = defineComponent({\n  name: \"ElDescriptions\",\n  components: _defineProperty({}, script$1.name, script$1),\n  props: {\n    border: {\n      type: Boolean,\n      \"default\": false\n    },\n    column: {\n      type: Number,\n      \"default\": 3\n    },\n    direction: {\n      type: String,\n      \"default\": \"horizontal\"\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    title: {\n      type: String,\n      \"default\": \"\"\n    },\n    extra: {\n      type: String,\n      \"default\": \"\"\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    provide(elDescriptionsKey, props);\n    var $ELEMENT = useGlobalConfig();\n    var descriptionsSize = computed(function () {\n      return props.size || $ELEMENT.size;\n    });\n\n    var flattedChildren = function flattedChildren(children) {\n      var temp = Array.isArray(children) ? children : [children];\n      var res = [];\n      temp.forEach(function (child) {\n        if (Array.isArray(child.children)) {\n          res.push.apply(res, _toConsumableArray(flattedChildren(child.children)));\n        } else {\n          res.push(child);\n        }\n      });\n      return res;\n    };\n\n    var filledNode = function filledNode(node, span, count) {\n      var isLast = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (!node.props) {\n        node.props = {};\n      }\n\n      if (span > count) {\n        node.props.span = count;\n      }\n\n      if (isLast) {\n        node.props.span = span;\n      }\n\n      return node;\n    };\n\n    var getRows = function getRows() {\n      var _a;\n\n      var children = flattedChildren((_a = slots[\"default\"]) == null ? void 0 : _a.call(slots)).filter(function (node) {\n        var _a2;\n\n        return ((_a2 = node == null ? void 0 : node.type) == null ? void 0 : _a2.name) === \"ElDescriptionsItem\";\n      });\n      var rows = [];\n      var temp = [];\n      var count = props.column;\n      var totalSpan = 0;\n      children.forEach(function (node, index) {\n        var _a2;\n\n        var span = ((_a2 = node.props) == null ? void 0 : _a2.span) || 1;\n\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span;\n        }\n\n        if (index === children.length - 1) {\n          var lastSpan = props.column - totalSpan % props.column;\n          temp.push(filledNode(node, lastSpan, count, true));\n          rows.push(temp);\n          return;\n        }\n\n        if (span < count) {\n          count -= span;\n          temp.push(node);\n        } else {\n          temp.push(filledNode(node, span, count));\n          rows.push(temp);\n          count = props.column;\n          temp = [];\n        }\n      });\n      return rows;\n    };\n\n    return {\n      descriptionsSize: descriptionsSize,\n      getRows: getRows\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}