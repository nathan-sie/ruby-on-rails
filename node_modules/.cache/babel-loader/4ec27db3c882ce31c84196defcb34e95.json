{"ast":null,"code":"import { createElementVNode, openBlock, createElementBlock, normalizeClass, withDirectives, vModelCheckbox, renderSlot, Fragment, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nvar _hoisted_1 = [\"id\", \"aria-controls\"];\nvar _hoisted_2 = [\"tabindex\", \"role\", \"aria-checked\"];\n\nvar _hoisted_3 = /* @__PURE__ */createElementVNode(\"span\", {\n  \"class\": \"el-checkbox__inner\"\n}, null, -1);\n\nvar _hoisted_4 = [\"aria-hidden\", \"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\"];\nvar _hoisted_5 = [\"aria-hidden\", \"disabled\", \"value\", \"name\", \"tabindex\"];\nvar _hoisted_6 = {\n  key: 0,\n  \"class\": \"el-checkbox__label\"\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"label\", {\n    id: _ctx.id,\n    \"class\": normalizeClass([\"el-checkbox\", [_ctx.checkboxSize ? \"el-checkbox--\" + _ctx.checkboxSize : \"\", {\n      \"is-disabled\": _ctx.isDisabled\n    }, {\n      \"is-bordered\": _ctx.border\n    }, {\n      \"is-checked\": _ctx.isChecked\n    }]]),\n    \"aria-controls\": _ctx.indeterminate ? _ctx.controls : null\n  }, [createElementVNode(\"span\", {\n    \"class\": normalizeClass([\"el-checkbox__input\", {\n      \"is-disabled\": _ctx.isDisabled,\n      \"is-checked\": _ctx.isChecked,\n      \"is-indeterminate\": _ctx.indeterminate,\n      \"is-focus\": _ctx.focus\n    }]),\n    tabindex: _ctx.indeterminate ? 0 : void 0,\n    role: _ctx.indeterminate ? \"checkbox\" : void 0,\n    \"aria-checked\": _ctx.indeterminate ? \"mixed\" : false\n  }, [_hoisted_3, _ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock(\"input\", {\n    key: 0,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return _ctx.model = $event;\n    }),\n    \"class\": \"el-checkbox__original\",\n    type: \"checkbox\",\n    \"aria-hidden\": _ctx.indeterminate ? \"true\" : \"false\",\n    name: _ctx.name,\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.isDisabled,\n    \"true-value\": _ctx.trueLabel,\n    \"false-value\": _ctx.falseLabel,\n    onChange: _cache[1] || (_cache[1] = function () {\n      return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);\n    }),\n    onFocus: _cache[2] || (_cache[2] = function ($event) {\n      return _ctx.focus = true;\n    }),\n    onBlur: _cache[3] || (_cache[3] = function ($event) {\n      return _ctx.focus = false;\n    })\n  }, null, 40, _hoisted_4)), [[vModelCheckbox, _ctx.model]]) : withDirectives((openBlock(), createElementBlock(\"input\", {\n    key: 1,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = function ($event) {\n      return _ctx.model = $event;\n    }),\n    \"class\": \"el-checkbox__original\",\n    type: \"checkbox\",\n    \"aria-hidden\": _ctx.indeterminate ? \"true\" : \"false\",\n    disabled: _ctx.isDisabled,\n    value: _ctx.label,\n    name: _ctx.name,\n    tabindex: _ctx.tabindex,\n    onChange: _cache[5] || (_cache[5] = function () {\n      return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);\n    }),\n    onFocus: _cache[6] || (_cache[6] = function ($event) {\n      return _ctx.focus = true;\n    }),\n    onBlur: _cache[7] || (_cache[7] = function ($event) {\n      return _ctx.focus = false;\n    })\n  }, null, 40, _hoisted_5)), [[vModelCheckbox, _ctx.model]])], 10, _hoisted_2), _ctx.$slots[\"default\"] || _ctx.label ? (openBlock(), createElementBlock(\"span\", _hoisted_6, [renderSlot(_ctx.$slots, \"default\"), !_ctx.$slots[\"default\"] ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [createTextVNode(toDisplayString(_ctx.label), 1)], 2112)) : createCommentVNode(\"v-if\", true)])) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n}\n\nexport { render };","map":null,"metadata":{},"sourceType":"module"}