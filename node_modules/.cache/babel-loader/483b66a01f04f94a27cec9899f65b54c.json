{"ast":null,"code":"var _errorMessages, _helperNameMap, _deprecationData;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { isString, hyphenate, NOOP, extend, isObject, NO, isArray, makeMap, isSymbol, EMPTY_OBJ, capitalize, camelize as camelize$1, PatchFlagNames, slotFlagsText, isOn, isReservedProp, toHandlerKey } from '@vue/shared';\nexport { generateCodeFrame } from '@vue/shared';\n\nfunction defaultOnError(error) {\n  throw error;\n}\n\nfunction defaultOnWarn(msg) {\n  process.env.NODE_ENV !== 'production' && console.warn(\"[Vue warn] \".concat(msg.message));\n}\n\nfunction createCompilerError(code, loc, messages, additionalMessage) {\n  var msg = process.env.NODE_ENV !== 'production' || !true ? (messages || errorMessages)[code] + (additionalMessage || \"\") : code;\n  var error = new SyntaxError(String(msg));\n  error.code = code;\n  error.loc = loc;\n  return error;\n}\n\nvar errorMessages = (_errorMessages = {}, _defineProperty(_errorMessages, 0\n/* ABRUPT_CLOSING_OF_EMPTY_COMMENT */\n, 'Illegal comment.'), _defineProperty(_errorMessages, 1\n/* CDATA_IN_HTML_CONTENT */\n, 'CDATA section is allowed only in XML context.'), _defineProperty(_errorMessages, 2\n/* DUPLICATE_ATTRIBUTE */\n, 'Duplicate attribute.'), _defineProperty(_errorMessages, 3\n/* END_TAG_WITH_ATTRIBUTES */\n, 'End tag cannot have attributes.'), _defineProperty(_errorMessages, 4\n/* END_TAG_WITH_TRAILING_SOLIDUS */\n, \"Illegal '/' in tags.\"), _defineProperty(_errorMessages, 5\n/* EOF_BEFORE_TAG_NAME */\n, 'Unexpected EOF in tag.'), _defineProperty(_errorMessages, 6\n/* EOF_IN_CDATA */\n, 'Unexpected EOF in CDATA section.'), _defineProperty(_errorMessages, 7\n/* EOF_IN_COMMENT */\n, 'Unexpected EOF in comment.'), _defineProperty(_errorMessages, 8\n/* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */\n, 'Unexpected EOF in script.'), _defineProperty(_errorMessages, 9\n/* EOF_IN_TAG */\n, 'Unexpected EOF in tag.'), _defineProperty(_errorMessages, 10\n/* INCORRECTLY_CLOSED_COMMENT */\n, 'Incorrectly closed comment.'), _defineProperty(_errorMessages, 11\n/* INCORRECTLY_OPENED_COMMENT */\n, 'Incorrectly opened comment.'), _defineProperty(_errorMessages, 12\n/* INVALID_FIRST_CHARACTER_OF_TAG_NAME */\n, \"Illegal tag name. Use '&lt;' to print '<'.\"), _defineProperty(_errorMessages, 13\n/* MISSING_ATTRIBUTE_VALUE */\n, 'Attribute value was expected.'), _defineProperty(_errorMessages, 14\n/* MISSING_END_TAG_NAME */\n, 'End tag name was expected.'), _defineProperty(_errorMessages, 15\n/* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */\n, 'Whitespace was expected.'), _defineProperty(_errorMessages, 16\n/* NESTED_COMMENT */\n, \"Unexpected '<!--' in comment.\"), _defineProperty(_errorMessages, 17\n/* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */\n, 'Attribute name cannot contain U+0022 (\"), U+0027 (\\'), and U+003C (<).'), _defineProperty(_errorMessages, 18\n/* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */\n, 'Unquoted attribute value cannot contain U+0022 (\"), U+0027 (\\'), U+003C (<), U+003D (=), and U+0060 (`).'), _defineProperty(_errorMessages, 19\n/* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */\n, \"Attribute name cannot start with '='.\"), _defineProperty(_errorMessages, 21\n/* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */\n, \"'<?' is allowed only in XML context.\"), _defineProperty(_errorMessages, 20\n/* UNEXPECTED_NULL_CHARACTER */\n, \"Unexpected null character.\"), _defineProperty(_errorMessages, 22\n/* UNEXPECTED_SOLIDUS_IN_TAG */\n, \"Illegal '/' in tags.\"), _defineProperty(_errorMessages, 23\n/* X_INVALID_END_TAG */\n, 'Invalid end tag.'), _defineProperty(_errorMessages, 24\n/* X_MISSING_END_TAG */\n, 'Element is missing end tag.'), _defineProperty(_errorMessages, 25\n/* X_MISSING_INTERPOLATION_END */\n, 'Interpolation end sign was not found.'), _defineProperty(_errorMessages, 27\n/* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */\n, 'End bracket for dynamic directive argument was not found. ' + 'Note that dynamic directive argument cannot contain spaces.'), _defineProperty(_errorMessages, 26\n/* X_MISSING_DIRECTIVE_NAME */\n, 'Legal directive name was expected.'), _defineProperty(_errorMessages, 28\n/* X_V_IF_NO_EXPRESSION */\n, \"v-if/v-else-if is missing expression.\"), _defineProperty(_errorMessages, 29\n/* X_V_IF_SAME_KEY */\n, \"v-if/else branches must use unique keys.\"), _defineProperty(_errorMessages, 30\n/* X_V_ELSE_NO_ADJACENT_IF */\n, \"v-else/v-else-if has no adjacent v-if or v-else-if.\"), _defineProperty(_errorMessages, 31\n/* X_V_FOR_NO_EXPRESSION */\n, \"v-for is missing expression.\"), _defineProperty(_errorMessages, 32\n/* X_V_FOR_MALFORMED_EXPRESSION */\n, \"v-for has invalid expression.\"), _defineProperty(_errorMessages, 33\n/* X_V_FOR_TEMPLATE_KEY_PLACEMENT */\n, \"<template v-for> key should be placed on the <template> tag.\"), _defineProperty(_errorMessages, 34\n/* X_V_BIND_NO_EXPRESSION */\n, \"v-bind is missing expression.\"), _defineProperty(_errorMessages, 35\n/* X_V_ON_NO_EXPRESSION */\n, \"v-on is missing expression.\"), _defineProperty(_errorMessages, 36\n/* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */\n, \"Unexpected custom directive on <slot> outlet.\"), _defineProperty(_errorMessages, 37\n/* X_V_SLOT_MIXED_SLOT_USAGE */\n, \"Mixed v-slot usage on both the component and nested <template>.\" + \"When there are multiple named slots, all slots should use <template> \" + \"syntax to avoid scope ambiguity.\"), _defineProperty(_errorMessages, 38\n/* X_V_SLOT_DUPLICATE_SLOT_NAMES */\n, \"Duplicate slot names found. \"), _defineProperty(_errorMessages, 39\n/* X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN */\n, \"Extraneous children found when component already has explicitly named \" + \"default slot. These children will be ignored.\"), _defineProperty(_errorMessages, 40\n/* X_V_SLOT_MISPLACED */\n, \"v-slot can only be used on components or <template> tags.\"), _defineProperty(_errorMessages, 41\n/* X_V_MODEL_NO_EXPRESSION */\n, \"v-model is missing expression.\"), _defineProperty(_errorMessages, 42\n/* X_V_MODEL_MALFORMED_EXPRESSION */\n, \"v-model value must be a valid JavaScript member expression.\"), _defineProperty(_errorMessages, 43\n/* X_V_MODEL_ON_SCOPE_VARIABLE */\n, \"v-model cannot be used on v-for or v-slot scope variables because they are not writable.\"), _defineProperty(_errorMessages, 44\n/* X_INVALID_EXPRESSION */\n, \"Error parsing JavaScript expression: \"), _defineProperty(_errorMessages, 45\n/* X_KEEP_ALIVE_INVALID_CHILDREN */\n, \"<KeepAlive> expects exactly one child component.\"), _defineProperty(_errorMessages, 46\n/* X_PREFIX_ID_NOT_SUPPORTED */\n, \"\\\"prefixIdentifiers\\\" option is not supported in this build of compiler.\"), _defineProperty(_errorMessages, 47\n/* X_MODULE_MODE_NOT_SUPPORTED */\n, \"ES module mode is not supported in this build of compiler.\"), _defineProperty(_errorMessages, 48\n/* X_CACHE_HANDLER_NOT_SUPPORTED */\n, \"\\\"cacheHandlers\\\" option is only supported when the \\\"prefixIdentifiers\\\" option is enabled.\"), _defineProperty(_errorMessages, 49\n/* X_SCOPE_ID_NOT_SUPPORTED */\n, \"\\\"scopeId\\\" option is only supported in module mode.\"), _defineProperty(_errorMessages, 50\n/* __EXTEND_POINT__ */\n, \"\"), _errorMessages);\nvar FRAGMENT = Symbol(process.env.NODE_ENV !== 'production' ? \"Fragment\" : \"\");\nvar TELEPORT = Symbol(process.env.NODE_ENV !== 'production' ? \"Teleport\" : \"\");\nvar SUSPENSE = Symbol(process.env.NODE_ENV !== 'production' ? \"Suspense\" : \"\");\nvar KEEP_ALIVE = Symbol(process.env.NODE_ENV !== 'production' ? \"KeepAlive\" : \"\");\nvar BASE_TRANSITION = Symbol(process.env.NODE_ENV !== 'production' ? \"BaseTransition\" : \"\");\nvar OPEN_BLOCK = Symbol(process.env.NODE_ENV !== 'production' ? \"openBlock\" : \"\");\nvar CREATE_BLOCK = Symbol(process.env.NODE_ENV !== 'production' ? \"createBlock\" : \"\");\nvar CREATE_ELEMENT_BLOCK = Symbol(process.env.NODE_ENV !== 'production' ? \"createElementBlock\" : \"\");\nvar CREATE_VNODE = Symbol(process.env.NODE_ENV !== 'production' ? \"createVNode\" : \"\");\nvar CREATE_ELEMENT_VNODE = Symbol(process.env.NODE_ENV !== 'production' ? \"createElementVNode\" : \"\");\nvar CREATE_COMMENT = Symbol(process.env.NODE_ENV !== 'production' ? \"createCommentVNode\" : \"\");\nvar CREATE_TEXT = Symbol(process.env.NODE_ENV !== 'production' ? \"createTextVNode\" : \"\");\nvar CREATE_STATIC = Symbol(process.env.NODE_ENV !== 'production' ? \"createStaticVNode\" : \"\");\nvar RESOLVE_COMPONENT = Symbol(process.env.NODE_ENV !== 'production' ? \"resolveComponent\" : \"\");\nvar RESOLVE_DYNAMIC_COMPONENT = Symbol(process.env.NODE_ENV !== 'production' ? \"resolveDynamicComponent\" : \"\");\nvar RESOLVE_DIRECTIVE = Symbol(process.env.NODE_ENV !== 'production' ? \"resolveDirective\" : \"\");\nvar RESOLVE_FILTER = Symbol(process.env.NODE_ENV !== 'production' ? \"resolveFilter\" : \"\");\nvar WITH_DIRECTIVES = Symbol(process.env.NODE_ENV !== 'production' ? \"withDirectives\" : \"\");\nvar RENDER_LIST = Symbol(process.env.NODE_ENV !== 'production' ? \"renderList\" : \"\");\nvar RENDER_SLOT = Symbol(process.env.NODE_ENV !== 'production' ? \"renderSlot\" : \"\");\nvar CREATE_SLOTS = Symbol(process.env.NODE_ENV !== 'production' ? \"createSlots\" : \"\");\nvar TO_DISPLAY_STRING = Symbol(process.env.NODE_ENV !== 'production' ? \"toDisplayString\" : \"\");\nvar MERGE_PROPS = Symbol(process.env.NODE_ENV !== 'production' ? \"mergeProps\" : \"\");\nvar NORMALIZE_CLASS = Symbol(process.env.NODE_ENV !== 'production' ? \"normalizeClass\" : \"\");\nvar NORMALIZE_STYLE = Symbol(process.env.NODE_ENV !== 'production' ? \"normalizeStyle\" : \"\");\nvar NORMALIZE_PROPS = Symbol(process.env.NODE_ENV !== 'production' ? \"normalizeProps\" : \"\");\nvar GUARD_REACTIVE_PROPS = Symbol(process.env.NODE_ENV !== 'production' ? \"guardReactiveProps\" : \"\");\nvar TO_HANDLERS = Symbol(process.env.NODE_ENV !== 'production' ? \"toHandlers\" : \"\");\nvar CAMELIZE = Symbol(process.env.NODE_ENV !== 'production' ? \"camelize\" : \"\");\nvar CAPITALIZE = Symbol(process.env.NODE_ENV !== 'production' ? \"capitalize\" : \"\");\nvar TO_HANDLER_KEY = Symbol(process.env.NODE_ENV !== 'production' ? \"toHandlerKey\" : \"\");\nvar SET_BLOCK_TRACKING = Symbol(process.env.NODE_ENV !== 'production' ? \"setBlockTracking\" : \"\");\nvar PUSH_SCOPE_ID = Symbol(process.env.NODE_ENV !== 'production' ? \"pushScopeId\" : \"\");\nvar POP_SCOPE_ID = Symbol(process.env.NODE_ENV !== 'production' ? \"popScopeId\" : \"\");\nvar WITH_CTX = Symbol(process.env.NODE_ENV !== 'production' ? \"withCtx\" : \"\");\nvar UNREF = Symbol(process.env.NODE_ENV !== 'production' ? \"unref\" : \"\");\nvar IS_REF = Symbol(process.env.NODE_ENV !== 'production' ? \"isRef\" : \"\");\nvar WITH_MEMO = Symbol(process.env.NODE_ENV !== 'production' ? \"withMemo\" : \"\");\nvar IS_MEMO_SAME = Symbol(process.env.NODE_ENV !== 'production' ? \"isMemoSame\" : \"\"); // Name mapping for runtime helpers that need to be imported from 'vue' in\n// generated code. Make sure these are correctly exported in the runtime!\n// Using `any` here because TS doesn't allow symbols as index type.\n\nvar helperNameMap = (_helperNameMap = {}, _defineProperty(_helperNameMap, FRAGMENT, \"Fragment\"), _defineProperty(_helperNameMap, TELEPORT, \"Teleport\"), _defineProperty(_helperNameMap, SUSPENSE, \"Suspense\"), _defineProperty(_helperNameMap, KEEP_ALIVE, \"KeepAlive\"), _defineProperty(_helperNameMap, BASE_TRANSITION, \"BaseTransition\"), _defineProperty(_helperNameMap, OPEN_BLOCK, \"openBlock\"), _defineProperty(_helperNameMap, CREATE_BLOCK, \"createBlock\"), _defineProperty(_helperNameMap, CREATE_ELEMENT_BLOCK, \"createElementBlock\"), _defineProperty(_helperNameMap, CREATE_VNODE, \"createVNode\"), _defineProperty(_helperNameMap, CREATE_ELEMENT_VNODE, \"createElementVNode\"), _defineProperty(_helperNameMap, CREATE_COMMENT, \"createCommentVNode\"), _defineProperty(_helperNameMap, CREATE_TEXT, \"createTextVNode\"), _defineProperty(_helperNameMap, CREATE_STATIC, \"createStaticVNode\"), _defineProperty(_helperNameMap, RESOLVE_COMPONENT, \"resolveComponent\"), _defineProperty(_helperNameMap, RESOLVE_DYNAMIC_COMPONENT, \"resolveDynamicComponent\"), _defineProperty(_helperNameMap, RESOLVE_DIRECTIVE, \"resolveDirective\"), _defineProperty(_helperNameMap, RESOLVE_FILTER, \"resolveFilter\"), _defineProperty(_helperNameMap, WITH_DIRECTIVES, \"withDirectives\"), _defineProperty(_helperNameMap, RENDER_LIST, \"renderList\"), _defineProperty(_helperNameMap, RENDER_SLOT, \"renderSlot\"), _defineProperty(_helperNameMap, CREATE_SLOTS, \"createSlots\"), _defineProperty(_helperNameMap, TO_DISPLAY_STRING, \"toDisplayString\"), _defineProperty(_helperNameMap, MERGE_PROPS, \"mergeProps\"), _defineProperty(_helperNameMap, NORMALIZE_CLASS, \"normalizeClass\"), _defineProperty(_helperNameMap, NORMALIZE_STYLE, \"normalizeStyle\"), _defineProperty(_helperNameMap, NORMALIZE_PROPS, \"normalizeProps\"), _defineProperty(_helperNameMap, GUARD_REACTIVE_PROPS, \"guardReactiveProps\"), _defineProperty(_helperNameMap, TO_HANDLERS, \"toHandlers\"), _defineProperty(_helperNameMap, CAMELIZE, \"camelize\"), _defineProperty(_helperNameMap, CAPITALIZE, \"capitalize\"), _defineProperty(_helperNameMap, TO_HANDLER_KEY, \"toHandlerKey\"), _defineProperty(_helperNameMap, SET_BLOCK_TRACKING, \"setBlockTracking\"), _defineProperty(_helperNameMap, PUSH_SCOPE_ID, \"pushScopeId\"), _defineProperty(_helperNameMap, POP_SCOPE_ID, \"popScopeId\"), _defineProperty(_helperNameMap, WITH_CTX, \"withCtx\"), _defineProperty(_helperNameMap, UNREF, \"unref\"), _defineProperty(_helperNameMap, IS_REF, \"isRef\"), _defineProperty(_helperNameMap, WITH_MEMO, \"withMemo\"), _defineProperty(_helperNameMap, IS_MEMO_SAME, \"isMemoSame\"), _helperNameMap);\n\nfunction registerRuntimeHelpers(helpers) {\n  Object.getOwnPropertySymbols(helpers).forEach(function (s) {\n    helperNameMap[s] = helpers[s];\n  });\n} // AST Utilities ---------------------------------------------------------------\n// Some expressions, e.g. sequence and conditional expressions, are never\n// associated with template nodes, so their source locations are just a stub.\n// Container types like CompoundExpression also don't need a real location.\n\n\nvar locStub = {\n  source: '',\n  start: {\n    line: 1,\n    column: 1,\n    offset: 0\n  },\n  end: {\n    line: 1,\n    column: 1,\n    offset: 0\n  }\n};\n\nfunction createRoot(children) {\n  var loc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locStub;\n  return {\n    type: 0\n    /* ROOT */\n    ,\n    children: children,\n    helpers: [],\n    components: [],\n    directives: [],\n    hoists: [],\n    imports: [],\n    cached: 0,\n    temps: 0,\n    codegenNode: undefined,\n    loc: loc\n  };\n}\n\nfunction createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives) {\n  var isBlock = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n  var disableTracking = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n  var isComponent = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;\n  var loc = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : locStub;\n\n  if (context) {\n    if (isBlock) {\n      context.helper(OPEN_BLOCK);\n      context.helper(getVNodeBlockHelper(context.inSSR, isComponent));\n    } else {\n      context.helper(getVNodeHelper(context.inSSR, isComponent));\n    }\n\n    if (directives) {\n      context.helper(WITH_DIRECTIVES);\n    }\n  }\n\n  return {\n    type: 13\n    /* VNODE_CALL */\n    ,\n    tag: tag,\n    props: props,\n    children: children,\n    patchFlag: patchFlag,\n    dynamicProps: dynamicProps,\n    directives: directives,\n    isBlock: isBlock,\n    disableTracking: disableTracking,\n    isComponent: isComponent,\n    loc: loc\n  };\n}\n\nfunction createArrayExpression(elements) {\n  var loc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locStub;\n  return {\n    type: 17\n    /* JS_ARRAY_EXPRESSION */\n    ,\n    loc: loc,\n    elements: elements\n  };\n}\n\nfunction createObjectExpression(properties) {\n  var loc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locStub;\n  return {\n    type: 15\n    /* JS_OBJECT_EXPRESSION */\n    ,\n    loc: loc,\n    properties: properties\n  };\n}\n\nfunction createObjectProperty(key, value) {\n  return {\n    type: 16\n    /* JS_PROPERTY */\n    ,\n    loc: locStub,\n    key: isString(key) ? createSimpleExpression(key, true) : key,\n    value: value\n  };\n}\n\nfunction createSimpleExpression(content) {\n  var isStatic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var loc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : locStub;\n  var constType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  return {\n    type: 4\n    /* SIMPLE_EXPRESSION */\n    ,\n    loc: loc,\n    content: content,\n    isStatic: isStatic,\n    constType: isStatic ? 3\n    /* CAN_STRINGIFY */\n    : constType\n  };\n}\n\nfunction createInterpolation(content, loc) {\n  return {\n    type: 5\n    /* INTERPOLATION */\n    ,\n    loc: loc,\n    content: isString(content) ? createSimpleExpression(content, false, loc) : content\n  };\n}\n\nfunction createCompoundExpression(children) {\n  var loc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locStub;\n  return {\n    type: 8\n    /* COMPOUND_EXPRESSION */\n    ,\n    loc: loc,\n    children: children\n  };\n}\n\nfunction createCallExpression(callee) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var loc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : locStub;\n  return {\n    type: 14\n    /* JS_CALL_EXPRESSION */\n    ,\n    loc: loc,\n    callee: callee,\n    arguments: args\n  };\n}\n\nfunction createFunctionExpression(params) {\n  var returns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var newline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSlot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var loc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : locStub;\n  return {\n    type: 18\n    /* JS_FUNCTION_EXPRESSION */\n    ,\n    params: params,\n    returns: returns,\n    newline: newline,\n    isSlot: isSlot,\n    loc: loc\n  };\n}\n\nfunction createConditionalExpression(test, consequent, alternate) {\n  var newline = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return {\n    type: 19\n    /* JS_CONDITIONAL_EXPRESSION */\n    ,\n    test: test,\n    consequent: consequent,\n    alternate: alternate,\n    newline: newline,\n    loc: locStub\n  };\n}\n\nfunction createCacheExpression(index, value) {\n  var isVNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    type: 20\n    /* JS_CACHE_EXPRESSION */\n    ,\n    index: index,\n    value: value,\n    isVNode: isVNode,\n    loc: locStub\n  };\n}\n\nfunction createBlockStatement(body) {\n  return {\n    type: 21\n    /* JS_BLOCK_STATEMENT */\n    ,\n    body: body,\n    loc: locStub\n  };\n}\n\nfunction createTemplateLiteral(elements) {\n  return {\n    type: 22\n    /* JS_TEMPLATE_LITERAL */\n    ,\n    elements: elements,\n    loc: locStub\n  };\n}\n\nfunction createIfStatement(test, consequent, alternate) {\n  return {\n    type: 23\n    /* JS_IF_STATEMENT */\n    ,\n    test: test,\n    consequent: consequent,\n    alternate: alternate,\n    loc: locStub\n  };\n}\n\nfunction createAssignmentExpression(left, right) {\n  return {\n    type: 24\n    /* JS_ASSIGNMENT_EXPRESSION */\n    ,\n    left: left,\n    right: right,\n    loc: locStub\n  };\n}\n\nfunction createSequenceExpression(expressions) {\n  return {\n    type: 25\n    /* JS_SEQUENCE_EXPRESSION */\n    ,\n    expressions: expressions,\n    loc: locStub\n  };\n}\n\nfunction createReturnStatement(returns) {\n  return {\n    type: 26\n    /* JS_RETURN_STATEMENT */\n    ,\n    returns: returns,\n    loc: locStub\n  };\n}\n\nvar isStaticExp = function isStaticExp(p) {\n  return p.type === 4\n  /* SIMPLE_EXPRESSION */\n  && p.isStatic;\n};\n\nvar isBuiltInType = function isBuiltInType(tag, expected) {\n  return tag === expected || tag === hyphenate(expected);\n};\n\nfunction isCoreComponent(tag) {\n  if (isBuiltInType(tag, 'Teleport')) {\n    return TELEPORT;\n  } else if (isBuiltInType(tag, 'Suspense')) {\n    return SUSPENSE;\n  } else if (isBuiltInType(tag, 'KeepAlive')) {\n    return KEEP_ALIVE;\n  } else if (isBuiltInType(tag, 'BaseTransition')) {\n    return BASE_TRANSITION;\n  }\n}\n\nvar nonIdentifierRE = /^\\d|[^\\$\\w]/;\n\nvar isSimpleIdentifier = function isSimpleIdentifier(name) {\n  return !nonIdentifierRE.test(name);\n};\n\nvar validFirstIdentCharRE = /[A-Za-z_$\\xA0-\\uFFFF]/;\nvar validIdentCharRE = /[\\.\\?\\w$\\xA0-\\uFFFF]/;\nvar whitespaceRE = /\\s+[.[]\\s*|\\s*[.[]\\s+/g;\n/**\r\n * Simple lexer to check if an expression is a member expression. This is\r\n * lax and only checks validity at the root level (i.e. does not validate exps\r\n * inside square brackets), but it's ok since these are only used on template\r\n * expressions and false positives are invalid expressions in the first place.\r\n */\n\nvar isMemberExpressionBrowser = function isMemberExpressionBrowser(path) {\n  // remove whitespaces around . or [ first\n  path = path.trim().replace(whitespaceRE, function (s) {\n    return s.trim();\n  });\n  var state = 0\n  /* inMemberExp */\n  ;\n  var stateStack = [];\n  var currentOpenBracketCount = 0;\n  var currentOpenParensCount = 0;\n  var currentStringType = null;\n\n  for (var i = 0; i < path.length; i++) {\n    var _char = path.charAt(i);\n\n    switch (state) {\n      case 0\n      /* inMemberExp */\n      :\n        if (_char === '[') {\n          stateStack.push(state);\n          state = 1\n          /* inBrackets */\n          ;\n          currentOpenBracketCount++;\n        } else if (_char === '(') {\n          stateStack.push(state);\n          state = 2\n          /* inParens */\n          ;\n          currentOpenParensCount++;\n        } else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(_char)) {\n          return false;\n        }\n\n        break;\n\n      case 1\n      /* inBrackets */\n      :\n        if (_char === \"'\" || _char === \"\\\"\" || _char === '`') {\n          stateStack.push(state);\n          state = 3\n          /* inString */\n          ;\n          currentStringType = _char;\n        } else if (_char === \"[\") {\n          currentOpenBracketCount++;\n        } else if (_char === \"]\") {\n          if (! --currentOpenBracketCount) {\n            state = stateStack.pop();\n          }\n        }\n\n        break;\n\n      case 2\n      /* inParens */\n      :\n        if (_char === \"'\" || _char === \"\\\"\" || _char === '`') {\n          stateStack.push(state);\n          state = 3\n          /* inString */\n          ;\n          currentStringType = _char;\n        } else if (_char === \"(\") {\n          currentOpenParensCount++;\n        } else if (_char === \")\") {\n          // if the exp ends as a call then it should not be considered valid\n          if (i === path.length - 1) {\n            return false;\n          }\n\n          if (! --currentOpenParensCount) {\n            state = stateStack.pop();\n          }\n        }\n\n        break;\n\n      case 3\n      /* inString */\n      :\n        if (_char === currentStringType) {\n          state = stateStack.pop();\n          currentStringType = null;\n        }\n\n        break;\n    }\n  }\n\n  return !currentOpenBracketCount && !currentOpenParensCount;\n};\n\nvar isMemberExpressionNode = NOOP;\nvar isMemberExpression = isMemberExpressionBrowser;\n\nfunction getInnerRange(loc, offset, length) {\n  var source = loc.source.slice(offset, offset + length);\n  var newLoc = {\n    source: source,\n    start: advancePositionWithClone(loc.start, loc.source, offset),\n    end: loc.end\n  };\n\n  if (length != null) {\n    newLoc.end = advancePositionWithClone(loc.start, loc.source, offset + length);\n  }\n\n  return newLoc;\n}\n\nfunction advancePositionWithClone(pos, source) {\n  var numberOfCharacters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : source.length;\n  return advancePositionWithMutation(extend({}, pos), source, numberOfCharacters);\n} // advance by mutation without cloning (for performance reasons), since this\n// gets called a lot in the parser\n\n\nfunction advancePositionWithMutation(pos, source) {\n  var numberOfCharacters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : source.length;\n  var linesCount = 0;\n  var lastNewLinePos = -1;\n\n  for (var i = 0; i < numberOfCharacters; i++) {\n    if (source.charCodeAt(i) === 10\n    /* newline char code */\n    ) {\n      linesCount++;\n      lastNewLinePos = i;\n    }\n  }\n\n  pos.offset += numberOfCharacters;\n  pos.line += linesCount;\n  pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;\n  return pos;\n}\n\nfunction assert(condition, msg) {\n  /* istanbul ignore if */\n  if (!condition) {\n    throw new Error(msg || \"unexpected compiler condition\");\n  }\n}\n\nfunction findDir(node, name) {\n  var allowEmpty = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  for (var i = 0; i < node.props.length; i++) {\n    var p = node.props[i];\n\n    if (p.type === 7\n    /* DIRECTIVE */\n    && (allowEmpty || p.exp) && (isString(name) ? p.name === name : name.test(p.name))) {\n      return p;\n    }\n  }\n}\n\nfunction findProp(node, name) {\n  var dynamicOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var allowEmpty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  for (var i = 0; i < node.props.length; i++) {\n    var p = node.props[i];\n\n    if (p.type === 6\n    /* ATTRIBUTE */\n    ) {\n      if (dynamicOnly) continue;\n\n      if (p.name === name && (p.value || allowEmpty)) {\n        return p;\n      }\n    } else if (p.name === 'bind' && (p.exp || allowEmpty) && isBindKey(p.arg, name)) {\n      return p;\n    }\n  }\n}\n\nfunction isBindKey(arg, name) {\n  return !!(arg && isStaticExp(arg) && arg.content === name);\n}\n\nfunction hasDynamicKeyVBind(node) {\n  return node.props.some(function (p) {\n    return p.type === 7\n    /* DIRECTIVE */\n    && p.name === 'bind' && (!p.arg || // v-bind=\"obj\"\n    p.arg.type !== 4\n    /* SIMPLE_EXPRESSION */\n    || // v-bind:[_ctx.foo]\n    !p.arg.isStatic);\n  } // v-bind:[foo]\n  );\n}\n\nfunction isText(node) {\n  return node.type === 5\n  /* INTERPOLATION */\n  || node.type === 2\n  /* TEXT */\n  ;\n}\n\nfunction isVSlot(p) {\n  return p.type === 7\n  /* DIRECTIVE */\n  && p.name === 'slot';\n}\n\nfunction isTemplateNode(node) {\n  return node.type === 1\n  /* ELEMENT */\n  && node.tagType === 3\n  /* TEMPLATE */\n  ;\n}\n\nfunction isSlotOutlet(node) {\n  return node.type === 1\n  /* ELEMENT */\n  && node.tagType === 2\n  /* SLOT */\n  ;\n}\n\nfunction getVNodeHelper(ssr, isComponent) {\n  return ssr || isComponent ? CREATE_VNODE : CREATE_ELEMENT_VNODE;\n}\n\nfunction getVNodeBlockHelper(ssr, isComponent) {\n  return ssr || isComponent ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;\n}\n\nvar propsHelperSet = new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);\n\nfunction getUnnormalizedProps(props) {\n  var callPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (props && !isString(props) && props.type === 14\n  /* JS_CALL_EXPRESSION */\n  ) {\n    var callee = props.callee;\n\n    if (!isString(callee) && propsHelperSet.has(callee)) {\n      return getUnnormalizedProps(props.arguments[0], callPath.concat(props));\n    }\n  }\n\n  return [props, callPath];\n}\n\nfunction injectProp(node, prop, context) {\n  var propsWithInjection;\n  var originalProps = node.type === 13\n  /* VNODE_CALL */\n  ? node.props : node.arguments[2];\n  /**\r\n   * 1. mergeProps(...)\r\n   * 2. toHandlers(...)\r\n   * 3. normalizeProps(...)\r\n   * 4. normalizeProps(guardReactiveProps(...))\r\n   *\r\n   * we need to get the real props before normalization\r\n   */\n\n  var props = originalProps;\n  var callPath = [];\n  var parentCall;\n\n  if (props && !isString(props) && props.type === 14\n  /* JS_CALL_EXPRESSION */\n  ) {\n    var ret = getUnnormalizedProps(props);\n    props = ret[0];\n    callPath = ret[1];\n    parentCall = callPath[callPath.length - 1];\n  }\n\n  if (props == null || isString(props)) {\n    propsWithInjection = createObjectExpression([prop]);\n  } else if (props.type === 14\n  /* JS_CALL_EXPRESSION */\n  ) {\n    // merged props... add ours\n    // only inject key to object literal if it's the first argument so that\n    // if doesn't override user provided keys\n    var first = props.arguments[0];\n\n    if (!isString(first) && first.type === 15\n    /* JS_OBJECT_EXPRESSION */\n    ) {\n      first.properties.unshift(prop);\n    } else {\n      if (props.callee === TO_HANDLERS) {\n        // #2366\n        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [createObjectExpression([prop]), props]);\n      } else {\n        props.arguments.unshift(createObjectExpression([prop]));\n      }\n    }\n\n    !propsWithInjection && (propsWithInjection = props);\n  } else if (props.type === 15\n  /* JS_OBJECT_EXPRESSION */\n  ) {\n    var alreadyExists = false; // check existing key to avoid overriding user provided keys\n\n    if (prop.key.type === 4\n    /* SIMPLE_EXPRESSION */\n    ) {\n      var propKeyName = prop.key.content;\n      alreadyExists = props.properties.some(function (p) {\n        return p.key.type === 4\n        /* SIMPLE_EXPRESSION */\n        && p.key.content === propKeyName;\n      });\n    }\n\n    if (!alreadyExists) {\n      props.properties.unshift(prop);\n    }\n\n    propsWithInjection = props;\n  } else {\n    // single v-bind with expression, return a merged replacement\n    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [createObjectExpression([prop]), props]); // in the case of nested helper call, e.g. `normalizeProps(guardReactiveProps(props))`,\n    // it will be rewritten as `normalizeProps(mergeProps({ key: 0 }, props))`,\n    // the `guardReactiveProps` will no longer be needed\n\n    if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {\n      parentCall = callPath[callPath.length - 2];\n    }\n  }\n\n  if (node.type === 13\n  /* VNODE_CALL */\n  ) {\n    if (parentCall) {\n      parentCall.arguments[0] = propsWithInjection;\n    } else {\n      node.props = propsWithInjection;\n    }\n  } else {\n    if (parentCall) {\n      parentCall.arguments[0] = propsWithInjection;\n    } else {\n      node.arguments[2] = propsWithInjection;\n    }\n  }\n}\n\nfunction toValidAssetId(name, type) {\n  // see issue#4422, we need adding identifier on validAssetId if variable `name` has specific character\n  return \"_\".concat(type, \"_\").concat(name.replace(/[^\\w]/g, function (searchValue, replaceValue) {\n    return searchValue === '-' ? '_' : name.charCodeAt(replaceValue).toString();\n  }));\n} // Check if a node contains expressions that reference current context scope ids\n\n\nfunction hasScopeRef(node, ids) {\n  if (!node || Object.keys(ids).length === 0) {\n    return false;\n  }\n\n  switch (node.type) {\n    case 1\n    /* ELEMENT */\n    :\n      for (var i = 0; i < node.props.length; i++) {\n        var p = node.props[i];\n\n        if (p.type === 7\n        /* DIRECTIVE */\n        && (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {\n          return true;\n        }\n      }\n\n      return node.children.some(function (c) {\n        return hasScopeRef(c, ids);\n      });\n\n    case 11\n    /* FOR */\n    :\n      if (hasScopeRef(node.source, ids)) {\n        return true;\n      }\n\n      return node.children.some(function (c) {\n        return hasScopeRef(c, ids);\n      });\n\n    case 9\n    /* IF */\n    :\n      return node.branches.some(function (b) {\n        return hasScopeRef(b, ids);\n      });\n\n    case 10\n    /* IF_BRANCH */\n    :\n      if (hasScopeRef(node.condition, ids)) {\n        return true;\n      }\n\n      return node.children.some(function (c) {\n        return hasScopeRef(c, ids);\n      });\n\n    case 4\n    /* SIMPLE_EXPRESSION */\n    :\n      return !node.isStatic && isSimpleIdentifier(node.content) && !!ids[node.content];\n\n    case 8\n    /* COMPOUND_EXPRESSION */\n    :\n      return node.children.some(function (c) {\n        return isObject(c) && hasScopeRef(c, ids);\n      });\n\n    case 5\n    /* INTERPOLATION */\n    :\n    case 12\n    /* TEXT_CALL */\n    :\n      return hasScopeRef(node.content, ids);\n\n    case 2\n    /* TEXT */\n    :\n    case 3\n    /* COMMENT */\n    :\n      return false;\n\n    default:\n      if (process.env.NODE_ENV !== 'production') ;\n      return false;\n  }\n}\n\nfunction getMemoedVNodeCall(node) {\n  if (node.type === 14\n  /* JS_CALL_EXPRESSION */\n  && node.callee === WITH_MEMO) {\n    return node.arguments[1].returns;\n  } else {\n    return node;\n  }\n}\n\nfunction makeBlock(node, _ref) {\n  var helper = _ref.helper,\n      removeHelper = _ref.removeHelper,\n      inSSR = _ref.inSSR;\n\n  if (!node.isBlock) {\n    node.isBlock = true;\n    removeHelper(getVNodeHelper(inSSR, node.isComponent));\n    helper(OPEN_BLOCK);\n    helper(getVNodeBlockHelper(inSSR, node.isComponent));\n  }\n}\n\nvar deprecationData = (_deprecationData = {}, _defineProperty(_deprecationData, \"COMPILER_IS_ON_ELEMENT\"\n/* COMPILER_IS_ON_ELEMENT */\n, {\n  message: \"Platform-native elements with \\\"is\\\" prop will no longer be \" + \"treated as components in Vue 3 unless the \\\"is\\\" value is explicitly \" + \"prefixed with \\\"vue:\\\".\",\n  link: \"https://v3.vuejs.org/guide/migration/custom-elements-interop.html\"\n}), _defineProperty(_deprecationData, \"COMPILER_V_BIND_SYNC\"\n/* COMPILER_V_BIND_SYNC */\n, {\n  message: function message(key) {\n    return \".sync modifier for v-bind has been removed. Use v-model with \" + \"argument instead. `v-bind:\".concat(key, \".sync` should be changed to \") + \"`v-model:\".concat(key, \"`.\");\n  },\n  link: \"https://v3.vuejs.org/guide/migration/v-model.html\"\n}), _defineProperty(_deprecationData, \"COMPILER_V_BIND_PROP\"\n/* COMPILER_V_BIND_PROP */\n, {\n  message: \".prop modifier for v-bind has been removed and no longer necessary. \" + \"Vue 3 will automatically set a binding as DOM property when appropriate.\"\n}), _defineProperty(_deprecationData, \"COMPILER_V_BIND_OBJECT_ORDER\"\n/* COMPILER_V_BIND_OBJECT_ORDER */\n, {\n  message: \"v-bind=\\\"obj\\\" usage is now order sensitive and behaves like JavaScript \" + \"object spread: it will now overwrite an existing non-mergeable attribute \" + \"that appears before v-bind in the case of conflict. \" + \"To retain 2.x behavior, move v-bind to make it the first attribute. \" + \"You can also suppress this warning if the usage is intended.\",\n  link: \"https://v3.vuejs.org/guide/migration/v-bind.html\"\n}), _defineProperty(_deprecationData, \"COMPILER_V_ON_NATIVE\"\n/* COMPILER_V_ON_NATIVE */\n, {\n  message: \".native modifier for v-on has been removed as is no longer necessary.\",\n  link: \"https://v3.vuejs.org/guide/migration/v-on-native-modifier-removed.html\"\n}), _defineProperty(_deprecationData, \"COMPILER_V_IF_V_FOR_PRECEDENCE\"\n/* COMPILER_V_IF_V_FOR_PRECEDENCE */\n, {\n  message: \"v-if / v-for precedence when used on the same element has changed \" + \"in Vue 3: v-if now takes higher precedence and will no longer have \" + \"access to v-for scope variables. It is best to avoid the ambiguity \" + \"with <template> tags or use a computed property that filters v-for \" + \"data source.\",\n  link: \"https://v3.vuejs.org/guide/migration/v-if-v-for.html\"\n}), _defineProperty(_deprecationData, \"COMPILER_V_FOR_REF\"\n/* COMPILER_V_FOR_REF */\n, {\n  message: \"Ref usage on v-for no longer creates array ref values in Vue 3. \" + \"Consider using function refs or refactor to avoid ref usage altogether.\",\n  link: \"https://v3.vuejs.org/guide/migration/array-refs.html\"\n}), _defineProperty(_deprecationData, \"COMPILER_NATIVE_TEMPLATE\"\n/* COMPILER_NATIVE_TEMPLATE */\n, {\n  message: \"<template> with no special directives will render as a native template \" + \"element instead of its inner content in Vue 3.\"\n}), _defineProperty(_deprecationData, \"COMPILER_INLINE_TEMPLATE\"\n/* COMPILER_INLINE_TEMPLATE */\n, {\n  message: \"\\\"inline-template\\\" has been removed in Vue 3.\",\n  link: \"https://v3.vuejs.org/guide/migration/inline-template-attribute.html\"\n}), _defineProperty(_deprecationData, \"COMPILER_FILTER\"\n/* COMPILER_FILTERS */\n, {\n  message: \"filters have been removed in Vue 3. \" + \"The \\\"|\\\" symbol will be treated as native JavaScript bitwise OR operator. \" + \"Use method calls or computed properties instead.\",\n  link: \"https://v3.vuejs.org/guide/migration/filters.html\"\n}), _deprecationData);\n\nfunction getCompatValue(key, context) {\n  var config = context.options ? context.options.compatConfig : context.compatConfig;\n  var value = config && config[key];\n\n  if (key === 'MODE') {\n    return value || 3; // compiler defaults to v3 behavior\n  } else {\n    return value;\n  }\n}\n\nfunction isCompatEnabled(key, context) {\n  var mode = getCompatValue('MODE', context);\n  var value = getCompatValue(key, context); // in v3 mode, only enable if explicitly set to true\n  // otherwise enable for any non-false value\n\n  return mode === 3 ? value === true : value !== false;\n}\n\nfunction checkCompatEnabled(key, context, loc) {\n  var enabled = isCompatEnabled(key, context);\n\n  if (process.env.NODE_ENV !== 'production' && enabled) {\n    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      args[_key - 3] = arguments[_key];\n    }\n\n    warnDeprecation.apply(void 0, [key, context, loc].concat(args));\n  }\n\n  return enabled;\n}\n\nfunction warnDeprecation(key, context, loc) {\n  var val = getCompatValue(key, context);\n\n  if (val === 'suppress-warning') {\n    return;\n  }\n\n  var _deprecationData$key = deprecationData[key],\n      message = _deprecationData$key.message,\n      link = _deprecationData$key.link;\n\n  for (var _len2 = arguments.length, args = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n    args[_key2 - 3] = arguments[_key2];\n  }\n\n  var msg = \"(deprecation \".concat(key, \") \").concat(typeof message === 'function' ? message.apply(void 0, args) : message).concat(link ? \"\\n  Details: \".concat(link) : \"\");\n  var err = new SyntaxError(msg);\n  err.code = key;\n  if (loc) err.loc = loc;\n  context.onWarn(err);\n} // The default decoder only provides escapes for characters reserved as part of\n// the template syntax, and is only used if the custom renderer did not provide\n// a platform-specific decoder.\n\n\nvar decodeRE = /&(gt|lt|amp|apos|quot);/g;\nvar decodeMap = {\n  gt: '>',\n  lt: '<',\n  amp: '&',\n  apos: \"'\",\n  quot: '\"'\n};\nvar defaultParserOptions = {\n  delimiters: [\"{{\", \"}}\"],\n  getNamespace: function getNamespace() {\n    return 0;\n  }\n  /* HTML */\n  ,\n  getTextMode: function getTextMode() {\n    return 0;\n  }\n  /* DATA */\n  ,\n  isVoidTag: NO,\n  isPreTag: NO,\n  isCustomElement: NO,\n  decodeEntities: function decodeEntities(rawText) {\n    return rawText.replace(decodeRE, function (_, p1) {\n      return decodeMap[p1];\n    });\n  },\n  onError: defaultOnError,\n  onWarn: defaultOnWarn,\n  comments: process.env.NODE_ENV !== 'production'\n};\n\nfunction baseParse(content) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var context = createParserContext(content, options);\n  var start = getCursor(context);\n  return createRoot(parseChildren(context, 0\n  /* DATA */\n  , []), getSelection(context, start));\n}\n\nfunction createParserContext(content, rawOptions) {\n  var options = extend({}, defaultParserOptions);\n  var key;\n\n  for (key in rawOptions) {\n    // @ts-ignore\n    options[key] = rawOptions[key] === undefined ? defaultParserOptions[key] : rawOptions[key];\n  }\n\n  return {\n    options: options,\n    column: 1,\n    line: 1,\n    offset: 0,\n    originalSource: content,\n    source: content,\n    inPre: false,\n    inVPre: false,\n    onWarn: options.onWarn\n  };\n}\n\nfunction parseChildren(context, mode, ancestors) {\n  var parent = last(ancestors);\n  var ns = parent ? parent.ns : 0\n  /* HTML */\n  ;\n  var nodes = [];\n\n  while (!isEnd(context, mode, ancestors)) {\n    var s = context.source;\n    var node = undefined;\n\n    if (mode === 0\n    /* DATA */\n    || mode === 1\n    /* RCDATA */\n    ) {\n      if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {\n        // '{{'\n        node = parseInterpolation(context, mode);\n      } else if (mode === 0\n      /* DATA */\n      && s[0] === '<') {\n        // https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state\n        if (s.length === 1) {\n          emitError(context, 5\n          /* EOF_BEFORE_TAG_NAME */\n          , 1);\n        } else if (s[1] === '!') {\n          // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state\n          if (startsWith(s, '<!--')) {\n            node = parseComment(context);\n          } else if (startsWith(s, '<!DOCTYPE')) {\n            // Ignore DOCTYPE by a limitation.\n            node = parseBogusComment(context);\n          } else if (startsWith(s, '<![CDATA[')) {\n            if (ns !== 0\n            /* HTML */\n            ) {\n              node = parseCDATA(context, ancestors);\n            } else {\n              emitError(context, 1\n              /* CDATA_IN_HTML_CONTENT */\n              );\n              node = parseBogusComment(context);\n            }\n          } else {\n            emitError(context, 11\n            /* INCORRECTLY_OPENED_COMMENT */\n            );\n            node = parseBogusComment(context);\n          }\n        } else if (s[1] === '/') {\n          // https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state\n          if (s.length === 2) {\n            emitError(context, 5\n            /* EOF_BEFORE_TAG_NAME */\n            , 2);\n          } else if (s[2] === '>') {\n            emitError(context, 14\n            /* MISSING_END_TAG_NAME */\n            , 2);\n            advanceBy(context, 3);\n            continue;\n          } else if (/[a-z]/i.test(s[2])) {\n            emitError(context, 23\n            /* X_INVALID_END_TAG */\n            );\n            parseTag(context, 1\n            /* End */\n            , parent);\n            continue;\n          } else {\n            emitError(context, 12\n            /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */\n            , 2);\n            node = parseBogusComment(context);\n          }\n        } else if (/[a-z]/i.test(s[1])) {\n          node = parseElement(context, ancestors); // 2.x <template> with no directive compat\n\n          if (isCompatEnabled(\"COMPILER_NATIVE_TEMPLATE\"\n          /* COMPILER_NATIVE_TEMPLATE */\n          , context) && node && node.tag === 'template' && !node.props.some(function (p) {\n            return p.type === 7\n            /* DIRECTIVE */\n            && isSpecialTemplateDirective(p.name);\n          })) {\n            process.env.NODE_ENV !== 'production' && warnDeprecation(\"COMPILER_NATIVE_TEMPLATE\"\n            /* COMPILER_NATIVE_TEMPLATE */\n            , context, node.loc);\n            node = node.children;\n          }\n        } else if (s[1] === '?') {\n          emitError(context, 21\n          /* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */\n          , 1);\n          node = parseBogusComment(context);\n        } else {\n          emitError(context, 12\n          /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */\n          , 1);\n        }\n      }\n    }\n\n    if (!node) {\n      node = parseText(context, mode);\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        pushNode(nodes, node[i]);\n      }\n    } else {\n      pushNode(nodes, node);\n    }\n  } // Whitespace handling strategy like v2\n\n\n  var removedWhitespace = false;\n\n  if (mode !== 2\n  /* RAWTEXT */\n  && mode !== 1\n  /* RCDATA */\n  ) {\n    var shouldCondense = context.options.whitespace !== 'preserve';\n\n    for (var _i = 0; _i < nodes.length; _i++) {\n      var _node2 = nodes[_i];\n\n      if (!context.inPre && _node2.type === 2\n      /* TEXT */\n      ) {\n        if (!/[^\\t\\r\\n\\f ]/.test(_node2.content)) {\n          var prev = nodes[_i - 1];\n          var next = nodes[_i + 1]; // Remove if:\n          // - the whitespace is the first or last node, or:\n          // - (condense mode) the whitespace is adjacent to a comment, or:\n          // - (condense mode) the whitespace is between two elements AND contains newline\n\n          if (!prev || !next || shouldCondense && (prev.type === 3\n          /* COMMENT */\n          || next.type === 3\n          /* COMMENT */\n          || prev.type === 1\n          /* ELEMENT */\n          && next.type === 1\n          /* ELEMENT */\n          && /[\\r\\n]/.test(_node2.content))) {\n            removedWhitespace = true;\n            nodes[_i] = null;\n          } else {\n            // Otherwise, the whitespace is condensed into a single space\n            _node2.content = ' ';\n          }\n        } else if (shouldCondense) {\n          // in condense mode, consecutive whitespaces in text are condensed\n          // down to a single space.\n          _node2.content = _node2.content.replace(/[\\t\\r\\n\\f ]+/g, ' ');\n        }\n      } // Remove comment nodes if desired by configuration.\n      else if (_node2.type === 3\n      /* COMMENT */\n      && !context.options.comments) {\n        removedWhitespace = true;\n        nodes[_i] = null;\n      }\n    }\n\n    if (context.inPre && parent && context.options.isPreTag(parent.tag)) {\n      // remove leading newline per html spec\n      // https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element\n      var first = nodes[0];\n\n      if (first && first.type === 2\n      /* TEXT */\n      ) {\n        first.content = first.content.replace(/^\\r?\\n/, '');\n      }\n    }\n  }\n\n  return removedWhitespace ? nodes.filter(Boolean) : nodes;\n}\n\nfunction pushNode(nodes, node) {\n  if (node.type === 2\n  /* TEXT */\n  ) {\n    var prev = last(nodes); // Merge if both this and the previous node are text and those are\n    // consecutive. This happens for cases like \"a < b\".\n\n    if (prev && prev.type === 2\n    /* TEXT */\n    && prev.loc.end.offset === node.loc.start.offset) {\n      prev.content += node.content;\n      prev.loc.end = node.loc.end;\n      prev.loc.source += node.loc.source;\n      return;\n    }\n  }\n\n  nodes.push(node);\n}\n\nfunction parseCDATA(context, ancestors) {\n  advanceBy(context, 9);\n  var nodes = parseChildren(context, 3\n  /* CDATA */\n  , ancestors);\n\n  if (context.source.length === 0) {\n    emitError(context, 6\n    /* EOF_IN_CDATA */\n    );\n  } else {\n    advanceBy(context, 3);\n  }\n\n  return nodes;\n}\n\nfunction parseComment(context) {\n  var start = getCursor(context);\n  var content; // Regular comment.\n\n  var match = /--(\\!)?>/.exec(context.source);\n\n  if (!match) {\n    content = context.source.slice(4);\n    advanceBy(context, context.source.length);\n    emitError(context, 7\n    /* EOF_IN_COMMENT */\n    );\n  } else {\n    if (match.index <= 3) {\n      emitError(context, 0\n      /* ABRUPT_CLOSING_OF_EMPTY_COMMENT */\n      );\n    }\n\n    if (match[1]) {\n      emitError(context, 10\n      /* INCORRECTLY_CLOSED_COMMENT */\n      );\n    }\n\n    content = context.source.slice(4, match.index); // Advancing with reporting nested comments.\n\n    var s = context.source.slice(0, match.index);\n    var prevIndex = 1,\n        nestedIndex = 0;\n\n    while ((nestedIndex = s.indexOf('<!--', prevIndex)) !== -1) {\n      advanceBy(context, nestedIndex - prevIndex + 1);\n\n      if (nestedIndex + 4 < s.length) {\n        emitError(context, 16\n        /* NESTED_COMMENT */\n        );\n      }\n\n      prevIndex = nestedIndex + 1;\n    }\n\n    advanceBy(context, match.index + match[0].length - prevIndex + 1);\n  }\n\n  return {\n    type: 3\n    /* COMMENT */\n    ,\n    content: content,\n    loc: getSelection(context, start)\n  };\n}\n\nfunction parseBogusComment(context) {\n  var start = getCursor(context);\n  var contentStart = context.source[1] === '?' ? 1 : 2;\n  var content;\n  var closeIndex = context.source.indexOf('>');\n\n  if (closeIndex === -1) {\n    content = context.source.slice(contentStart);\n    advanceBy(context, context.source.length);\n  } else {\n    content = context.source.slice(contentStart, closeIndex);\n    advanceBy(context, closeIndex + 1);\n  }\n\n  return {\n    type: 3\n    /* COMMENT */\n    ,\n    content: content,\n    loc: getSelection(context, start)\n  };\n}\n\nfunction parseElement(context, ancestors) {\n  // Start tag.\n  var wasInPre = context.inPre;\n  var wasInVPre = context.inVPre;\n  var parent = last(ancestors);\n  var element = parseTag(context, 0\n  /* Start */\n  , parent);\n  var isPreBoundary = context.inPre && !wasInPre;\n  var isVPreBoundary = context.inVPre && !wasInVPre;\n\n  if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {\n    // #4030 self-closing <pre> tag\n    if (isPreBoundary) {\n      context.inPre = false;\n    }\n\n    if (isVPreBoundary) {\n      context.inVPre = false;\n    }\n\n    return element;\n  } // Children.\n\n\n  ancestors.push(element);\n  var mode = context.options.getTextMode(element, parent);\n  var children = parseChildren(context, mode, ancestors);\n  ancestors.pop(); // 2.x inline-template compat\n\n  {\n    var inlineTemplateProp = element.props.find(function (p) {\n      return p.type === 6\n      /* ATTRIBUTE */\n      && p.name === 'inline-template';\n    });\n\n    if (inlineTemplateProp && checkCompatEnabled(\"COMPILER_INLINE_TEMPLATE\"\n    /* COMPILER_INLINE_TEMPLATE */\n    , context, inlineTemplateProp.loc)) {\n      var loc = getSelection(context, element.loc.end);\n      inlineTemplateProp.value = {\n        type: 2\n        /* TEXT */\n        ,\n        content: loc.source,\n        loc: loc\n      };\n    }\n  }\n  element.children = children; // End tag.\n\n  if (startsWithEndTagOpen(context.source, element.tag)) {\n    parseTag(context, 1\n    /* End */\n    , parent);\n  } else {\n    emitError(context, 24\n    /* X_MISSING_END_TAG */\n    , 0, element.loc.start);\n\n    if (context.source.length === 0 && element.tag.toLowerCase() === 'script') {\n      var first = children[0];\n\n      if (first && startsWith(first.loc.source, '<!--')) {\n        emitError(context, 8\n        /* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */\n        );\n      }\n    }\n  }\n\n  element.loc = getSelection(context, element.loc.start);\n\n  if (isPreBoundary) {\n    context.inPre = false;\n  }\n\n  if (isVPreBoundary) {\n    context.inVPre = false;\n  }\n\n  return element;\n}\n\nvar isSpecialTemplateDirective = /*#__PURE__*/makeMap(\"if,else,else-if,for,slot\");\n\nfunction parseTag(context, type, parent) {\n  // Tag open.\n  var start = getCursor(context);\n  var match = /^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(context.source);\n  var tag = match[1];\n  var ns = context.options.getNamespace(tag, parent);\n  advanceBy(context, match[0].length);\n  advanceSpaces(context); // save current state in case we need to re-parse attributes with v-pre\n\n  var cursor = getCursor(context);\n  var currentSource = context.source; // check <pre> tag\n\n  if (context.options.isPreTag(tag)) {\n    context.inPre = true;\n  } // Attributes.\n\n\n  var props = parseAttributes(context, type); // check v-pre\n\n  if (type === 0\n  /* Start */\n  && !context.inVPre && props.some(function (p) {\n    return p.type === 7\n    /* DIRECTIVE */\n    && p.name === 'pre';\n  })) {\n    context.inVPre = true; // reset context\n\n    extend(context, cursor);\n    context.source = currentSource; // re-parse attrs and filter out v-pre itself\n\n    props = parseAttributes(context, type).filter(function (p) {\n      return p.name !== 'v-pre';\n    });\n  } // Tag close.\n\n\n  var isSelfClosing = false;\n\n  if (context.source.length === 0) {\n    emitError(context, 9\n    /* EOF_IN_TAG */\n    );\n  } else {\n    isSelfClosing = startsWith(context.source, '/>');\n\n    if (type === 1\n    /* End */\n    && isSelfClosing) {\n      emitError(context, 4\n      /* END_TAG_WITH_TRAILING_SOLIDUS */\n      );\n    }\n\n    advanceBy(context, isSelfClosing ? 2 : 1);\n  }\n\n  if (type === 1\n  /* End */\n  ) {\n    return;\n  } // 2.x deprecation checks\n\n\n  if (process.env.NODE_ENV !== 'production' && isCompatEnabled(\"COMPILER_V_IF_V_FOR_PRECEDENCE\"\n  /* COMPILER_V_IF_V_FOR_PRECEDENCE */\n  , context)) {\n    var hasIf = false;\n    var hasFor = false;\n\n    for (var i = 0; i < props.length; i++) {\n      var p = props[i];\n\n      if (p.type === 7\n      /* DIRECTIVE */\n      ) {\n        if (p.name === 'if') {\n          hasIf = true;\n        } else if (p.name === 'for') {\n          hasFor = true;\n        }\n      }\n\n      if (hasIf && hasFor) {\n        warnDeprecation(\"COMPILER_V_IF_V_FOR_PRECEDENCE\"\n        /* COMPILER_V_IF_V_FOR_PRECEDENCE */\n        , context, getSelection(context, start));\n        break;\n      }\n    }\n  }\n\n  var tagType = 0\n  /* ELEMENT */\n  ;\n\n  if (!context.inVPre) {\n    if (tag === 'slot') {\n      tagType = 2\n      /* SLOT */\n      ;\n    } else if (tag === 'template') {\n      if (props.some(function (p) {\n        return p.type === 7\n        /* DIRECTIVE */\n        && isSpecialTemplateDirective(p.name);\n      })) {\n        tagType = 3\n        /* TEMPLATE */\n        ;\n      }\n    } else if (isComponent(tag, props, context)) {\n      tagType = 1\n      /* COMPONENT */\n      ;\n    }\n  }\n\n  return {\n    type: 1\n    /* ELEMENT */\n    ,\n    ns: ns,\n    tag: tag,\n    tagType: tagType,\n    props: props,\n    isSelfClosing: isSelfClosing,\n    children: [],\n    loc: getSelection(context, start),\n    codegenNode: undefined // to be created during transform phase\n\n  };\n}\n\nfunction isComponent(tag, props, context) {\n  var options = context.options;\n\n  if (options.isCustomElement(tag)) {\n    return false;\n  }\n\n  if (tag === 'component' || /^[A-Z]/.test(tag) || isCoreComponent(tag) || options.isBuiltInComponent && options.isBuiltInComponent(tag) || options.isNativeTag && !options.isNativeTag(tag)) {\n    return true;\n  } // at this point the tag should be a native tag, but check for potential \"is\"\n  // casting\n\n\n  for (var i = 0; i < props.length; i++) {\n    var p = props[i];\n\n    if (p.type === 6\n    /* ATTRIBUTE */\n    ) {\n      if (p.name === 'is' && p.value) {\n        if (p.value.content.startsWith('vue:')) {\n          return true;\n        } else if (checkCompatEnabled(\"COMPILER_IS_ON_ELEMENT\"\n        /* COMPILER_IS_ON_ELEMENT */\n        , context, p.loc)) {\n          return true;\n        }\n      }\n    } else {\n      // directive\n      // v-is (TODO Deprecate)\n      if (p.name === 'is') {\n        return true;\n      } else if ( // :is on plain element - only treat as component in compat mode\n      p.name === 'bind' && isBindKey(p.arg, 'is') && true && checkCompatEnabled(\"COMPILER_IS_ON_ELEMENT\"\n      /* COMPILER_IS_ON_ELEMENT */\n      , context, p.loc)) {\n        return true;\n      }\n    }\n  }\n}\n\nfunction parseAttributes(context, type) {\n  var props = [];\n  var attributeNames = new Set();\n\n  while (context.source.length > 0 && !startsWith(context.source, '>') && !startsWith(context.source, '/>')) {\n    if (startsWith(context.source, '/')) {\n      emitError(context, 22\n      /* UNEXPECTED_SOLIDUS_IN_TAG */\n      );\n      advanceBy(context, 1);\n      advanceSpaces(context);\n      continue;\n    }\n\n    if (type === 1\n    /* End */\n    ) {\n      emitError(context, 3\n      /* END_TAG_WITH_ATTRIBUTES */\n      );\n    }\n\n    var attr = parseAttribute(context, attributeNames); // Trim whitespace between class\n    // https://github.com/vuejs/vue-next/issues/4251\n\n    if (attr.type === 6\n    /* ATTRIBUTE */\n    && attr.value && attr.name === 'class') {\n      attr.value.content = attr.value.content.replace(/\\s+/g, ' ').trim();\n    }\n\n    if (type === 0\n    /* Start */\n    ) {\n      props.push(attr);\n    }\n\n    if (/^[^\\t\\r\\n\\f />]/.test(context.source)) {\n      emitError(context, 15\n      /* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */\n      );\n    }\n\n    advanceSpaces(context);\n  }\n\n  return props;\n}\n\nfunction parseAttribute(context, nameSet) {\n  // Name.\n  var start = getCursor(context);\n  var match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source);\n  var name = match[0];\n\n  if (nameSet.has(name)) {\n    emitError(context, 2\n    /* DUPLICATE_ATTRIBUTE */\n    );\n  }\n\n  nameSet.add(name);\n\n  if (name[0] === '=') {\n    emitError(context, 19\n    /* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */\n    );\n  }\n\n  {\n    var pattern = /[\"'<]/g;\n    var m;\n\n    while (m = pattern.exec(name)) {\n      emitError(context, 17\n      /* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */\n      , m.index);\n    }\n  }\n  advanceBy(context, name.length); // Value\n\n  var value = undefined;\n\n  if (/^[\\t\\r\\n\\f ]*=/.test(context.source)) {\n    advanceSpaces(context);\n    advanceBy(context, 1);\n    advanceSpaces(context);\n    value = parseAttributeValue(context);\n\n    if (!value) {\n      emitError(context, 13\n      /* MISSING_ATTRIBUTE_VALUE */\n      );\n    }\n  }\n\n  var loc = getSelection(context, start);\n\n  if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\\.|@|#)/.test(name)) {\n    var _match = /(?:^v-([a-z0-9-]+))?(?:(?::|^\\.|^@|^#)(\\[[^\\]]+\\]|[^\\.]+))?(.+)?$/i.exec(name);\n\n    var isPropShorthand = startsWith(name, '.');\n    var dirName = _match[1] || (isPropShorthand || startsWith(name, ':') ? 'bind' : startsWith(name, '@') ? 'on' : 'slot');\n    var arg;\n\n    if (_match[2]) {\n      var isSlot = dirName === 'slot';\n      var startOffset = name.lastIndexOf(_match[2]);\n\n      var _loc = getSelection(context, getNewPosition(context, start, startOffset), getNewPosition(context, start, startOffset + _match[2].length + (isSlot && _match[3] || '').length));\n\n      var content = _match[2];\n      var isStatic = true;\n\n      if (content.startsWith('[')) {\n        isStatic = false;\n\n        if (!content.endsWith(']')) {\n          emitError(context, 27\n          /* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */\n          );\n          content = content.slice(1);\n        } else {\n          content = content.slice(1, content.length - 1);\n        }\n      } else if (isSlot) {\n        // #1241 special case for v-slot: vuetify relies extensively on slot\n        // names containing dots. v-slot doesn't have any modifiers and Vue 2.x\n        // supports such usage so we are keeping it consistent with 2.x.\n        content += _match[3] || '';\n      }\n\n      arg = {\n        type: 4\n        /* SIMPLE_EXPRESSION */\n        ,\n        content: content,\n        isStatic: isStatic,\n        constType: isStatic ? 3\n        /* CAN_STRINGIFY */\n        : 0\n        /* NOT_CONSTANT */\n        ,\n        loc: _loc\n      };\n    }\n\n    if (value && value.isQuoted) {\n      var valueLoc = value.loc;\n      valueLoc.start.offset++;\n      valueLoc.start.column++;\n      valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);\n      valueLoc.source = valueLoc.source.slice(1, -1);\n    }\n\n    var modifiers = _match[3] ? _match[3].slice(1).split('.') : [];\n    if (isPropShorthand) modifiers.push('prop'); // 2.x compat v-bind:foo.sync -> v-model:foo\n\n    if (dirName === 'bind' && arg) {\n      if (modifiers.includes('sync') && checkCompatEnabled(\"COMPILER_V_BIND_SYNC\"\n      /* COMPILER_V_BIND_SYNC */\n      , context, loc, arg.loc.source)) {\n        dirName = 'model';\n        modifiers.splice(modifiers.indexOf('sync'), 1);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && modifiers.includes('prop')) {\n        checkCompatEnabled(\"COMPILER_V_BIND_PROP\"\n        /* COMPILER_V_BIND_PROP */\n        , context, loc);\n      }\n    }\n\n    return {\n      type: 7\n      /* DIRECTIVE */\n      ,\n      name: dirName,\n      exp: value && {\n        type: 4\n        /* SIMPLE_EXPRESSION */\n        ,\n        content: value.content,\n        isStatic: false,\n        // Treat as non-constant by default. This can be potentially set to\n        // other values by `transformExpression` to make it eligible for hoisting.\n        constType: 0\n        /* NOT_CONSTANT */\n        ,\n        loc: value.loc\n      },\n      arg: arg,\n      modifiers: modifiers,\n      loc: loc\n    };\n  } // missing directive name or illegal directive name\n\n\n  if (!context.inVPre && startsWith(name, 'v-')) {\n    emitError(context, 26\n    /* X_MISSING_DIRECTIVE_NAME */\n    );\n  }\n\n  return {\n    type: 6\n    /* ATTRIBUTE */\n    ,\n    name: name,\n    value: value && {\n      type: 2\n      /* TEXT */\n      ,\n      content: value.content,\n      loc: value.loc\n    },\n    loc: loc\n  };\n}\n\nfunction parseAttributeValue(context) {\n  var start = getCursor(context);\n  var content;\n  var quote = context.source[0];\n  var isQuoted = quote === \"\\\"\" || quote === \"'\";\n\n  if (isQuoted) {\n    // Quoted value.\n    advanceBy(context, 1);\n    var endIndex = context.source.indexOf(quote);\n\n    if (endIndex === -1) {\n      content = parseTextData(context, context.source.length, 4\n      /* ATTRIBUTE_VALUE */\n      );\n    } else {\n      content = parseTextData(context, endIndex, 4\n      /* ATTRIBUTE_VALUE */\n      );\n      advanceBy(context, 1);\n    }\n  } else {\n    // Unquoted\n    var match = /^[^\\t\\r\\n\\f >]+/.exec(context.source);\n\n    if (!match) {\n      return undefined;\n    }\n\n    var unexpectedChars = /[\"'<=`]/g;\n    var m;\n\n    while (m = unexpectedChars.exec(match[0])) {\n      emitError(context, 18\n      /* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */\n      , m.index);\n    }\n\n    content = parseTextData(context, match[0].length, 4\n    /* ATTRIBUTE_VALUE */\n    );\n  }\n\n  return {\n    content: content,\n    isQuoted: isQuoted,\n    loc: getSelection(context, start)\n  };\n}\n\nfunction parseInterpolation(context, mode) {\n  var _context$options$deli = _slicedToArray(context.options.delimiters, 2),\n      open = _context$options$deli[0],\n      close = _context$options$deli[1];\n\n  var closeIndex = context.source.indexOf(close, open.length);\n\n  if (closeIndex === -1) {\n    emitError(context, 25\n    /* X_MISSING_INTERPOLATION_END */\n    );\n    return undefined;\n  }\n\n  var start = getCursor(context);\n  advanceBy(context, open.length);\n  var innerStart = getCursor(context);\n  var innerEnd = getCursor(context);\n  var rawContentLength = closeIndex - open.length;\n  var rawContent = context.source.slice(0, rawContentLength);\n  var preTrimContent = parseTextData(context, rawContentLength, mode);\n  var content = preTrimContent.trim();\n  var startOffset = preTrimContent.indexOf(content);\n\n  if (startOffset > 0) {\n    advancePositionWithMutation(innerStart, rawContent, startOffset);\n  }\n\n  var endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);\n  advancePositionWithMutation(innerEnd, rawContent, endOffset);\n  advanceBy(context, close.length);\n  return {\n    type: 5\n    /* INTERPOLATION */\n    ,\n    content: {\n      type: 4\n      /* SIMPLE_EXPRESSION */\n      ,\n      isStatic: false,\n      // Set `isConstant` to false by default and will decide in transformExpression\n      constType: 0\n      /* NOT_CONSTANT */\n      ,\n      content: content,\n      loc: getSelection(context, innerStart, innerEnd)\n    },\n    loc: getSelection(context, start)\n  };\n}\n\nfunction parseText(context, mode) {\n  var endTokens = mode === 3\n  /* CDATA */\n  ? [']]>'] : ['<', context.options.delimiters[0]];\n  var endIndex = context.source.length;\n\n  for (var i = 0; i < endTokens.length; i++) {\n    var index = context.source.indexOf(endTokens[i], 1);\n\n    if (index !== -1 && endIndex > index) {\n      endIndex = index;\n    }\n  }\n\n  var start = getCursor(context);\n  var content = parseTextData(context, endIndex, mode);\n  return {\n    type: 2\n    /* TEXT */\n    ,\n    content: content,\n    loc: getSelection(context, start)\n  };\n}\n/**\r\n * Get text data with a given length from the current location.\r\n * This translates HTML entities in the text data.\r\n */\n\n\nfunction parseTextData(context, length, mode) {\n  var rawText = context.source.slice(0, length);\n  advanceBy(context, length);\n\n  if (mode === 2\n  /* RAWTEXT */\n  || mode === 3\n  /* CDATA */\n  || rawText.indexOf('&') === -1) {\n    return rawText;\n  } else {\n    // DATA or RCDATA containing \"&\"\". Entity decoding required.\n    return context.options.decodeEntities(rawText, mode === 4\n    /* ATTRIBUTE_VALUE */\n    );\n  }\n}\n\nfunction getCursor(context) {\n  var column = context.column,\n      line = context.line,\n      offset = context.offset;\n  return {\n    column: column,\n    line: line,\n    offset: offset\n  };\n}\n\nfunction getSelection(context, start, end) {\n  end = end || getCursor(context);\n  return {\n    start: start,\n    end: end,\n    source: context.originalSource.slice(start.offset, end.offset)\n  };\n}\n\nfunction last(xs) {\n  return xs[xs.length - 1];\n}\n\nfunction startsWith(source, searchString) {\n  return source.startsWith(searchString);\n}\n\nfunction advanceBy(context, numberOfCharacters) {\n  var source = context.source;\n  advancePositionWithMutation(context, source, numberOfCharacters);\n  context.source = source.slice(numberOfCharacters);\n}\n\nfunction advanceSpaces(context) {\n  var match = /^[\\t\\r\\n\\f ]+/.exec(context.source);\n\n  if (match) {\n    advanceBy(context, match[0].length);\n  }\n}\n\nfunction getNewPosition(context, start, numberOfCharacters) {\n  return advancePositionWithClone(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);\n}\n\nfunction emitError(context, code, offset) {\n  var loc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : getCursor(context);\n\n  if (offset) {\n    loc.offset += offset;\n    loc.column += offset;\n  }\n\n  context.options.onError(createCompilerError(code, {\n    start: loc,\n    end: loc,\n    source: ''\n  }));\n}\n\nfunction isEnd(context, mode, ancestors) {\n  var s = context.source;\n\n  switch (mode) {\n    case 0\n    /* DATA */\n    :\n      if (startsWith(s, '</')) {\n        // TODO: probably bad performance\n        for (var i = ancestors.length - 1; i >= 0; --i) {\n          if (startsWithEndTagOpen(s, ancestors[i].tag)) {\n            return true;\n          }\n        }\n      }\n\n      break;\n\n    case 1\n    /* RCDATA */\n    :\n    case 2\n    /* RAWTEXT */\n    :\n      {\n        var parent = last(ancestors);\n\n        if (parent && startsWithEndTagOpen(s, parent.tag)) {\n          return true;\n        }\n\n        break;\n      }\n\n    case 3\n    /* CDATA */\n    :\n      if (startsWith(s, ']]>')) {\n        return true;\n      }\n\n      break;\n  }\n\n  return !s;\n}\n\nfunction startsWithEndTagOpen(source, tag) {\n  return startsWith(source, '</') && source.slice(2, 2 + tag.length).toLowerCase() === tag.toLowerCase() && /[\\t\\r\\n\\f />]/.test(source[2 + tag.length] || '>');\n}\n\nfunction hoistStatic(root, context) {\n  walk(root, context, // Root node is unfortunately non-hoistable due to potential parent\n  // fallthrough attributes.\n  isSingleElementRoot(root, root.children[0]));\n}\n\nfunction isSingleElementRoot(root, child) {\n  var children = root.children;\n  return children.length === 1 && child.type === 1\n  /* ELEMENT */\n  && !isSlotOutlet(child);\n}\n\nfunction walk(node, context) {\n  var doNotHoistNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // Some transforms, e.g. transformAssetUrls from @vue/compiler-sfc, replaces\n  // static bindings with expressions. These expressions are guaranteed to be\n  // constant so they are still eligible for hoisting, but they are only\n  // available at runtime and therefore cannot be evaluated ahead of time.\n  // This is only a concern for pre-stringification (via transformHoist by\n  // @vue/compiler-dom), but doing it here allows us to perform only one full\n  // walk of the AST and allow `stringifyStatic` to stop walking as soon as its\n  // stringification threshold is met.\n  var canStringify = true;\n  var children = node.children;\n  var originalCount = children.length;\n  var hoistedCount = 0;\n\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i]; // only plain elements & text calls are eligible for hoisting.\n\n    if (child.type === 1\n    /* ELEMENT */\n    && child.tagType === 0\n    /* ELEMENT */\n    ) {\n      var constantType = doNotHoistNode ? 0\n      /* NOT_CONSTANT */\n      : getConstantType(child, context);\n\n      if (constantType > 0\n      /* NOT_CONSTANT */\n      ) {\n        if (constantType < 3\n        /* CAN_STRINGIFY */\n        ) {\n          canStringify = false;\n        }\n\n        if (constantType >= 2\n        /* CAN_HOIST */\n        ) {\n          child.codegenNode.patchFlag = -1\n          /* HOISTED */\n          + (process.env.NODE_ENV !== 'production' ? \" /* HOISTED */\" : \"\");\n          child.codegenNode = context.hoist(child.codegenNode);\n          hoistedCount++;\n          continue;\n        }\n      } else {\n        // node may contain dynamic children, but its props may be eligible for\n        // hoisting.\n        var codegenNode = child.codegenNode;\n\n        if (codegenNode.type === 13\n        /* VNODE_CALL */\n        ) {\n          var flag = getPatchFlag(codegenNode);\n\n          if ((!flag || flag === 512\n          /* NEED_PATCH */\n          || flag === 1\n          /* TEXT */\n          ) && getGeneratedPropsConstantType(child, context) >= 2\n          /* CAN_HOIST */\n          ) {\n            var props = getNodeProps(child);\n\n            if (props) {\n              codegenNode.props = context.hoist(props);\n            }\n          }\n\n          if (codegenNode.dynamicProps) {\n            codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);\n          }\n        }\n      }\n    } else if (child.type === 12\n    /* TEXT_CALL */\n    ) {\n      var contentType = getConstantType(child.content, context);\n\n      if (contentType > 0) {\n        if (contentType < 3\n        /* CAN_STRINGIFY */\n        ) {\n          canStringify = false;\n        }\n\n        if (contentType >= 2\n        /* CAN_HOIST */\n        ) {\n          child.codegenNode = context.hoist(child.codegenNode);\n          hoistedCount++;\n        }\n      }\n    } // walk further\n\n\n    if (child.type === 1\n    /* ELEMENT */\n    ) {\n      var _isComponent = child.tagType === 1\n      /* COMPONENT */\n      ;\n\n      if (_isComponent) {\n        context.scopes.vSlot++;\n      }\n\n      walk(child, context);\n\n      if (_isComponent) {\n        context.scopes.vSlot--;\n      }\n    } else if (child.type === 11\n    /* FOR */\n    ) {\n      // Do not hoist v-for single child because it has to be a block\n      walk(child, context, child.children.length === 1);\n    } else if (child.type === 9\n    /* IF */\n    ) {\n      for (var _i2 = 0; _i2 < child.branches.length; _i2++) {\n        // Do not hoist v-if single child because it has to be a block\n        walk(child.branches[_i2], context, child.branches[_i2].children.length === 1);\n      }\n    }\n  }\n\n  if (canStringify && hoistedCount && context.transformHoist) {\n    context.transformHoist(children, context, node);\n  } // all children were hoisted - the entire children array is hoistable.\n\n\n  if (hoistedCount && hoistedCount === originalCount && node.type === 1\n  /* ELEMENT */\n  && node.tagType === 0\n  /* ELEMENT */\n  && node.codegenNode && node.codegenNode.type === 13\n  /* VNODE_CALL */\n  && isArray(node.codegenNode.children)) {\n    node.codegenNode.children = context.hoist(createArrayExpression(node.codegenNode.children));\n  }\n}\n\nfunction getConstantType(node, context) {\n  var constantCache = context.constantCache;\n\n  switch (node.type) {\n    case 1\n    /* ELEMENT */\n    :\n      if (node.tagType !== 0\n      /* ELEMENT */\n      ) {\n        return 0\n        /* NOT_CONSTANT */\n        ;\n      }\n\n      var cached = constantCache.get(node);\n\n      if (cached !== undefined) {\n        return cached;\n      }\n\n      var codegenNode = node.codegenNode;\n\n      if (codegenNode.type !== 13\n      /* VNODE_CALL */\n      ) {\n        return 0\n        /* NOT_CONSTANT */\n        ;\n      }\n\n      var flag = getPatchFlag(codegenNode);\n\n      if (!flag) {\n        var _returnType = 3\n        /* CAN_STRINGIFY */\n        ; // Element itself has no patch flag. However we still need to check:\n        // 1. Even for a node with no patch flag, it is possible for it to contain\n        // non-hoistable expressions that refers to scope variables, e.g. compiler\n        // injected keys or cached event handlers. Therefore we need to always\n        // check the codegenNode's props to be sure.\n\n        var generatedPropsType = getGeneratedPropsConstantType(node, context);\n\n        if (generatedPropsType === 0\n        /* NOT_CONSTANT */\n        ) {\n          constantCache.set(node, 0\n          /* NOT_CONSTANT */\n          );\n          return 0\n          /* NOT_CONSTANT */\n          ;\n        }\n\n        if (generatedPropsType < _returnType) {\n          _returnType = generatedPropsType;\n        } // 2. its children.\n\n\n        for (var i = 0; i < node.children.length; i++) {\n          var childType = getConstantType(node.children[i], context);\n\n          if (childType === 0\n          /* NOT_CONSTANT */\n          ) {\n            constantCache.set(node, 0\n            /* NOT_CONSTANT */\n            );\n            return 0\n            /* NOT_CONSTANT */\n            ;\n          }\n\n          if (childType < _returnType) {\n            _returnType = childType;\n          }\n        } // 3. if the type is not already CAN_SKIP_PATCH which is the lowest non-0\n        // type, check if any of the props can cause the type to be lowered\n        // we can skip can_patch because it's guaranteed by the absence of a\n        // patchFlag.\n\n\n        if (_returnType > 1\n        /* CAN_SKIP_PATCH */\n        ) {\n          for (var _i3 = 0; _i3 < node.props.length; _i3++) {\n            var p = node.props[_i3];\n\n            if (p.type === 7\n            /* DIRECTIVE */\n            && p.name === 'bind' && p.exp) {\n              var expType = getConstantType(p.exp, context);\n\n              if (expType === 0\n              /* NOT_CONSTANT */\n              ) {\n                constantCache.set(node, 0\n                /* NOT_CONSTANT */\n                );\n                return 0\n                /* NOT_CONSTANT */\n                ;\n              }\n\n              if (expType < _returnType) {\n                _returnType = expType;\n              }\n            }\n          }\n        } // only svg/foreignObject could be block here, however if they are\n        // static then they don't need to be blocks since there will be no\n        // nested updates.\n\n\n        if (codegenNode.isBlock) {\n          context.removeHelper(OPEN_BLOCK);\n          context.removeHelper(getVNodeBlockHelper(context.inSSR, codegenNode.isComponent));\n          codegenNode.isBlock = false;\n          context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));\n        }\n\n        constantCache.set(node, _returnType);\n        return _returnType;\n      } else {\n        constantCache.set(node, 0\n        /* NOT_CONSTANT */\n        );\n        return 0\n        /* NOT_CONSTANT */\n        ;\n      }\n\n    case 2\n    /* TEXT */\n    :\n    case 3\n    /* COMMENT */\n    :\n      return 3\n      /* CAN_STRINGIFY */\n      ;\n\n    case 9\n    /* IF */\n    :\n    case 11\n    /* FOR */\n    :\n    case 10\n    /* IF_BRANCH */\n    :\n      return 0\n      /* NOT_CONSTANT */\n      ;\n\n    case 5\n    /* INTERPOLATION */\n    :\n    case 12\n    /* TEXT_CALL */\n    :\n      return getConstantType(node.content, context);\n\n    case 4\n    /* SIMPLE_EXPRESSION */\n    :\n      return node.constType;\n\n    case 8\n    /* COMPOUND_EXPRESSION */\n    :\n      var returnType = 3\n      /* CAN_STRINGIFY */\n      ;\n\n      for (var _i4 = 0; _i4 < node.children.length; _i4++) {\n        var child = node.children[_i4];\n\n        if (isString(child) || isSymbol(child)) {\n          continue;\n        }\n\n        var _childType = getConstantType(child, context);\n\n        if (_childType === 0\n        /* NOT_CONSTANT */\n        ) {\n          return 0\n          /* NOT_CONSTANT */\n          ;\n        } else if (_childType < returnType) {\n          returnType = _childType;\n        }\n      }\n\n      return returnType;\n\n    default:\n      if (process.env.NODE_ENV !== 'production') ;\n      return 0\n      /* NOT_CONSTANT */\n      ;\n  }\n}\n\nvar allowHoistedHelperSet = new Set([NORMALIZE_CLASS, NORMALIZE_STYLE, NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);\n\nfunction getConstantTypeOfHelperCall(value, context) {\n  if (value.type === 14\n  /* JS_CALL_EXPRESSION */\n  && !isString(value.callee) && allowHoistedHelperSet.has(value.callee)) {\n    var arg = value.arguments[0];\n\n    if (arg.type === 4\n    /* SIMPLE_EXPRESSION */\n    ) {\n      return getConstantType(arg, context);\n    } else if (arg.type === 14\n    /* JS_CALL_EXPRESSION */\n    ) {\n      // in the case of nested helper call, e.g. `normalizeProps(guardReactiveProps(exp))`\n      return getConstantTypeOfHelperCall(arg, context);\n    }\n  }\n\n  return 0\n  /* NOT_CONSTANT */\n  ;\n}\n\nfunction getGeneratedPropsConstantType(node, context) {\n  var returnType = 3\n  /* CAN_STRINGIFY */\n  ;\n  var props = getNodeProps(node);\n\n  if (props && props.type === 15\n  /* JS_OBJECT_EXPRESSION */\n  ) {\n    var properties = props.properties;\n\n    for (var i = 0; i < properties.length; i++) {\n      var _properties$i = properties[i],\n          key = _properties$i.key,\n          value = _properties$i.value;\n      var keyType = getConstantType(key, context);\n\n      if (keyType === 0\n      /* NOT_CONSTANT */\n      ) {\n        return keyType;\n      }\n\n      if (keyType < returnType) {\n        returnType = keyType;\n      }\n\n      var valueType = void 0;\n\n      if (value.type === 4\n      /* SIMPLE_EXPRESSION */\n      ) {\n        valueType = getConstantType(value, context);\n      } else if (value.type === 14\n      /* JS_CALL_EXPRESSION */\n      ) {\n        // some helper calls can be hoisted,\n        // such as the `normalizeProps` generated by the compiler for pre-normalize class,\n        // in this case we need to respect the ConstantType of the helper's argments\n        valueType = getConstantTypeOfHelperCall(value, context);\n      } else {\n        valueType = 0\n        /* NOT_CONSTANT */\n        ;\n      }\n\n      if (valueType === 0\n      /* NOT_CONSTANT */\n      ) {\n        return valueType;\n      }\n\n      if (valueType < returnType) {\n        returnType = valueType;\n      }\n    }\n  }\n\n  return returnType;\n}\n\nfunction getNodeProps(node) {\n  var codegenNode = node.codegenNode;\n\n  if (codegenNode.type === 13\n  /* VNODE_CALL */\n  ) {\n    return codegenNode.props;\n  }\n}\n\nfunction getPatchFlag(node) {\n  var flag = node.patchFlag;\n  return flag ? parseInt(flag, 10) : undefined;\n}\n\nfunction createTransformContext(root, _ref2) {\n  var _ref2$filename = _ref2.filename,\n      filename = _ref2$filename === void 0 ? '' : _ref2$filename,\n      _ref2$prefixIdentifie = _ref2.prefixIdentifiers,\n      prefixIdentifiers = _ref2$prefixIdentifie === void 0 ? false : _ref2$prefixIdentifie,\n      _ref2$hoistStatic = _ref2.hoistStatic,\n      hoistStatic = _ref2$hoistStatic === void 0 ? false : _ref2$hoistStatic,\n      _ref2$cacheHandlers = _ref2.cacheHandlers,\n      cacheHandlers = _ref2$cacheHandlers === void 0 ? false : _ref2$cacheHandlers,\n      _ref2$nodeTransforms = _ref2.nodeTransforms,\n      nodeTransforms = _ref2$nodeTransforms === void 0 ? [] : _ref2$nodeTransforms,\n      _ref2$directiveTransf = _ref2.directiveTransforms,\n      directiveTransforms = _ref2$directiveTransf === void 0 ? {} : _ref2$directiveTransf,\n      _ref2$transformHoist = _ref2.transformHoist,\n      transformHoist = _ref2$transformHoist === void 0 ? null : _ref2$transformHoist,\n      _ref2$isBuiltInCompon = _ref2.isBuiltInComponent,\n      isBuiltInComponent = _ref2$isBuiltInCompon === void 0 ? NOOP : _ref2$isBuiltInCompon,\n      _ref2$isCustomElement = _ref2.isCustomElement,\n      isCustomElement = _ref2$isCustomElement === void 0 ? NOOP : _ref2$isCustomElement,\n      _ref2$expressionPlugi = _ref2.expressionPlugins,\n      expressionPlugins = _ref2$expressionPlugi === void 0 ? [] : _ref2$expressionPlugi,\n      _ref2$scopeId = _ref2.scopeId,\n      scopeId = _ref2$scopeId === void 0 ? null : _ref2$scopeId,\n      _ref2$slotted = _ref2.slotted,\n      slotted = _ref2$slotted === void 0 ? true : _ref2$slotted,\n      _ref2$ssr = _ref2.ssr,\n      ssr = _ref2$ssr === void 0 ? false : _ref2$ssr,\n      _ref2$inSSR = _ref2.inSSR,\n      inSSR = _ref2$inSSR === void 0 ? false : _ref2$inSSR,\n      _ref2$ssrCssVars = _ref2.ssrCssVars,\n      ssrCssVars = _ref2$ssrCssVars === void 0 ? \"\" : _ref2$ssrCssVars,\n      _ref2$bindingMetadata = _ref2.bindingMetadata,\n      bindingMetadata = _ref2$bindingMetadata === void 0 ? EMPTY_OBJ : _ref2$bindingMetadata,\n      _ref2$inline = _ref2.inline,\n      inline = _ref2$inline === void 0 ? false : _ref2$inline,\n      _ref2$isTS = _ref2.isTS,\n      isTS = _ref2$isTS === void 0 ? false : _ref2$isTS,\n      _ref2$onError = _ref2.onError,\n      onError = _ref2$onError === void 0 ? defaultOnError : _ref2$onError,\n      _ref2$onWarn = _ref2.onWarn,\n      onWarn = _ref2$onWarn === void 0 ? defaultOnWarn : _ref2$onWarn,\n      compatConfig = _ref2.compatConfig;\n  var nameMatch = filename.replace(/\\?.*$/, '').match(/([^/\\\\]+)\\.\\w+$/);\n  var context = {\n    // options\n    selfName: nameMatch && capitalize(camelize$1(nameMatch[1])),\n    prefixIdentifiers: prefixIdentifiers,\n    hoistStatic: hoistStatic,\n    cacheHandlers: cacheHandlers,\n    nodeTransforms: nodeTransforms,\n    directiveTransforms: directiveTransforms,\n    transformHoist: transformHoist,\n    isBuiltInComponent: isBuiltInComponent,\n    isCustomElement: isCustomElement,\n    expressionPlugins: expressionPlugins,\n    scopeId: scopeId,\n    slotted: slotted,\n    ssr: ssr,\n    inSSR: inSSR,\n    ssrCssVars: ssrCssVars,\n    bindingMetadata: bindingMetadata,\n    inline: inline,\n    isTS: isTS,\n    onError: onError,\n    onWarn: onWarn,\n    compatConfig: compatConfig,\n    // state\n    root: root,\n    helpers: new Map(),\n    components: new Set(),\n    directives: new Set(),\n    hoists: [],\n    imports: [],\n    constantCache: new Map(),\n    temps: 0,\n    cached: 0,\n    identifiers: Object.create(null),\n    scopes: {\n      vFor: 0,\n      vSlot: 0,\n      vPre: 0,\n      vOnce: 0\n    },\n    parent: null,\n    currentNode: root,\n    childIndex: 0,\n    inVOnce: false,\n    // methods\n    helper: function helper(name) {\n      var count = context.helpers.get(name) || 0;\n      context.helpers.set(name, count + 1);\n      return name;\n    },\n    removeHelper: function removeHelper(name) {\n      var count = context.helpers.get(name);\n\n      if (count) {\n        var currentCount = count - 1;\n\n        if (!currentCount) {\n          context.helpers[\"delete\"](name);\n        } else {\n          context.helpers.set(name, currentCount);\n        }\n      }\n    },\n    helperString: function helperString(name) {\n      return \"_\".concat(helperNameMap[context.helper(name)]);\n    },\n    replaceNode: function replaceNode(node) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production') {\n        if (!context.currentNode) {\n          throw new Error(\"Node being replaced is already removed.\");\n        }\n\n        if (!context.parent) {\n          throw new Error(\"Cannot replace root node.\");\n        }\n      }\n\n      context.parent.children[context.childIndex] = context.currentNode = node;\n    },\n    removeNode: function removeNode(node) {\n      if (process.env.NODE_ENV !== 'production' && !context.parent) {\n        throw new Error(\"Cannot remove root node.\");\n      }\n\n      var list = context.parent.children;\n      var removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;\n      /* istanbul ignore if */\n\n      if (process.env.NODE_ENV !== 'production' && removalIndex < 0) {\n        throw new Error(\"node being removed is not a child of current parent\");\n      }\n\n      if (!node || node === context.currentNode) {\n        // current node removed\n        context.currentNode = null;\n        context.onNodeRemoved();\n      } else {\n        // sibling node removed\n        if (context.childIndex > removalIndex) {\n          context.childIndex--;\n          context.onNodeRemoved();\n        }\n      }\n\n      context.parent.children.splice(removalIndex, 1);\n    },\n    onNodeRemoved: function onNodeRemoved() {},\n    addIdentifiers: function addIdentifiers(exp) {},\n    removeIdentifiers: function removeIdentifiers(exp) {},\n    hoist: function hoist(exp) {\n      if (isString(exp)) exp = createSimpleExpression(exp);\n      context.hoists.push(exp);\n      var identifier = createSimpleExpression(\"_hoisted_\".concat(context.hoists.length), false, exp.loc, 2\n      /* CAN_HOIST */\n      );\n      identifier.hoisted = exp;\n      return identifier;\n    },\n    cache: function cache(exp) {\n      var isVNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return createCacheExpression(context.cached++, exp, isVNode);\n    }\n  };\n  {\n    context.filters = new Set();\n  }\n  return context;\n}\n\nfunction transform(root, options) {\n  var context = createTransformContext(root, options);\n  traverseNode(root, context);\n\n  if (options.hoistStatic) {\n    hoistStatic(root, context);\n  }\n\n  if (!options.ssr) {\n    createRootCodegen(root, context);\n  } // finalize meta information\n\n\n  root.helpers = _toConsumableArray(context.helpers.keys());\n  root.components = _toConsumableArray(context.components);\n  root.directives = _toConsumableArray(context.directives);\n  root.imports = context.imports;\n  root.hoists = context.hoists;\n  root.temps = context.temps;\n  root.cached = context.cached;\n  {\n    root.filters = _toConsumableArray(context.filters);\n  }\n}\n\nfunction createRootCodegen(root, context) {\n  var helper = context.helper;\n  var children = root.children;\n\n  if (children.length === 1) {\n    var child = children[0]; // if the single child is an element, turn it into a block.\n\n    if (isSingleElementRoot(root, child) && child.codegenNode) {\n      // single element root is never hoisted so codegenNode will never be\n      // SimpleExpressionNode\n      var codegenNode = child.codegenNode;\n\n      if (codegenNode.type === 13\n      /* VNODE_CALL */\n      ) {\n        makeBlock(codegenNode, context);\n      }\n\n      root.codegenNode = codegenNode;\n    } else {\n      // - single <slot/>, IfNode, ForNode: already blocks.\n      // - single text node: always patched.\n      // root codegen falls through via genNode()\n      root.codegenNode = child;\n    }\n  } else if (children.length > 1) {\n    // root has multiple nodes - return a fragment block.\n    var patchFlag = 64\n    /* STABLE_FRAGMENT */\n    ;\n    var patchFlagText = PatchFlagNames[64\n    /* STABLE_FRAGMENT */\n    ]; // check if the fragment actually contains a single valid child with\n    // the rest being comments\n\n    if (process.env.NODE_ENV !== 'production' && children.filter(function (c) {\n      return c.type !== 3;\n    }\n    /* COMMENT */\n    ).length === 1) {\n      patchFlag |= 2048\n      /* DEV_ROOT_FRAGMENT */\n      ;\n      patchFlagText += \", \".concat(PatchFlagNames[2048\n      /* DEV_ROOT_FRAGMENT */\n      ]);\n    }\n\n    root.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, root.children, patchFlag + (process.env.NODE_ENV !== 'production' ? \" /* \".concat(patchFlagText, \" */\") : \"\"), undefined, undefined, true, undefined, false\n    /* isComponent */\n    );\n  } else ;\n}\n\nfunction traverseChildren(parent, context) {\n  var i = 0;\n\n  var nodeRemoved = function nodeRemoved() {\n    i--;\n  };\n\n  for (; i < parent.children.length; i++) {\n    var child = parent.children[i];\n    if (isString(child)) continue;\n    context.parent = parent;\n    context.childIndex = i;\n    context.onNodeRemoved = nodeRemoved;\n    traverseNode(child, context);\n  }\n}\n\nfunction traverseNode(node, context) {\n  context.currentNode = node; // apply transform plugins\n\n  var nodeTransforms = context.nodeTransforms;\n  var exitFns = [];\n\n  for (var _i5 = 0; _i5 < nodeTransforms.length; _i5++) {\n    var onExit = nodeTransforms[_i5](node, context);\n\n    if (onExit) {\n      if (isArray(onExit)) {\n        exitFns.push.apply(exitFns, _toConsumableArray(onExit));\n      } else {\n        exitFns.push(onExit);\n      }\n    }\n\n    if (!context.currentNode) {\n      // node was removed\n      return;\n    } else {\n      // node may have been replaced\n      node = context.currentNode;\n    }\n  }\n\n  switch (node.type) {\n    case 3\n    /* COMMENT */\n    :\n      if (!context.ssr) {\n        // inject import for the Comment symbol, which is needed for creating\n        // comment nodes with `createVNode`\n        context.helper(CREATE_COMMENT);\n      }\n\n      break;\n\n    case 5\n    /* INTERPOLATION */\n    :\n      // no need to traverse, but we need to inject toString helper\n      if (!context.ssr) {\n        context.helper(TO_DISPLAY_STRING);\n      }\n\n      break;\n    // for container types, further traverse downwards\n\n    case 9\n    /* IF */\n    :\n      for (var _i6 = 0; _i6 < node.branches.length; _i6++) {\n        traverseNode(node.branches[_i6], context);\n      }\n\n      break;\n\n    case 10\n    /* IF_BRANCH */\n    :\n    case 11\n    /* FOR */\n    :\n    case 1\n    /* ELEMENT */\n    :\n    case 0\n    /* ROOT */\n    :\n      traverseChildren(node, context);\n      break;\n  } // exit transforms\n\n\n  context.currentNode = node;\n  var i = exitFns.length;\n\n  while (i--) {\n    exitFns[i]();\n  }\n}\n\nfunction createStructuralDirectiveTransform(name, fn) {\n  var matches = isString(name) ? function (n) {\n    return n === name;\n  } : function (n) {\n    return name.test(n);\n  };\n  return function (node, context) {\n    if (node.type === 1\n    /* ELEMENT */\n    ) {\n      var props = node.props; // structural directive transforms are not concerned with slots\n      // as they are handled separately in vSlot.ts\n\n      if (node.tagType === 3\n      /* TEMPLATE */\n      && props.some(isVSlot)) {\n        return;\n      }\n\n      var exitFns = [];\n\n      for (var i = 0; i < props.length; i++) {\n        var prop = props[i];\n\n        if (prop.type === 7\n        /* DIRECTIVE */\n        && matches(prop.name)) {\n          // structural directives are removed to avoid infinite recursion\n          // also we remove them *before* applying so that it can further\n          // traverse itself in case it moves the node around\n          props.splice(i, 1);\n          i--;\n          var onExit = fn(node, prop, context);\n          if (onExit) exitFns.push(onExit);\n        }\n      }\n\n      return exitFns;\n    }\n  };\n}\n\nvar PURE_ANNOTATION = \"/*#__PURE__*/\";\n\nfunction createCodegenContext(ast, _ref3) {\n  var _ref3$mode = _ref3.mode,\n      mode = _ref3$mode === void 0 ? 'function' : _ref3$mode,\n      _ref3$prefixIdentifie = _ref3.prefixIdentifiers,\n      prefixIdentifiers = _ref3$prefixIdentifie === void 0 ? mode === 'module' : _ref3$prefixIdentifie,\n      _ref3$sourceMap = _ref3.sourceMap,\n      sourceMap = _ref3$sourceMap === void 0 ? false : _ref3$sourceMap,\n      _ref3$filename = _ref3.filename,\n      filename = _ref3$filename === void 0 ? \"template.vue.html\" : _ref3$filename,\n      _ref3$scopeId = _ref3.scopeId,\n      scopeId = _ref3$scopeId === void 0 ? null : _ref3$scopeId,\n      _ref3$optimizeImports = _ref3.optimizeImports,\n      optimizeImports = _ref3$optimizeImports === void 0 ? false : _ref3$optimizeImports,\n      _ref3$runtimeGlobalNa = _ref3.runtimeGlobalName,\n      runtimeGlobalName = _ref3$runtimeGlobalNa === void 0 ? \"Vue\" : _ref3$runtimeGlobalNa,\n      _ref3$runtimeModuleNa = _ref3.runtimeModuleName,\n      runtimeModuleName = _ref3$runtimeModuleNa === void 0 ? \"vue\" : _ref3$runtimeModuleNa,\n      _ref3$ssrRuntimeModul = _ref3.ssrRuntimeModuleName,\n      ssrRuntimeModuleName = _ref3$ssrRuntimeModul === void 0 ? 'vue/server-renderer' : _ref3$ssrRuntimeModul,\n      _ref3$ssr = _ref3.ssr,\n      ssr = _ref3$ssr === void 0 ? false : _ref3$ssr,\n      _ref3$isTS = _ref3.isTS,\n      isTS = _ref3$isTS === void 0 ? false : _ref3$isTS,\n      _ref3$inSSR = _ref3.inSSR,\n      inSSR = _ref3$inSSR === void 0 ? false : _ref3$inSSR;\n  var context = {\n    mode: mode,\n    prefixIdentifiers: prefixIdentifiers,\n    sourceMap: sourceMap,\n    filename: filename,\n    scopeId: scopeId,\n    optimizeImports: optimizeImports,\n    runtimeGlobalName: runtimeGlobalName,\n    runtimeModuleName: runtimeModuleName,\n    ssrRuntimeModuleName: ssrRuntimeModuleName,\n    ssr: ssr,\n    isTS: isTS,\n    inSSR: inSSR,\n    source: ast.loc.source,\n    code: \"\",\n    column: 1,\n    line: 1,\n    offset: 0,\n    indentLevel: 0,\n    pure: false,\n    map: undefined,\n    helper: function helper(key) {\n      return \"_\".concat(helperNameMap[key]);\n    },\n    push: function push(code, node) {\n      context.code += code;\n    },\n    indent: function indent() {\n      _newline(++context.indentLevel);\n    },\n    deindent: function deindent() {\n      var withoutNewLine = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (withoutNewLine) {\n        --context.indentLevel;\n      } else {\n        _newline(--context.indentLevel);\n      }\n    },\n    newline: function newline() {\n      _newline(context.indentLevel);\n    }\n  };\n\n  function _newline(n) {\n    context.push('\\n' + \"  \".repeat(n));\n  }\n\n  return context;\n}\n\nfunction generate(ast) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var context = createCodegenContext(ast, options);\n  if (options.onContextCreated) options.onContextCreated(context);\n  var mode = context.mode,\n      push = context.push,\n      prefixIdentifiers = context.prefixIdentifiers,\n      indent = context.indent,\n      deindent = context.deindent,\n      newline = context.newline,\n      scopeId = context.scopeId,\n      ssr = context.ssr;\n  var hasHelpers = ast.helpers.length > 0;\n  var useWithBlock = !prefixIdentifiers && mode !== 'module'; // preambles\n  // in setup() inline mode, the preamble is generated in a sub context\n  // and returned separately.\n\n  var preambleContext = context;\n  {\n    genFunctionPreamble(ast, preambleContext);\n  } // enter render function\n\n  var functionName = ssr ? \"ssrRender\" : \"render\";\n  var args = ssr ? ['_ctx', '_push', '_parent', '_attrs'] : ['_ctx', '_cache'];\n  var signature = args.join(', ');\n  {\n    push(\"function \".concat(functionName, \"(\").concat(signature, \") {\"));\n  }\n  indent();\n\n  if (useWithBlock) {\n    push(\"with (_ctx) {\");\n    indent(); // function mode const declarations should be inside with block\n    // also they should be renamed to avoid collision with user properties\n\n    if (hasHelpers) {\n      push(\"const { \".concat(ast.helpers.map(function (s) {\n        return \"\".concat(helperNameMap[s], \": _\").concat(helperNameMap[s]);\n      }).join(', '), \" } = _Vue\"));\n      push(\"\\n\");\n      newline();\n    }\n  } // generate asset resolution statements\n\n\n  if (ast.components.length) {\n    genAssets(ast.components, 'component', context);\n\n    if (ast.directives.length || ast.temps > 0) {\n      newline();\n    }\n  }\n\n  if (ast.directives.length) {\n    genAssets(ast.directives, 'directive', context);\n\n    if (ast.temps > 0) {\n      newline();\n    }\n  }\n\n  if (ast.filters && ast.filters.length) {\n    newline();\n    genAssets(ast.filters, 'filter', context);\n    newline();\n  }\n\n  if (ast.temps > 0) {\n    push(\"let \");\n\n    for (var i = 0; i < ast.temps; i++) {\n      push(\"\".concat(i > 0 ? \", \" : \"\", \"_temp\").concat(i));\n    }\n  }\n\n  if (ast.components.length || ast.directives.length || ast.temps) {\n    push(\"\\n\");\n    newline();\n  } // generate the VNode tree expression\n\n\n  if (!ssr) {\n    push(\"return \");\n  }\n\n  if (ast.codegenNode) {\n    genNode(ast.codegenNode, context);\n  } else {\n    push(\"null\");\n  }\n\n  if (useWithBlock) {\n    deindent();\n    push(\"}\");\n  }\n\n  deindent();\n  push(\"}\");\n  return {\n    ast: ast,\n    code: context.code,\n    preamble: \"\",\n    // SourceMapGenerator does have toJSON() method but it's not in the types\n    map: context.map ? context.map.toJSON() : undefined\n  };\n}\n\nfunction genFunctionPreamble(ast, context) {\n  var ssr = context.ssr,\n      prefixIdentifiers = context.prefixIdentifiers,\n      push = context.push,\n      newline = context.newline,\n      runtimeModuleName = context.runtimeModuleName,\n      runtimeGlobalName = context.runtimeGlobalName,\n      ssrRuntimeModuleName = context.ssrRuntimeModuleName;\n  var VueBinding = runtimeGlobalName;\n\n  var aliasHelper = function aliasHelper(s) {\n    return \"\".concat(helperNameMap[s], \": _\").concat(helperNameMap[s]);\n  }; // Generate const declaration for helpers\n  // In prefix mode, we place the const declaration at top so it's done\n  // only once; But if we not prefixing, we place the declaration inside the\n  // with block so it doesn't incur the `in` check cost for every helper access.\n\n\n  if (ast.helpers.length > 0) {\n    {\n      // \"with\" mode.\n      // save Vue in a separate variable to avoid collision\n      push(\"const _Vue = \".concat(VueBinding, \"\\n\")); // in \"with\" mode, helpers are declared inside the with block to avoid\n      // has check cost, but hoists are lifted out of the function - we need\n      // to provide the helper here.\n\n      if (ast.hoists.length) {\n        var staticHelpers = [CREATE_VNODE, CREATE_ELEMENT_VNODE, CREATE_COMMENT, CREATE_TEXT, CREATE_STATIC].filter(function (helper) {\n          return ast.helpers.includes(helper);\n        }).map(aliasHelper).join(', ');\n        push(\"const { \".concat(staticHelpers, \" } = _Vue\\n\"));\n      }\n    }\n  }\n\n  genHoists(ast.hoists, context);\n  newline();\n  push(\"return \");\n}\n\nfunction genAssets(assets, type, _ref4) {\n  var helper = _ref4.helper,\n      push = _ref4.push,\n      newline = _ref4.newline,\n      isTS = _ref4.isTS;\n  var resolver = helper(type === 'filter' ? RESOLVE_FILTER : type === 'component' ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE);\n\n  for (var i = 0; i < assets.length; i++) {\n    var id = assets[i]; // potential component implicit self-reference inferred from SFC filename\n\n    var maybeSelfReference = id.endsWith('__self');\n\n    if (maybeSelfReference) {\n      id = id.slice(0, -6);\n    }\n\n    push(\"const \".concat(toValidAssetId(id, type), \" = \").concat(resolver, \"(\").concat(JSON.stringify(id)).concat(maybeSelfReference ? \", true\" : \"\", \")\").concat(isTS ? \"!\" : \"\"));\n\n    if (i < assets.length - 1) {\n      newline();\n    }\n  }\n}\n\nfunction genHoists(hoists, context) {\n  if (!hoists.length) {\n    return;\n  }\n\n  context.pure = true;\n  var push = context.push,\n      newline = context.newline,\n      helper = context.helper,\n      scopeId = context.scopeId,\n      mode = context.mode;\n  newline();\n\n  for (var i = 0; i < hoists.length; i++) {\n    var exp = hoists[i];\n\n    if (exp) {\n      push(\"const _hoisted_\".concat(i + 1, \" = \", \"\"));\n      genNode(exp, context);\n      newline();\n    }\n  }\n\n  context.pure = false;\n}\n\nfunction isText$1(n) {\n  return isString(n) || n.type === 4\n  /* SIMPLE_EXPRESSION */\n  || n.type === 2\n  /* TEXT */\n  || n.type === 5\n  /* INTERPOLATION */\n  || n.type === 8\n  /* COMPOUND_EXPRESSION */\n  ;\n}\n\nfunction genNodeListAsArray(nodes, context) {\n  var multilines = nodes.length > 3 || process.env.NODE_ENV !== 'production' && nodes.some(function (n) {\n    return isArray(n) || !isText$1(n);\n  });\n  context.push(\"[\");\n  multilines && context.indent();\n  genNodeList(nodes, context, multilines);\n  multilines && context.deindent();\n  context.push(\"]\");\n}\n\nfunction genNodeList(nodes, context) {\n  var multilines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var comma = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var push = context.push,\n      newline = context.newline;\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n\n    if (isString(node)) {\n      push(node);\n    } else if (isArray(node)) {\n      genNodeListAsArray(node, context);\n    } else {\n      genNode(node, context);\n    }\n\n    if (i < nodes.length - 1) {\n      if (multilines) {\n        comma && push(',');\n        newline();\n      } else {\n        comma && push(', ');\n      }\n    }\n  }\n}\n\nfunction genNode(node, context) {\n  if (isString(node)) {\n    context.push(node);\n    return;\n  }\n\n  if (isSymbol(node)) {\n    context.push(context.helper(node));\n    return;\n  }\n\n  switch (node.type) {\n    case 1\n    /* ELEMENT */\n    :\n    case 9\n    /* IF */\n    :\n    case 11\n    /* FOR */\n    :\n      process.env.NODE_ENV !== 'production' && assert(node.codegenNode != null, \"Codegen node is missing for element/if/for node. \" + \"Apply appropriate transforms first.\");\n      genNode(node.codegenNode, context);\n      break;\n\n    case 2\n    /* TEXT */\n    :\n      genText(node, context);\n      break;\n\n    case 4\n    /* SIMPLE_EXPRESSION */\n    :\n      genExpression(node, context);\n      break;\n\n    case 5\n    /* INTERPOLATION */\n    :\n      genInterpolation(node, context);\n      break;\n\n    case 12\n    /* TEXT_CALL */\n    :\n      genNode(node.codegenNode, context);\n      break;\n\n    case 8\n    /* COMPOUND_EXPRESSION */\n    :\n      genCompoundExpression(node, context);\n      break;\n\n    case 3\n    /* COMMENT */\n    :\n      genComment(node, context);\n      break;\n\n    case 13\n    /* VNODE_CALL */\n    :\n      genVNodeCall(node, context);\n      break;\n\n    case 14\n    /* JS_CALL_EXPRESSION */\n    :\n      genCallExpression(node, context);\n      break;\n\n    case 15\n    /* JS_OBJECT_EXPRESSION */\n    :\n      genObjectExpression(node, context);\n      break;\n\n    case 17\n    /* JS_ARRAY_EXPRESSION */\n    :\n      genArrayExpression(node, context);\n      break;\n\n    case 18\n    /* JS_FUNCTION_EXPRESSION */\n    :\n      genFunctionExpression(node, context);\n      break;\n\n    case 19\n    /* JS_CONDITIONAL_EXPRESSION */\n    :\n      genConditionalExpression(node, context);\n      break;\n\n    case 20\n    /* JS_CACHE_EXPRESSION */\n    :\n      genCacheExpression(node, context);\n      break;\n\n    case 21\n    /* JS_BLOCK_STATEMENT */\n    :\n      genNodeList(node.body, context, true, false);\n      break;\n    // SSR only types\n\n    case 22\n    /* JS_TEMPLATE_LITERAL */\n    :\n      break;\n\n    case 23\n    /* JS_IF_STATEMENT */\n    :\n      break;\n\n    case 24\n    /* JS_ASSIGNMENT_EXPRESSION */\n    :\n      break;\n\n    case 25\n    /* JS_SEQUENCE_EXPRESSION */\n    :\n      break;\n\n    case 26\n    /* JS_RETURN_STATEMENT */\n    :\n      break;\n\n    /* istanbul ignore next */\n\n    case 10\n    /* IF_BRANCH */\n    :\n      // noop\n      break;\n\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        assert(false, \"unhandled codegen node type: \".concat(node.type)); // make sure we exhaust all possible types\n\n        var exhaustiveCheck = node;\n        return exhaustiveCheck;\n      }\n\n  }\n}\n\nfunction genText(node, context) {\n  context.push(JSON.stringify(node.content), node);\n}\n\nfunction genExpression(node, context) {\n  var content = node.content,\n      isStatic = node.isStatic;\n  context.push(isStatic ? JSON.stringify(content) : content, node);\n}\n\nfunction genInterpolation(node, context) {\n  var push = context.push,\n      helper = context.helper,\n      pure = context.pure;\n  if (pure) push(PURE_ANNOTATION);\n  push(\"\".concat(helper(TO_DISPLAY_STRING), \"(\"));\n  genNode(node.content, context);\n  push(\")\");\n}\n\nfunction genCompoundExpression(node, context) {\n  for (var i = 0; i < node.children.length; i++) {\n    var child = node.children[i];\n\n    if (isString(child)) {\n      context.push(child);\n    } else {\n      genNode(child, context);\n    }\n  }\n}\n\nfunction genExpressionAsPropertyKey(node, context) {\n  var push = context.push;\n\n  if (node.type === 8\n  /* COMPOUND_EXPRESSION */\n  ) {\n    push(\"[\");\n    genCompoundExpression(node, context);\n    push(\"]\");\n  } else if (node.isStatic) {\n    // only quote keys if necessary\n    var text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);\n    push(text, node);\n  } else {\n    push(\"[\".concat(node.content, \"]\"), node);\n  }\n}\n\nfunction genComment(node, context) {\n  var push = context.push,\n      helper = context.helper,\n      pure = context.pure;\n\n  if (pure) {\n    push(PURE_ANNOTATION);\n  }\n\n  push(\"\".concat(helper(CREATE_COMMENT), \"(\").concat(JSON.stringify(node.content), \")\"), node);\n}\n\nfunction genVNodeCall(node, context) {\n  var push = context.push,\n      helper = context.helper,\n      pure = context.pure;\n  var tag = node.tag,\n      props = node.props,\n      children = node.children,\n      patchFlag = node.patchFlag,\n      dynamicProps = node.dynamicProps,\n      directives = node.directives,\n      isBlock = node.isBlock,\n      disableTracking = node.disableTracking,\n      isComponent = node.isComponent;\n\n  if (directives) {\n    push(helper(WITH_DIRECTIVES) + \"(\");\n  }\n\n  if (isBlock) {\n    push(\"(\".concat(helper(OPEN_BLOCK), \"(\").concat(disableTracking ? \"true\" : \"\", \"), \"));\n  }\n\n  if (pure) {\n    push(PURE_ANNOTATION);\n  }\n\n  var callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent) : getVNodeHelper(context.inSSR, isComponent);\n  push(helper(callHelper) + \"(\", node);\n  genNodeList(genNullableArgs([tag, props, children, patchFlag, dynamicProps]), context);\n  push(\")\");\n\n  if (isBlock) {\n    push(\")\");\n  }\n\n  if (directives) {\n    push(\", \");\n    genNode(directives, context);\n    push(\")\");\n  }\n}\n\nfunction genNullableArgs(args) {\n  var i = args.length;\n\n  while (i--) {\n    if (args[i] != null) break;\n  }\n\n  return args.slice(0, i + 1).map(function (arg) {\n    return arg || \"null\";\n  });\n} // JavaScript\n\n\nfunction genCallExpression(node, context) {\n  var push = context.push,\n      helper = context.helper,\n      pure = context.pure;\n  var callee = isString(node.callee) ? node.callee : helper(node.callee);\n\n  if (pure) {\n    push(PURE_ANNOTATION);\n  }\n\n  push(callee + \"(\", node);\n  genNodeList(node.arguments, context);\n  push(\")\");\n}\n\nfunction genObjectExpression(node, context) {\n  var push = context.push,\n      indent = context.indent,\n      deindent = context.deindent,\n      newline = context.newline;\n  var properties = node.properties;\n\n  if (!properties.length) {\n    push(\"{}\", node);\n    return;\n  }\n\n  var multilines = properties.length > 1 || process.env.NODE_ENV !== 'production' && properties.some(function (p) {\n    return p.value.type !== 4;\n  }\n  /* SIMPLE_EXPRESSION */\n  );\n  push(multilines ? \"{\" : \"{ \");\n  multilines && indent();\n\n  for (var i = 0; i < properties.length; i++) {\n    var _properties$i2 = properties[i],\n        key = _properties$i2.key,\n        value = _properties$i2.value; // key\n\n    genExpressionAsPropertyKey(key, context);\n    push(\": \"); // value\n\n    genNode(value, context);\n\n    if (i < properties.length - 1) {\n      // will only reach this if it's multilines\n      push(\",\");\n      newline();\n    }\n  }\n\n  multilines && deindent();\n  push(multilines ? \"}\" : \" }\");\n}\n\nfunction genArrayExpression(node, context) {\n  genNodeListAsArray(node.elements, context);\n}\n\nfunction genFunctionExpression(node, context) {\n  var push = context.push,\n      indent = context.indent,\n      deindent = context.deindent;\n  var params = node.params,\n      returns = node.returns,\n      body = node.body,\n      newline = node.newline,\n      isSlot = node.isSlot;\n\n  if (isSlot) {\n    // wrap slot functions with owner context\n    push(\"_\".concat(helperNameMap[WITH_CTX], \"(\"));\n  }\n\n  push(\"(\", node);\n\n  if (isArray(params)) {\n    genNodeList(params, context);\n  } else if (params) {\n    genNode(params, context);\n  }\n\n  push(\") => \");\n\n  if (newline || body) {\n    push(\"{\");\n    indent();\n  }\n\n  if (returns) {\n    if (newline) {\n      push(\"return \");\n    }\n\n    if (isArray(returns)) {\n      genNodeListAsArray(returns, context);\n    } else {\n      genNode(returns, context);\n    }\n  } else if (body) {\n    genNode(body, context);\n  }\n\n  if (newline || body) {\n    deindent();\n    push(\"}\");\n  }\n\n  if (isSlot) {\n    if (node.isNonScopedSlot) {\n      push(\", undefined, true\");\n    }\n\n    push(\")\");\n  }\n}\n\nfunction genConditionalExpression(node, context) {\n  var test = node.test,\n      consequent = node.consequent,\n      alternate = node.alternate,\n      needNewline = node.newline;\n  var push = context.push,\n      indent = context.indent,\n      deindent = context.deindent,\n      newline = context.newline;\n\n  if (test.type === 4\n  /* SIMPLE_EXPRESSION */\n  ) {\n    var needsParens = !isSimpleIdentifier(test.content);\n    needsParens && push(\"(\");\n    genExpression(test, context);\n    needsParens && push(\")\");\n  } else {\n    push(\"(\");\n    genNode(test, context);\n    push(\")\");\n  }\n\n  needNewline && indent();\n  context.indentLevel++;\n  needNewline || push(\" \");\n  push(\"? \");\n  genNode(consequent, context);\n  context.indentLevel--;\n  needNewline && newline();\n  needNewline || push(\" \");\n  push(\": \");\n  var isNested = alternate.type === 19\n  /* JS_CONDITIONAL_EXPRESSION */\n  ;\n\n  if (!isNested) {\n    context.indentLevel++;\n  }\n\n  genNode(alternate, context);\n\n  if (!isNested) {\n    context.indentLevel--;\n  }\n\n  needNewline && deindent(true\n  /* without newline */\n  );\n}\n\nfunction genCacheExpression(node, context) {\n  var push = context.push,\n      helper = context.helper,\n      indent = context.indent,\n      deindent = context.deindent,\n      newline = context.newline;\n  push(\"_cache[\".concat(node.index, \"] || (\"));\n\n  if (node.isVNode) {\n    indent();\n    push(\"\".concat(helper(SET_BLOCK_TRACKING), \"(-1),\"));\n    newline();\n  }\n\n  push(\"_cache[\".concat(node.index, \"] = \"));\n  genNode(node.value, context);\n\n  if (node.isVNode) {\n    push(\",\");\n    newline();\n    push(\"\".concat(helper(SET_BLOCK_TRACKING), \"(1),\"));\n    newline();\n    push(\"_cache[\".concat(node.index, \"]\"));\n    deindent();\n  }\n\n  push(\")\");\n}\n\nfunction walkIdentifiers(root, onIdentifier) {\n  var includeAll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var parentStack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var knownIds = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Object.create(null);\n  {\n    return;\n  }\n}\n\nfunction isReferencedIdentifier(id, parent, parentStack) {\n  {\n    return false;\n  }\n}\n\nfunction isInDestructureAssignment(parent, parentStack) {\n  if (parent && (parent.type === 'ObjectProperty' || parent.type === 'ArrayPattern')) {\n    var i = parentStack.length;\n\n    while (i--) {\n      var p = parentStack[i];\n\n      if (p.type === 'AssignmentExpression') {\n        return true;\n      } else if (p.type !== 'ObjectProperty' && !p.type.endsWith('Pattern')) {\n        break;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction walkFunctionParams(node, onIdent) {\n  var _iterator = _createForOfIteratorHelper(node.params),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var p = _step.value;\n\n      var _iterator2 = _createForOfIteratorHelper(extractIdentifiers(p)),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var id = _step2.value;\n          onIdent(id);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction walkBlockDeclarations(block, onIdent) {\n  var _iterator3 = _createForOfIteratorHelper(block.body),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var stmt = _step3.value;\n\n      if (stmt.type === 'VariableDeclaration') {\n        if (stmt.declare) continue;\n\n        var _iterator4 = _createForOfIteratorHelper(stmt.declarations),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var decl = _step4.value;\n\n            var _iterator5 = _createForOfIteratorHelper(extractIdentifiers(decl.id)),\n                _step5;\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var id = _step5.value;\n                onIdent(id);\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      } else if (stmt.type === 'FunctionDeclaration' || stmt.type === 'ClassDeclaration') {\n        if (stmt.declare || !stmt.id) continue;\n        onIdent(stmt.id);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n}\n\nfunction extractIdentifiers(param) {\n  var nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  switch (param.type) {\n    case 'Identifier':\n      nodes.push(param);\n      break;\n\n    case 'MemberExpression':\n      var object = param;\n\n      while (object.type === 'MemberExpression') {\n        object = object.object;\n      }\n\n      nodes.push(object);\n      break;\n\n    case 'ObjectPattern':\n      var _iterator6 = _createForOfIteratorHelper(param.properties),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var prop = _step6.value;\n\n          if (prop.type === 'RestElement') {\n            extractIdentifiers(prop.argument, nodes);\n          } else {\n            extractIdentifiers(prop.value, nodes);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      break;\n\n    case 'ArrayPattern':\n      param.elements.forEach(function (element) {\n        if (element) extractIdentifiers(element, nodes);\n      });\n      break;\n\n    case 'RestElement':\n      extractIdentifiers(param.argument, nodes);\n      break;\n\n    case 'AssignmentPattern':\n      extractIdentifiers(param.left, nodes);\n      break;\n  }\n\n  return nodes;\n}\n\nvar isFunctionType = function isFunctionType(node) {\n  return /Function(?:Expression|Declaration)$|Method$/.test(node.type);\n};\n\nvar isStaticProperty = function isStaticProperty(node) {\n  return node && (node.type === 'ObjectProperty' || node.type === 'ObjectMethod') && !node.computed;\n};\n\nvar isStaticPropertyKey = function isStaticPropertyKey(node, parent) {\n  return isStaticProperty(parent) && parent.key === node;\n}; // these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\n\n\nvar prohibitedKeywordRE = new RegExp('\\\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments,typeof,void').split(',').join('\\\\b|\\\\b') + '\\\\b'); // strip strings in expressions\n\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n/**\r\n * Validate a non-prefixed expression.\r\n * This is only called when using the in-browser runtime compiler since it\r\n * doesn't prefix expressions.\r\n */\n\nfunction validateBrowserExpression(node, context) {\n  var asParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var asRawStatements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var exp = node.content; // empty expressions are validated per-directive since some directives\n  // do allow empty expressions.\n\n  if (!exp.trim()) {\n    return;\n  }\n\n  try {\n    new Function(asRawStatements ? \" \".concat(exp, \" \") : \"return \".concat(asParams ? \"(\".concat(exp, \") => {}\") : \"(\".concat(exp, \")\")));\n  } catch (e) {\n    var message = e.message;\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n\n    if (keywordMatch) {\n      message = \"avoid using JavaScript keyword as property name: \\\"\".concat(keywordMatch[0], \"\\\"\");\n    }\n\n    context.onError(createCompilerError(44\n    /* X_INVALID_EXPRESSION */\n    , node.loc, undefined, message));\n  }\n}\n\nvar transformExpression = function transformExpression(node, context) {\n  if (node.type === 5\n  /* INTERPOLATION */\n  ) {\n    node.content = processExpression(node.content, context);\n  } else if (node.type === 1\n  /* ELEMENT */\n  ) {\n    // handle directives on element\n    for (var i = 0; i < node.props.length; i++) {\n      var dir = node.props[i]; // do not process for v-on & v-for since they are special handled\n\n      if (dir.type === 7\n      /* DIRECTIVE */\n      && dir.name !== 'for') {\n        var exp = dir.exp;\n        var arg = dir.arg; // do not process exp if this is v-on:arg - we need special handling\n        // for wrapping inline statements.\n\n        if (exp && exp.type === 4\n        /* SIMPLE_EXPRESSION */\n        && !(dir.name === 'on' && arg)) {\n          dir.exp = processExpression(exp, context, // slot args must be processed as function params\n          dir.name === 'slot');\n        }\n\n        if (arg && arg.type === 4\n        /* SIMPLE_EXPRESSION */\n        && !arg.isStatic) {\n          dir.arg = processExpression(arg, context);\n        }\n      }\n    }\n  }\n}; // Important: since this function uses Node.js only dependencies, it should\n// always be used with a leading !true check so that it can be\n// tree-shaken from the browser build.\n\n\nfunction processExpression(node, context) {\n  var asParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var asRawStatements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var localVars = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Object.create(context.identifiers);\n  {\n    if (process.env.NODE_ENV !== 'production') {\n      // simple in-browser validation (same logic in 2.x)\n      validateBrowserExpression(node, context, asParams, asRawStatements);\n    }\n\n    return node;\n  }\n}\n\nvar transformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, function (node, dir, context) {\n  return processIf(node, dir, context, function (ifNode, branch, isRoot) {\n    // #1587: We need to dynamically increment the key based on the current\n    // node's sibling nodes, since chained v-if/else branches are\n    // rendered at the same depth\n    var siblings = context.parent.children;\n    var i = siblings.indexOf(ifNode);\n    var key = 0;\n\n    while (i-- >= 0) {\n      var sibling = siblings[i];\n\n      if (sibling && sibling.type === 9\n      /* IF */\n      ) {\n        key += sibling.branches.length;\n      }\n    } // Exit callback. Complete the codegenNode when all children have been\n    // transformed.\n\n\n    return function () {\n      if (isRoot) {\n        ifNode.codegenNode = createCodegenNodeForBranch(branch, key, context);\n      } else {\n        // attach this branch's codegen node to the v-if root.\n        var parentCondition = getParentCondition(ifNode.codegenNode);\n        parentCondition.alternate = createCodegenNodeForBranch(branch, key + ifNode.branches.length - 1, context);\n      }\n    };\n  });\n}); // target-agnostic transform used for both Client and SSR\n\nfunction processIf(node, dir, context, processCodegen) {\n  if (dir.name !== 'else' && (!dir.exp || !dir.exp.content.trim())) {\n    var loc = dir.exp ? dir.exp.loc : node.loc;\n    context.onError(createCompilerError(28\n    /* X_V_IF_NO_EXPRESSION */\n    , dir.loc));\n    dir.exp = createSimpleExpression(\"true\", false, loc);\n  }\n\n  if (process.env.NODE_ENV !== 'production' && true && dir.exp) {\n    validateBrowserExpression(dir.exp, context);\n  }\n\n  if (dir.name === 'if') {\n    var branch = createIfBranch(node, dir);\n    var ifNode = {\n      type: 9\n      /* IF */\n      ,\n      loc: node.loc,\n      branches: [branch]\n    };\n    context.replaceNode(ifNode);\n\n    if (processCodegen) {\n      return processCodegen(ifNode, branch, true);\n    }\n  } else {\n    // locate the adjacent v-if\n    var siblings = context.parent.children;\n    var comments = [];\n    var i = siblings.indexOf(node);\n\n    while (i-- >= -1) {\n      var sibling = siblings[i];\n\n      if (process.env.NODE_ENV !== 'production' && sibling && sibling.type === 3\n      /* COMMENT */\n      ) {\n        context.removeNode(sibling);\n        comments.unshift(sibling);\n        continue;\n      }\n\n      if (sibling && sibling.type === 2\n      /* TEXT */\n      && !sibling.content.trim().length) {\n        context.removeNode(sibling);\n        continue;\n      }\n\n      if (sibling && sibling.type === 9\n      /* IF */\n      ) {\n        (function () {\n          // Check if v-else was followed by v-else-if\n          if (dir.name === 'else-if' && sibling.branches[sibling.branches.length - 1].condition === undefined) {\n            context.onError(createCompilerError(30\n            /* X_V_ELSE_NO_ADJACENT_IF */\n            , node.loc));\n          } // move the node to the if node's branches\n\n\n          context.removeNode();\n          var branch = createIfBranch(node, dir);\n\n          if (process.env.NODE_ENV !== 'production' && comments.length && // #3619 ignore comments if the v-if is direct child of <transition>\n          !(context.parent && context.parent.type === 1\n          /* ELEMENT */\n          && isBuiltInType(context.parent.tag, 'transition'))) {\n            branch.children = [].concat(comments, _toConsumableArray(branch.children));\n          } // check if user is forcing same key on different branches\n\n\n          if (process.env.NODE_ENV !== 'production' || !true) {\n            var key = branch.userKey;\n\n            if (key) {\n              sibling.branches.forEach(function (_ref5) {\n                var userKey = _ref5.userKey;\n\n                if (isSameKey(userKey, key)) {\n                  context.onError(createCompilerError(29\n                  /* X_V_IF_SAME_KEY */\n                  , branch.userKey.loc));\n                }\n              });\n            }\n          }\n\n          sibling.branches.push(branch);\n          var onExit = processCodegen && processCodegen(sibling, branch, false); // since the branch was removed, it will not be traversed.\n          // make sure to traverse here.\n\n          traverseNode(branch, context); // call on exit\n\n          if (onExit) onExit(); // make sure to reset currentNode after traversal to indicate this\n          // node has been removed.\n\n          context.currentNode = null;\n        })();\n      } else {\n        context.onError(createCompilerError(30\n        /* X_V_ELSE_NO_ADJACENT_IF */\n        , node.loc));\n      }\n\n      break;\n    }\n  }\n}\n\nfunction createIfBranch(node, dir) {\n  return {\n    type: 10\n    /* IF_BRANCH */\n    ,\n    loc: node.loc,\n    condition: dir.name === 'else' ? undefined : dir.exp,\n    children: node.tagType === 3\n    /* TEMPLATE */\n    && !findDir(node, 'for') ? node.children : [node],\n    userKey: findProp(node, \"key\")\n  };\n}\n\nfunction createCodegenNodeForBranch(branch, keyIndex, context) {\n  if (branch.condition) {\n    return createConditionalExpression(branch.condition, createChildrenCodegenNode(branch, keyIndex, context), // make sure to pass in asBlock: true so that the comment node call\n    // closes the current block.\n    createCallExpression(context.helper(CREATE_COMMENT), [process.env.NODE_ENV !== 'production' ? '\"v-if\"' : '\"\"', 'true']));\n  } else {\n    return createChildrenCodegenNode(branch, keyIndex, context);\n  }\n}\n\nfunction createChildrenCodegenNode(branch, keyIndex, context) {\n  var helper = context.helper;\n  var keyProperty = createObjectProperty(\"key\", createSimpleExpression(\"\".concat(keyIndex), false, locStub, 2\n  /* CAN_HOIST */\n  ));\n  var children = branch.children;\n  var firstChild = children[0];\n  var needFragmentWrapper = children.length !== 1 || firstChild.type !== 1\n  /* ELEMENT */\n  ;\n\n  if (needFragmentWrapper) {\n    if (children.length === 1 && firstChild.type === 11\n    /* FOR */\n    ) {\n      // optimize away nested fragments when child is a ForNode\n      var vnodeCall = firstChild.codegenNode;\n      injectProp(vnodeCall, keyProperty, context);\n      return vnodeCall;\n    } else {\n      var patchFlag = 64\n      /* STABLE_FRAGMENT */\n      ;\n      var patchFlagText = PatchFlagNames[64\n      /* STABLE_FRAGMENT */\n      ]; // check if the fragment actually contains a single valid child with\n      // the rest being comments\n\n      if (process.env.NODE_ENV !== 'production' && children.filter(function (c) {\n        return c.type !== 3;\n      }\n      /* COMMENT */\n      ).length === 1) {\n        patchFlag |= 2048\n        /* DEV_ROOT_FRAGMENT */\n        ;\n        patchFlagText += \", \".concat(PatchFlagNames[2048\n        /* DEV_ROOT_FRAGMENT */\n        ]);\n      }\n\n      return createVNodeCall(context, helper(FRAGMENT), createObjectExpression([keyProperty]), children, patchFlag + (process.env.NODE_ENV !== 'production' ? \" /* \".concat(patchFlagText, \" */\") : \"\"), undefined, undefined, true, false, false\n      /* isComponent */\n      , branch.loc);\n    }\n  } else {\n    var ret = firstChild.codegenNode;\n\n    var _vnodeCall = getMemoedVNodeCall(ret); // Change createVNode to createBlock.\n\n\n    if (_vnodeCall.type === 13\n    /* VNODE_CALL */\n    ) {\n      makeBlock(_vnodeCall, context);\n    } // inject branch key\n\n\n    injectProp(_vnodeCall, keyProperty, context);\n    return ret;\n  }\n}\n\nfunction isSameKey(a, b) {\n  if (!a || a.type !== b.type) {\n    return false;\n  }\n\n  if (a.type === 6\n  /* ATTRIBUTE */\n  ) {\n    if (a.value.content !== b.value.content) {\n      return false;\n    }\n  } else {\n    // directive\n    var exp = a.exp;\n    var branchExp = b.exp;\n\n    if (exp.type !== branchExp.type) {\n      return false;\n    }\n\n    if (exp.type !== 4\n    /* SIMPLE_EXPRESSION */\n    || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getParentCondition(node) {\n  while (true) {\n    if (node.type === 19\n    /* JS_CONDITIONAL_EXPRESSION */\n    ) {\n      if (node.alternate.type === 19\n      /* JS_CONDITIONAL_EXPRESSION */\n      ) {\n        node = node.alternate;\n      } else {\n        return node;\n      }\n    } else if (node.type === 20\n    /* JS_CACHE_EXPRESSION */\n    ) {\n      node = node.value;\n    }\n  }\n}\n\nvar transformFor = createStructuralDirectiveTransform('for', function (node, dir, context) {\n  var helper = context.helper,\n      removeHelper = context.removeHelper;\n  return processFor(node, dir, context, function (forNode) {\n    // create the loop render function expression now, and add the\n    // iterator on exit after all children have been traversed\n    var renderExp = createCallExpression(helper(RENDER_LIST), [forNode.source]);\n    var memo = findDir(node, 'memo');\n    var keyProp = findProp(node, \"key\");\n    var keyExp = keyProp && (keyProp.type === 6\n    /* ATTRIBUTE */\n    ? createSimpleExpression(keyProp.value.content, true) : keyProp.exp);\n    var keyProperty = keyProp ? createObjectProperty(\"key\", keyExp) : null;\n    var isStableFragment = forNode.source.type === 4\n    /* SIMPLE_EXPRESSION */\n    && forNode.source.constType > 0\n    /* NOT_CONSTANT */\n    ;\n    var fragmentFlag = isStableFragment ? 64\n    /* STABLE_FRAGMENT */\n    : keyProp ? 128\n    /* KEYED_FRAGMENT */\n    : 256\n    /* UNKEYED_FRAGMENT */\n    ;\n    forNode.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, renderExp, fragmentFlag + (process.env.NODE_ENV !== 'production' ? \" /* \".concat(PatchFlagNames[fragmentFlag], \" */\") : \"\"), undefined, undefined, true\n    /* isBlock */\n    , !isStableFragment\n    /* disableTracking */\n    , false\n    /* isComponent */\n    , node.loc);\n    return function () {\n      // finish the codegen now that all children have been traversed\n      var childBlock;\n      var isTemplate = isTemplateNode(node);\n      var children = forNode.children; // check <template v-for> key placement\n\n      if ((process.env.NODE_ENV !== 'production' || !true) && isTemplate) {\n        node.children.some(function (c) {\n          if (c.type === 1\n          /* ELEMENT */\n          ) {\n            var key = findProp(c, 'key');\n\n            if (key) {\n              context.onError(createCompilerError(33\n              /* X_V_FOR_TEMPLATE_KEY_PLACEMENT */\n              , key.loc));\n              return true;\n            }\n          }\n        });\n      }\n\n      var needFragmentWrapper = children.length !== 1 || children[0].type !== 1\n      /* ELEMENT */\n      ;\n      var slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] // api-extractor somehow fails to infer this\n      : null;\n\n      if (slotOutlet) {\n        // <slot v-for=\"...\"> or <template v-for=\"...\"><slot/></template>\n        childBlock = slotOutlet.codegenNode;\n\n        if (isTemplate && keyProperty) {\n          // <template v-for=\"...\" :key=\"...\"><slot/></template>\n          // we need to inject the key to the renderSlot() call.\n          // the props for renderSlot is passed as the 3rd argument.\n          injectProp(childBlock, keyProperty, context);\n        }\n      } else if (needFragmentWrapper) {\n        // <template v-for=\"...\"> with text or multi-elements\n        // should generate a fragment block for each loop\n        childBlock = createVNodeCall(context, helper(FRAGMENT), keyProperty ? createObjectExpression([keyProperty]) : undefined, node.children, 64\n        /* STABLE_FRAGMENT */\n        + (process.env.NODE_ENV !== 'production' ? \" /* \".concat(PatchFlagNames[64\n        /* STABLE_FRAGMENT */\n        ], \" */\") : \"\"), undefined, undefined, true, undefined, false\n        /* isComponent */\n        );\n      } else {\n        // Normal element v-for. Directly use the child's codegenNode\n        // but mark it as a block.\n        childBlock = children[0].codegenNode;\n\n        if (isTemplate && keyProperty) {\n          injectProp(childBlock, keyProperty, context);\n        }\n\n        if (childBlock.isBlock !== !isStableFragment) {\n          if (childBlock.isBlock) {\n            // switch from block to vnode\n            removeHelper(OPEN_BLOCK);\n            removeHelper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));\n          } else {\n            // switch from vnode to block\n            removeHelper(getVNodeHelper(context.inSSR, childBlock.isComponent));\n          }\n        }\n\n        childBlock.isBlock = !isStableFragment;\n\n        if (childBlock.isBlock) {\n          helper(OPEN_BLOCK);\n          helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));\n        } else {\n          helper(getVNodeHelper(context.inSSR, childBlock.isComponent));\n        }\n      }\n\n      if (memo) {\n        var loop = createFunctionExpression(createForLoopParams(forNode.parseResult, [createSimpleExpression(\"_cached\")]));\n        loop.body = createBlockStatement([createCompoundExpression([\"const _memo = (\", memo.exp, \")\"]), createCompoundExpression([\"if (_cached\"].concat(_toConsumableArray(keyExp ? [\" && _cached.key === \", keyExp] : []), [\" && \".concat(context.helperString(IS_MEMO_SAME), \"(_cached, _memo)) return _cached\")])), createCompoundExpression([\"const _item = \", childBlock]), createSimpleExpression(\"_item.memo = _memo\"), createSimpleExpression(\"return _item\")]);\n        renderExp.arguments.push(loop, createSimpleExpression(\"_cache\"), createSimpleExpression(String(context.cached++)));\n      } else {\n        renderExp.arguments.push(createFunctionExpression(createForLoopParams(forNode.parseResult), childBlock, true\n        /* force newline */\n        ));\n      }\n    };\n  });\n}); // target-agnostic transform used for both Client and SSR\n\nfunction processFor(node, dir, context, processCodegen) {\n  if (!dir.exp) {\n    context.onError(createCompilerError(31\n    /* X_V_FOR_NO_EXPRESSION */\n    , dir.loc));\n    return;\n  }\n\n  var parseResult = parseForExpression( // can only be simple expression because vFor transform is applied\n  // before expression transform.\n  dir.exp, context);\n\n  if (!parseResult) {\n    context.onError(createCompilerError(32\n    /* X_V_FOR_MALFORMED_EXPRESSION */\n    , dir.loc));\n    return;\n  }\n\n  var addIdentifiers = context.addIdentifiers,\n      removeIdentifiers = context.removeIdentifiers,\n      scopes = context.scopes;\n  var source = parseResult.source,\n      value = parseResult.value,\n      key = parseResult.key,\n      index = parseResult.index;\n  var forNode = {\n    type: 11\n    /* FOR */\n    ,\n    loc: dir.loc,\n    source: source,\n    valueAlias: value,\n    keyAlias: key,\n    objectIndexAlias: index,\n    parseResult: parseResult,\n    children: isTemplateNode(node) ? node.children : [node]\n  };\n  context.replaceNode(forNode); // bookkeeping\n\n  scopes.vFor++;\n  var onExit = processCodegen && processCodegen(forNode);\n  return function () {\n    scopes.vFor--;\n    if (onExit) onExit();\n  };\n}\n\nvar forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/; // This regex doesn't cover the case if key or index aliases have destructuring,\n// but those do not make sense in the first place, so this works in practice.\n\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\n\nfunction parseForExpression(input, context) {\n  var loc = input.loc;\n  var exp = input.content;\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) return;\n\n  var _inMatch = _slicedToArray(inMatch, 3),\n      LHS = _inMatch[1],\n      RHS = _inMatch[2];\n\n  var result = {\n    source: createAliasExpression(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),\n    value: undefined,\n    key: undefined,\n    index: undefined\n  };\n\n  if (process.env.NODE_ENV !== 'production' && true) {\n    validateBrowserExpression(result.source, context);\n  }\n\n  var valueContent = LHS.trim().replace(stripParensRE, '').trim();\n  var trimmedOffset = LHS.indexOf(valueContent);\n  var iteratorMatch = valueContent.match(forIteratorRE);\n\n  if (iteratorMatch) {\n    valueContent = valueContent.replace(forIteratorRE, '').trim();\n    var keyContent = iteratorMatch[1].trim();\n    var keyOffset;\n\n    if (keyContent) {\n      keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);\n      result.key = createAliasExpression(loc, keyContent, keyOffset);\n\n      if (process.env.NODE_ENV !== 'production' && true) {\n        validateBrowserExpression(result.key, context, true);\n      }\n    }\n\n    if (iteratorMatch[2]) {\n      var indexContent = iteratorMatch[2].trim();\n\n      if (indexContent) {\n        result.index = createAliasExpression(loc, indexContent, exp.indexOf(indexContent, result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length));\n\n        if (process.env.NODE_ENV !== 'production' && true) {\n          validateBrowserExpression(result.index, context, true);\n        }\n      }\n    }\n  }\n\n  if (valueContent) {\n    result.value = createAliasExpression(loc, valueContent, trimmedOffset);\n\n    if (process.env.NODE_ENV !== 'production' && true) {\n      validateBrowserExpression(result.value, context, true);\n    }\n  }\n\n  return result;\n}\n\nfunction createAliasExpression(range, content, offset) {\n  return createSimpleExpression(content, false, getInnerRange(range, offset, content.length));\n}\n\nfunction createForLoopParams(_ref6) {\n  var value = _ref6.value,\n      key = _ref6.key,\n      index = _ref6.index;\n  var memoArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return createParamsList([value, key, index].concat(_toConsumableArray(memoArgs)));\n}\n\nfunction createParamsList(args) {\n  var i = args.length;\n\n  while (i--) {\n    if (args[i]) break;\n  }\n\n  return args.slice(0, i + 1).map(function (arg, i) {\n    return arg || createSimpleExpression(\"_\".repeat(i + 1), false);\n  });\n}\n\nvar defaultFallback = createSimpleExpression(\"undefined\", false); // A NodeTransform that:\n// 1. Tracks scope identifiers for scoped slots so that they don't get prefixed\n//    by transformExpression. This is only applied in non-browser builds with\n//    { prefixIdentifiers: true }.\n// 2. Track v-slot depths so that we know a slot is inside another slot.\n//    Note the exit callback is executed before buildSlots() on the same node,\n//    so only nested slots see positive numbers.\n\nvar trackSlotScopes = function trackSlotScopes(node, context) {\n  if (node.type === 1\n  /* ELEMENT */\n  && (node.tagType === 1\n  /* COMPONENT */\n  || node.tagType === 3\n  /* TEMPLATE */\n  )) {\n    // We are only checking non-empty v-slot here\n    // since we only care about slots that introduce scope variables.\n    var vSlot = findDir(node, 'slot');\n\n    if (vSlot) {\n      vSlot.exp;\n      context.scopes.vSlot++;\n      return function () {\n        context.scopes.vSlot--;\n      };\n    }\n  }\n}; // A NodeTransform that tracks scope identifiers for scoped slots with v-for.\n// This transform is only applied in non-browser builds with { prefixIdentifiers: true }\n\n\nvar trackVForSlotScopes = function trackVForSlotScopes(node, context) {\n  var vFor;\n\n  if (isTemplateNode(node) && node.props.some(isVSlot) && (vFor = findDir(node, 'for'))) {\n    var result = vFor.parseResult = parseForExpression(vFor.exp, context);\n\n    if (result) {\n      var value = result.value,\n          key = result.key,\n          index = result.index;\n      var addIdentifiers = context.addIdentifiers,\n          removeIdentifiers = context.removeIdentifiers;\n      value && addIdentifiers(value);\n      key && addIdentifiers(key);\n      index && addIdentifiers(index);\n      return function () {\n        value && removeIdentifiers(value);\n        key && removeIdentifiers(key);\n        index && removeIdentifiers(index);\n      };\n    }\n  }\n};\n\nvar buildClientSlotFn = function buildClientSlotFn(props, children, loc) {\n  return createFunctionExpression(props, children, false\n  /* newline */\n  , true\n  /* isSlot */\n  , children.length ? children[0].loc : loc);\n}; // Instead of being a DirectiveTransform, v-slot processing is called during\n// transformElement to build the slots object for a component.\n\n\nfunction buildSlots(node, context) {\n  var buildSlotFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : buildClientSlotFn;\n  context.helper(WITH_CTX);\n  var children = node.children,\n      loc = node.loc;\n  var slotsProperties = [];\n  var dynamicSlots = []; // If the slot is inside a v-for or another v-slot, force it to be dynamic\n  // since it likely uses a scope variable.\n\n  var hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0; // 1. Check for slot with slotProps on component itself.\n  //    <Comp v-slot=\"{ prop }\"/>\n\n  var onComponentSlot = findDir(node, 'slot', true);\n\n  if (onComponentSlot) {\n    var arg = onComponentSlot.arg,\n        exp = onComponentSlot.exp;\n\n    if (arg && !isStaticExp(arg)) {\n      hasDynamicSlots = true;\n    }\n\n    slotsProperties.push(createObjectProperty(arg || createSimpleExpression('default', true), buildSlotFn(exp, children, loc)));\n  } // 2. Iterate through children and check for template slots\n  //    <template v-slot:foo=\"{ prop }\">\n\n\n  var hasTemplateSlots = false;\n  var hasNamedDefaultSlot = false;\n  var implicitDefaultChildren = [];\n  var seenSlotNames = new Set();\n\n  for (var i = 0; i < children.length; i++) {\n    var slotElement = children[i];\n    var slotDir = void 0;\n\n    if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, 'slot', true))) {\n      // not a <template v-slot>, skip.\n      if (slotElement.type !== 3\n      /* COMMENT */\n      ) {\n        implicitDefaultChildren.push(slotElement);\n      }\n\n      continue;\n    }\n\n    if (onComponentSlot) {\n      // already has on-component slot - this is incorrect usage.\n      context.onError(createCompilerError(37\n      /* X_V_SLOT_MIXED_SLOT_USAGE */\n      , slotDir.loc));\n      break;\n    }\n\n    hasTemplateSlots = true;\n    var slotChildren = slotElement.children,\n        slotLoc = slotElement.loc;\n    var _slotDir = slotDir,\n        _slotDir$arg = _slotDir.arg,\n        slotName = _slotDir$arg === void 0 ? createSimpleExpression(\"default\", true) : _slotDir$arg,\n        slotProps = _slotDir.exp,\n        dirLoc = _slotDir.loc; // check if name is dynamic.\n\n    var staticSlotName = void 0;\n\n    if (isStaticExp(slotName)) {\n      staticSlotName = slotName ? slotName.content : \"default\";\n    } else {\n      hasDynamicSlots = true;\n    }\n\n    var slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc); // check if this slot is conditional (v-if/v-for)\n\n    var vIf = void 0;\n    var vElse = void 0;\n    var vFor = void 0;\n\n    if (vIf = findDir(slotElement, 'if')) {\n      hasDynamicSlots = true;\n      dynamicSlots.push(createConditionalExpression(vIf.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback));\n    } else if (vElse = findDir(slotElement, /^else(-if)?$/, true\n    /* allowEmpty */\n    )) {\n      // find adjacent v-if\n      var j = i;\n      var prev = void 0;\n\n      while (j--) {\n        prev = children[j];\n\n        if (prev.type !== 3\n        /* COMMENT */\n        ) {\n          break;\n        }\n      }\n\n      if (prev && isTemplateNode(prev) && findDir(prev, 'if')) {\n        // remove node\n        children.splice(i, 1);\n        i--; // attach this slot to previous conditional\n\n        var conditional = dynamicSlots[dynamicSlots.length - 1];\n\n        while (conditional.alternate.type === 19\n        /* JS_CONDITIONAL_EXPRESSION */\n        ) {\n          conditional = conditional.alternate;\n        }\n\n        conditional.alternate = vElse.exp ? createConditionalExpression(vElse.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback) : buildDynamicSlot(slotName, slotFunction);\n      } else {\n        context.onError(createCompilerError(30\n        /* X_V_ELSE_NO_ADJACENT_IF */\n        , vElse.loc));\n      }\n    } else if (vFor = findDir(slotElement, 'for')) {\n      hasDynamicSlots = true;\n      var parseResult = vFor.parseResult || parseForExpression(vFor.exp, context);\n\n      if (parseResult) {\n        // Render the dynamic slots as an array and add it to the createSlot()\n        // args. The runtime knows how to handle it appropriately.\n        dynamicSlots.push(createCallExpression(context.helper(RENDER_LIST), [parseResult.source, createFunctionExpression(createForLoopParams(parseResult), buildDynamicSlot(slotName, slotFunction), true\n        /* force newline */\n        )]));\n      } else {\n        context.onError(createCompilerError(32\n        /* X_V_FOR_MALFORMED_EXPRESSION */\n        , vFor.loc));\n      }\n    } else {\n      // check duplicate static names\n      if (staticSlotName) {\n        if (seenSlotNames.has(staticSlotName)) {\n          context.onError(createCompilerError(38\n          /* X_V_SLOT_DUPLICATE_SLOT_NAMES */\n          , dirLoc));\n          continue;\n        }\n\n        seenSlotNames.add(staticSlotName);\n\n        if (staticSlotName === 'default') {\n          hasNamedDefaultSlot = true;\n        }\n      }\n\n      slotsProperties.push(createObjectProperty(slotName, slotFunction));\n    }\n  }\n\n  if (!onComponentSlot) {\n    var buildDefaultSlotProperty = function buildDefaultSlotProperty(props, children) {\n      var fn = buildSlotFn(props, children, loc);\n\n      if (context.compatConfig) {\n        fn.isNonScopedSlot = true;\n      }\n\n      return createObjectProperty(\"default\", fn);\n    };\n\n    if (!hasTemplateSlots) {\n      // implicit default slot (on component)\n      slotsProperties.push(buildDefaultSlotProperty(undefined, children));\n    } else if (implicitDefaultChildren.length && // #3766\n    // with whitespace: 'preserve', whitespaces between slots will end up in\n    // implicitDefaultChildren. Ignore if all implicit children are whitespaces.\n    implicitDefaultChildren.some(function (node) {\n      return isNonWhitespaceContent(node);\n    })) {\n      // implicit default slot (mixed with named slots)\n      if (hasNamedDefaultSlot) {\n        context.onError(createCompilerError(39\n        /* X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN */\n        , implicitDefaultChildren[0].loc));\n      } else {\n        slotsProperties.push(buildDefaultSlotProperty(undefined, implicitDefaultChildren));\n      }\n    }\n  }\n\n  var slotFlag = hasDynamicSlots ? 2\n  /* DYNAMIC */\n  : hasForwardedSlots(node.children) ? 3\n  /* FORWARDED */\n  : 1\n  /* STABLE */\n  ;\n  var slots = createObjectExpression(slotsProperties.concat(createObjectProperty(\"_\", // 2 = compiled but dynamic = can skip normalization, but must run diff\n  // 1 = compiled and static = can skip normalization AND diff as optimized\n  createSimpleExpression(slotFlag + (process.env.NODE_ENV !== 'production' ? \" /* \".concat(slotFlagsText[slotFlag], \" */\") : \"\"), false))), loc);\n\n  if (dynamicSlots.length) {\n    slots = createCallExpression(context.helper(CREATE_SLOTS), [slots, createArrayExpression(dynamicSlots)]);\n  }\n\n  return {\n    slots: slots,\n    hasDynamicSlots: hasDynamicSlots\n  };\n}\n\nfunction buildDynamicSlot(name, fn) {\n  return createObjectExpression([createObjectProperty(\"name\", name), createObjectProperty(\"fn\", fn)]);\n}\n\nfunction hasForwardedSlots(children) {\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n\n    switch (child.type) {\n      case 1\n      /* ELEMENT */\n      :\n        if (child.tagType === 2\n        /* SLOT */\n        || hasForwardedSlots(child.children)) {\n          return true;\n        }\n\n        break;\n\n      case 9\n      /* IF */\n      :\n        if (hasForwardedSlots(child.branches)) return true;\n        break;\n\n      case 10\n      /* IF_BRANCH */\n      :\n      case 11\n      /* FOR */\n      :\n        if (hasForwardedSlots(child.children)) return true;\n        break;\n    }\n  }\n\n  return false;\n}\n\nfunction isNonWhitespaceContent(node) {\n  if (node.type !== 2\n  /* TEXT */\n  && node.type !== 12\n  /* TEXT_CALL */\n  ) return true;\n  return node.type === 2\n  /* TEXT */\n  ? !!node.content.trim() : isNonWhitespaceContent(node.content);\n} // some directive transforms (e.g. v-model) may return a symbol for runtime\n// import, which should be used instead of a resolveDirective call.\n\n\nvar directiveImportMap = new WeakMap(); // generate a JavaScript AST for this element's codegen\n\nvar transformElement = function transformElement(node, context) {\n  // perform the work on exit, after all child expressions have been\n  // processed and merged.\n  return function postTransformElement() {\n    node = context.currentNode;\n\n    if (!(node.type === 1\n    /* ELEMENT */\n    && (node.tagType === 0\n    /* ELEMENT */\n    || node.tagType === 1\n    /* COMPONENT */\n    ))) {\n      return;\n    }\n\n    var _node3 = node,\n        tag = _node3.tag,\n        props = _node3.props;\n    var isComponent = node.tagType === 1\n    /* COMPONENT */\n    ; // The goal of the transform is to create a codegenNode implementing the\n    // VNodeCall interface.\n\n    var vnodeTag = isComponent ? resolveComponentType(node, context) : \"\\\"\".concat(tag, \"\\\"\");\n    var isDynamicComponent = isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;\n    var vnodeProps;\n    var vnodeChildren;\n    var vnodePatchFlag;\n    var patchFlag = 0;\n    var vnodeDynamicProps;\n    var dynamicPropNames;\n    var vnodeDirectives;\n    var shouldUseBlock = // dynamic component may resolve to plain elements\n    isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent && ( // <svg> and <foreignObject> must be forced into blocks so that block\n    // updates inside get proper isSVG flag at runtime. (#639, #643)\n    // This is technically web-specific, but splitting the logic out of core\n    // leads to too much unnecessary complexity.\n    tag === 'svg' || tag === 'foreignObject' || // #938: elements with dynamic keys should be forced into blocks\n    findProp(node, 'key', true)); // props\n\n    if (props.length > 0) {\n      var propsBuildResult = buildProps(node, context);\n      vnodeProps = propsBuildResult.props;\n      patchFlag = propsBuildResult.patchFlag;\n      dynamicPropNames = propsBuildResult.dynamicPropNames;\n      var directives = propsBuildResult.directives;\n      vnodeDirectives = directives && directives.length ? createArrayExpression(directives.map(function (dir) {\n        return buildDirectiveArgs(dir, context);\n      })) : undefined;\n    } // children\n\n\n    if (node.children.length > 0) {\n      if (vnodeTag === KEEP_ALIVE) {\n        // Although a built-in component, we compile KeepAlive with raw children\n        // instead of slot functions so that it can be used inside Transition\n        // or other Transition-wrapping HOCs.\n        // To ensure correct updates with block optimizations, we need to:\n        // 1. Force keep-alive into a block. This avoids its children being\n        //    collected by a parent block.\n        shouldUseBlock = true; // 2. Force keep-alive to always be updated, since it uses raw children.\n\n        patchFlag |= 1024\n        /* DYNAMIC_SLOTS */\n        ;\n\n        if (process.env.NODE_ENV !== 'production' && node.children.length > 1) {\n          context.onError(createCompilerError(45\n          /* X_KEEP_ALIVE_INVALID_CHILDREN */\n          , {\n            start: node.children[0].loc.start,\n            end: node.children[node.children.length - 1].loc.end,\n            source: ''\n          }));\n        }\n      }\n\n      var shouldBuildAsSlots = isComponent && // Teleport is not a real component and has dedicated runtime handling\n      vnodeTag !== TELEPORT && // explained above.\n      vnodeTag !== KEEP_ALIVE;\n\n      if (shouldBuildAsSlots) {\n        var _buildSlots = buildSlots(node, context),\n            slots = _buildSlots.slots,\n            hasDynamicSlots = _buildSlots.hasDynamicSlots;\n\n        vnodeChildren = slots;\n\n        if (hasDynamicSlots) {\n          patchFlag |= 1024\n          /* DYNAMIC_SLOTS */\n          ;\n        }\n      } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {\n        var child = node.children[0];\n        var type = child.type; // check for dynamic text children\n\n        var hasDynamicTextChild = type === 5\n        /* INTERPOLATION */\n        || type === 8\n        /* COMPOUND_EXPRESSION */\n        ;\n\n        if (hasDynamicTextChild && getConstantType(child, context) === 0\n        /* NOT_CONSTANT */\n        ) {\n          patchFlag |= 1\n          /* TEXT */\n          ;\n        } // pass directly if the only child is a text node\n        // (plain / interpolation / expression)\n\n\n        if (hasDynamicTextChild || type === 2\n        /* TEXT */\n        ) {\n          vnodeChildren = child;\n        } else {\n          vnodeChildren = node.children;\n        }\n      } else {\n        vnodeChildren = node.children;\n      }\n    } // patchFlag & dynamicPropNames\n\n\n    if (patchFlag !== 0) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (patchFlag < 0) {\n          // special flags (negative and mutually exclusive)\n          vnodePatchFlag = patchFlag + \" /* \".concat(PatchFlagNames[patchFlag], \" */\");\n        } else {\n          // bitwise flags\n          var flagNames = Object.keys(PatchFlagNames).map(Number).filter(function (n) {\n            return n > 0 && patchFlag & n;\n          }).map(function (n) {\n            return PatchFlagNames[n];\n          }).join(\", \");\n          vnodePatchFlag = patchFlag + \" /* \".concat(flagNames, \" */\");\n        }\n      } else {\n        vnodePatchFlag = String(patchFlag);\n      }\n\n      if (dynamicPropNames && dynamicPropNames.length) {\n        vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);\n      }\n    }\n\n    node.codegenNode = createVNodeCall(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false\n    /* disableTracking */\n    , isComponent, node.loc);\n  };\n};\n\nfunction resolveComponentType(node, context) {\n  var ssr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var tag = node.tag; // 1. dynamic component\n\n  var isExplicitDynamic = isComponentTag(tag);\n  var isProp = findProp(node, 'is');\n\n  if (isProp) {\n    if (isExplicitDynamic || isCompatEnabled(\"COMPILER_IS_ON_ELEMENT\"\n    /* COMPILER_IS_ON_ELEMENT */\n    , context)) {\n      var exp = isProp.type === 6\n      /* ATTRIBUTE */\n      ? isProp.value && createSimpleExpression(isProp.value.content, true) : isProp.exp;\n\n      if (exp) {\n        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [exp]);\n      }\n    } else if (isProp.type === 6\n    /* ATTRIBUTE */\n    && isProp.value.content.startsWith('vue:')) {\n      // <button is=\"vue:xxx\">\n      // if not <component>, only is value that starts with \"vue:\" will be\n      // treated as component by the parse phase and reach here, unless it's\n      // compat mode where all is values are considered components\n      tag = isProp.value.content.slice(4);\n    }\n  } // 1.5 v-is (TODO: Deprecate)\n\n\n  var isDir = !isExplicitDynamic && findDir(node, 'is');\n\n  if (isDir && isDir.exp) {\n    return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [isDir.exp]);\n  } // 2. built-in components (Teleport, Transition, KeepAlive, Suspense...)\n\n\n  var builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);\n\n  if (builtIn) {\n    // built-ins are simply fallthroughs / have special handling during ssr\n    // so we don't need to import their runtime equivalents\n    if (!ssr) context.helper(builtIn);\n    return builtIn;\n  } // 5. user component (resolve)\n\n\n  context.helper(RESOLVE_COMPONENT);\n  context.components.add(tag);\n  return toValidAssetId(tag, \"component\");\n}\n\nfunction buildProps(node, context) {\n  var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : node.props;\n  var ssr = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var tag = node.tag,\n      elementLoc = node.loc;\n  var isComponent = node.tagType === 1\n  /* COMPONENT */\n  ;\n  var properties = [];\n  var mergeArgs = [];\n  var runtimeDirectives = []; // patchFlag analysis\n\n  var patchFlag = 0;\n  var hasRef = false;\n  var hasClassBinding = false;\n  var hasStyleBinding = false;\n  var hasHydrationEventBinding = false;\n  var hasDynamicKeys = false;\n  var hasVnodeHook = false;\n  var dynamicPropNames = [];\n\n  var analyzePatchFlag = function analyzePatchFlag(_ref7) {\n    var key = _ref7.key,\n        value = _ref7.value;\n\n    if (isStaticExp(key)) {\n      var name = key.content;\n      var isEventHandler = isOn(name);\n\n      if (!isComponent && isEventHandler && // omit the flag for click handlers because hydration gives click\n      // dedicated fast path.\n      name.toLowerCase() !== 'onclick' && // omit v-model handlers\n      name !== 'onUpdate:modelValue' && // omit onVnodeXXX hooks\n      !isReservedProp(name)) {\n        hasHydrationEventBinding = true;\n      }\n\n      if (isEventHandler && isReservedProp(name)) {\n        hasVnodeHook = true;\n      }\n\n      if (value.type === 20\n      /* JS_CACHE_EXPRESSION */\n      || (value.type === 4\n      /* SIMPLE_EXPRESSION */\n      || value.type === 8\n      /* COMPOUND_EXPRESSION */\n      ) && getConstantType(value, context) > 0) {\n        // skip if the prop is a cached handler or has constant value\n        return;\n      }\n\n      if (name === 'ref') {\n        hasRef = true;\n      } else if (name === 'class') {\n        hasClassBinding = true;\n      } else if (name === 'style') {\n        hasStyleBinding = true;\n      } else if (name !== 'key' && !dynamicPropNames.includes(name)) {\n        dynamicPropNames.push(name);\n      } // treat the dynamic class and style binding of the component as dynamic props\n\n\n      if (isComponent && (name === 'class' || name === 'style') && !dynamicPropNames.includes(name)) {\n        dynamicPropNames.push(name);\n      }\n    } else {\n      hasDynamicKeys = true;\n    }\n  };\n\n  for (var i = 0; i < props.length; i++) {\n    // static attribute\n    var prop = props[i];\n\n    if (prop.type === 6\n    /* ATTRIBUTE */\n    ) {\n      var loc = prop.loc,\n          name = prop.name,\n          value = prop.value;\n      var valueNode = createSimpleExpression(value ? value.content : '', true, value ? value.loc : loc);\n\n      if (name === 'ref') {\n        hasRef = true;\n      } // skip is on <component>, or is=\"vue:xxx\"\n\n\n      if (name === 'is' && (isComponentTag(tag) || value && value.content.startsWith('vue:') || isCompatEnabled(\"COMPILER_IS_ON_ELEMENT\"\n      /* COMPILER_IS_ON_ELEMENT */\n      , context))) {\n        continue;\n      }\n\n      properties.push(createObjectProperty(createSimpleExpression(name, true, getInnerRange(loc, 0, name.length)), valueNode));\n    } else {\n      // directives\n      var _name = prop.name,\n          arg = prop.arg,\n          exp = prop.exp,\n          _loc2 = prop.loc;\n      var isVBind = _name === 'bind';\n      var isVOn = _name === 'on'; // skip v-slot - it is handled by its dedicated transform.\n\n      if (_name === 'slot') {\n        if (!isComponent) {\n          context.onError(createCompilerError(40\n          /* X_V_SLOT_MISPLACED */\n          , _loc2));\n        }\n\n        continue;\n      } // skip v-once/v-memo - they are handled by dedicated transforms.\n\n\n      if (_name === 'once' || _name === 'memo') {\n        continue;\n      } // skip v-is and :is on <component>\n\n\n      if (_name === 'is' || isVBind && isBindKey(arg, 'is') && (isComponentTag(tag) || isCompatEnabled(\"COMPILER_IS_ON_ELEMENT\"\n      /* COMPILER_IS_ON_ELEMENT */\n      , context))) {\n        continue;\n      } // skip v-on in SSR compilation\n\n\n      if (isVOn && ssr) {\n        continue;\n      } // special case for v-bind and v-on with no argument\n\n\n      if (!arg && (isVBind || isVOn)) {\n        hasDynamicKeys = true;\n\n        if (exp) {\n          if (properties.length) {\n            mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));\n            properties = [];\n          }\n\n          if (isVBind) {\n            {\n              // 2.x v-bind object order compat\n              if (process.env.NODE_ENV !== 'production') {\n                var hasOverridableKeys = mergeArgs.some(function (arg) {\n                  if (arg.type === 15\n                  /* JS_OBJECT_EXPRESSION */\n                  ) {\n                    return arg.properties.some(function (_ref8) {\n                      var key = _ref8.key;\n\n                      if (key.type !== 4\n                      /* SIMPLE_EXPRESSION */\n                      || !key.isStatic) {\n                        return true;\n                      }\n\n                      return key.content !== 'class' && key.content !== 'style' && !isOn(key.content);\n                    });\n                  } else {\n                    // dynamic expression\n                    return true;\n                  }\n                });\n\n                if (hasOverridableKeys) {\n                  checkCompatEnabled(\"COMPILER_V_BIND_OBJECT_ORDER\"\n                  /* COMPILER_V_BIND_OBJECT_ORDER */\n                  , context, _loc2);\n                }\n              }\n\n              if (isCompatEnabled(\"COMPILER_V_BIND_OBJECT_ORDER\"\n              /* COMPILER_V_BIND_OBJECT_ORDER */\n              , context)) {\n                mergeArgs.unshift(exp);\n                continue;\n              }\n            }\n            mergeArgs.push(exp);\n          } else {\n            // v-on=\"obj\" -> toHandlers(obj)\n            mergeArgs.push({\n              type: 14\n              /* JS_CALL_EXPRESSION */\n              ,\n              loc: _loc2,\n              callee: context.helper(TO_HANDLERS),\n              arguments: [exp]\n            });\n          }\n        } else {\n          context.onError(createCompilerError(isVBind ? 34\n          /* X_V_BIND_NO_EXPRESSION */\n          : 35\n          /* X_V_ON_NO_EXPRESSION */\n          , _loc2));\n        }\n\n        continue;\n      }\n\n      var directiveTransform = context.directiveTransforms[_name];\n\n      if (directiveTransform) {\n        var _properties;\n\n        // has built-in directive transform.\n        var _directiveTransform = directiveTransform(prop, node, context),\n            _props = _directiveTransform.props,\n            needRuntime = _directiveTransform.needRuntime;\n\n        !ssr && _props.forEach(analyzePatchFlag);\n\n        (_properties = properties).push.apply(_properties, _toConsumableArray(_props));\n\n        if (needRuntime) {\n          runtimeDirectives.push(prop);\n\n          if (isSymbol(needRuntime)) {\n            directiveImportMap.set(prop, needRuntime);\n          }\n        }\n      } else {\n        // no built-in transform, this is a user custom directive.\n        runtimeDirectives.push(prop);\n      }\n    }\n\n    if (prop.type === 6\n    /* ATTRIBUTE */\n    && prop.name === 'ref' && context.scopes.vFor > 0 && checkCompatEnabled(\"COMPILER_V_FOR_REF\"\n    /* COMPILER_V_FOR_REF */\n    , context, prop.loc)) {\n      properties.push(createObjectProperty(createSimpleExpression('refInFor', true), createSimpleExpression('true', false)));\n    }\n  }\n\n  var propsExpression = undefined; // has v-bind=\"object\" or v-on=\"object\", wrap with mergeProps\n\n  if (mergeArgs.length) {\n    if (properties.length) {\n      mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));\n    }\n\n    if (mergeArgs.length > 1) {\n      propsExpression = createCallExpression(context.helper(MERGE_PROPS), mergeArgs, elementLoc);\n    } else {\n      // single v-bind with nothing else - no need for a mergeProps call\n      propsExpression = mergeArgs[0];\n    }\n  } else if (properties.length) {\n    propsExpression = createObjectExpression(dedupeProperties(properties), elementLoc);\n  } // patchFlag analysis\n\n\n  if (hasDynamicKeys) {\n    patchFlag |= 16\n    /* FULL_PROPS */\n    ;\n  } else {\n    if (hasClassBinding && !isComponent) {\n      patchFlag |= 2\n      /* CLASS */\n      ;\n    }\n\n    if (hasStyleBinding && !isComponent) {\n      patchFlag |= 4\n      /* STYLE */\n      ;\n    }\n\n    if (dynamicPropNames.length) {\n      patchFlag |= 8\n      /* PROPS */\n      ;\n    }\n\n    if (hasHydrationEventBinding) {\n      patchFlag |= 32\n      /* HYDRATE_EVENTS */\n      ;\n    }\n  }\n\n  if ((patchFlag === 0 || patchFlag === 32\n  /* HYDRATE_EVENTS */\n  ) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {\n    patchFlag |= 512\n    /* NEED_PATCH */\n    ;\n  } // pre-normalize props, SSR is skipped for now\n\n\n  if (!context.inSSR && propsExpression) {\n    switch (propsExpression.type) {\n      case 15\n      /* JS_OBJECT_EXPRESSION */\n      :\n        // means that there is no v-bind,\n        // but still need to deal with dynamic key binding\n        var classKeyIndex = -1;\n        var styleKeyIndex = -1;\n        var hasDynamicKey = false;\n\n        for (var _i7 = 0; _i7 < propsExpression.properties.length; _i7++) {\n          var key = propsExpression.properties[_i7].key;\n\n          if (isStaticExp(key)) {\n            if (key.content === 'class') {\n              classKeyIndex = _i7;\n            } else if (key.content === 'style') {\n              styleKeyIndex = _i7;\n            }\n          } else if (!key.isHandlerKey) {\n            hasDynamicKey = true;\n          }\n        }\n\n        var classProp = propsExpression.properties[classKeyIndex];\n        var styleProp = propsExpression.properties[styleKeyIndex]; // no dynamic key\n\n        if (!hasDynamicKey) {\n          if (classProp && !isStaticExp(classProp.value)) {\n            classProp.value = createCallExpression(context.helper(NORMALIZE_CLASS), [classProp.value]);\n          }\n\n          if (styleProp && !isStaticExp(styleProp.value) && ( // the static style is compiled into an object,\n          // so use `hasStyleBinding` to ensure that it is a dynamic style binding\n          hasStyleBinding || // v-bind:style and style both exist,\n          // v-bind:style with static literal object\n          styleProp.value.type === 17\n          /* JS_ARRAY_EXPRESSION */\n          )) {\n            styleProp.value = createCallExpression(context.helper(NORMALIZE_STYLE), [styleProp.value]);\n          }\n        } else {\n          // dynamic key binding, wrap with `normalizeProps`\n          propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [propsExpression]);\n        }\n\n        break;\n\n      case 14\n      /* JS_CALL_EXPRESSION */\n      :\n        // mergeProps call, do nothing\n        break;\n\n      default:\n        // single v-bind\n        propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [propsExpression])]);\n        break;\n    }\n  }\n\n  return {\n    props: propsExpression,\n    directives: runtimeDirectives,\n    patchFlag: patchFlag,\n    dynamicPropNames: dynamicPropNames\n  };\n} // Dedupe props in an object literal.\n// Literal duplicated attributes would have been warned during the parse phase,\n// however, it's possible to encounter duplicated `onXXX` handlers with different\n// modifiers. We also need to merge static and dynamic class / style attributes.\n// - onXXX handlers / style: merge into array\n// - class: merge into single expression with concatenation\n\n\nfunction dedupeProperties(properties) {\n  var knownProps = new Map();\n  var deduped = [];\n\n  for (var i = 0; i < properties.length; i++) {\n    var prop = properties[i]; // dynamic keys are always allowed\n\n    if (prop.key.type === 8\n    /* COMPOUND_EXPRESSION */\n    || !prop.key.isStatic) {\n      deduped.push(prop);\n      continue;\n    }\n\n    var name = prop.key.content;\n    var existing = knownProps.get(name);\n\n    if (existing) {\n      if (name === 'style' || name === 'class' || isOn(name)) {\n        mergeAsArray(existing, prop);\n      } // unexpected duplicate, should have emitted error during parse\n\n    } else {\n      knownProps.set(name, prop);\n      deduped.push(prop);\n    }\n  }\n\n  return deduped;\n}\n\nfunction mergeAsArray(existing, incoming) {\n  if (existing.value.type === 17\n  /* JS_ARRAY_EXPRESSION */\n  ) {\n    existing.value.elements.push(incoming.value);\n  } else {\n    existing.value = createArrayExpression([existing.value, incoming.value], existing.loc);\n  }\n}\n\nfunction buildDirectiveArgs(dir, context) {\n  var dirArgs = [];\n  var runtime = directiveImportMap.get(dir);\n\n  if (runtime) {\n    // built-in directive with runtime\n    dirArgs.push(context.helperString(runtime));\n  } else {\n    {\n      // inject statement for resolving directive\n      context.helper(RESOLVE_DIRECTIVE);\n      context.directives.add(dir.name);\n      dirArgs.push(toValidAssetId(dir.name, \"directive\"));\n    }\n  }\n\n  var loc = dir.loc;\n  if (dir.exp) dirArgs.push(dir.exp);\n\n  if (dir.arg) {\n    if (!dir.exp) {\n      dirArgs.push(\"void 0\");\n    }\n\n    dirArgs.push(dir.arg);\n  }\n\n  if (Object.keys(dir.modifiers).length) {\n    if (!dir.arg) {\n      if (!dir.exp) {\n        dirArgs.push(\"void 0\");\n      }\n\n      dirArgs.push(\"void 0\");\n    }\n\n    var trueExpression = createSimpleExpression(\"true\", false, loc);\n    dirArgs.push(createObjectExpression(dir.modifiers.map(function (modifier) {\n      return createObjectProperty(modifier, trueExpression);\n    }), loc));\n  }\n\n  return createArrayExpression(dirArgs, dir.loc);\n}\n\nfunction stringifyDynamicPropNames(props) {\n  var propsNamesString = \"[\";\n\n  for (var i = 0, l = props.length; i < l; i++) {\n    propsNamesString += JSON.stringify(props[i]);\n    if (i < l - 1) propsNamesString += ', ';\n  }\n\n  return propsNamesString + \"]\";\n}\n\nfunction isComponentTag(tag) {\n  return tag === 'component' || tag === 'Component';\n}\n\nprocess.env.NODE_ENV !== 'production' ? Object.freeze({}) : {};\nprocess.env.NODE_ENV !== 'production' ? Object.freeze([]) : [];\n\nvar cacheStringFunction = function cacheStringFunction(fn) {\n  var cache = Object.create(null);\n  return function (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n};\n\nvar camelizeRE = /-(\\w)/g;\n/**\r\n * @private\r\n */\n\nvar camelize = cacheStringFunction(function (str) {\n  return str.replace(camelizeRE, function (_, c) {\n    return c ? c.toUpperCase() : '';\n  });\n});\n\nvar transformSlotOutlet = function transformSlotOutlet(node, context) {\n  if (isSlotOutlet(node)) {\n    var children = node.children,\n        loc = node.loc;\n\n    var _processSlotOutlet = processSlotOutlet(node, context),\n        slotName = _processSlotOutlet.slotName,\n        slotProps = _processSlotOutlet.slotProps;\n\n    var slotArgs = [context.prefixIdentifiers ? \"_ctx.$slots\" : \"$slots\", slotName, '{}', 'undefined', 'true'];\n    var expectedLen = 2;\n\n    if (slotProps) {\n      slotArgs[2] = slotProps;\n      expectedLen = 3;\n    }\n\n    if (children.length) {\n      slotArgs[3] = createFunctionExpression([], children, false, false, loc);\n      expectedLen = 4;\n    }\n\n    if (context.scopeId && !context.slotted) {\n      expectedLen = 5;\n    }\n\n    slotArgs.splice(expectedLen); // remove unused arguments\n\n    node.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);\n  }\n};\n\nfunction processSlotOutlet(node, context) {\n  var slotName = \"\\\"default\\\"\";\n  var slotProps = undefined;\n  var nonNameProps = [];\n\n  for (var i = 0; i < node.props.length; i++) {\n    var p = node.props[i];\n\n    if (p.type === 6\n    /* ATTRIBUTE */\n    ) {\n      if (p.value) {\n        if (p.name === 'name') {\n          slotName = JSON.stringify(p.value.content);\n        } else {\n          p.name = camelize(p.name);\n          nonNameProps.push(p);\n        }\n      }\n    } else {\n      if (p.name === 'bind' && isBindKey(p.arg, 'name')) {\n        if (p.exp) slotName = p.exp;\n      } else {\n        if (p.name === 'bind' && p.arg && isStaticExp(p.arg)) {\n          p.arg.content = camelize(p.arg.content);\n        }\n\n        nonNameProps.push(p);\n      }\n    }\n  }\n\n  if (nonNameProps.length > 0) {\n    var _buildProps = buildProps(node, context, nonNameProps),\n        props = _buildProps.props,\n        directives = _buildProps.directives;\n\n    slotProps = props;\n\n    if (directives.length) {\n      context.onError(createCompilerError(36\n      /* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */\n      , directives[0].loc));\n    }\n  }\n\n  return {\n    slotName: slotName,\n    slotProps: slotProps\n  };\n}\n\nvar fnExpRE = /^\\s*([\\w$_]+|(async\\s*)?\\([^)]*?\\))\\s*=>|^\\s*(async\\s+)?function(?:\\s+[\\w$]+)?\\s*\\(/;\n\nvar transformOn = function transformOn(dir, node, context, augmentor) {\n  var loc = dir.loc,\n      modifiers = dir.modifiers,\n      arg = dir.arg;\n\n  if (!dir.exp && !modifiers.length) {\n    context.onError(createCompilerError(35\n    /* X_V_ON_NO_EXPRESSION */\n    , loc));\n  }\n\n  var eventName;\n\n  if (arg.type === 4\n  /* SIMPLE_EXPRESSION */\n  ) {\n    if (arg.isStatic) {\n      var rawName = arg.content; // for all event listeners, auto convert it to camelCase. See issue #2249\n\n      eventName = createSimpleExpression(toHandlerKey(camelize$1(rawName)), true, arg.loc);\n    } else {\n      // #2388\n      eventName = createCompoundExpression([\"\".concat(context.helperString(TO_HANDLER_KEY), \"(\"), arg, \")\"]);\n    }\n  } else {\n    // already a compound expression.\n    eventName = arg;\n    eventName.children.unshift(\"\".concat(context.helperString(TO_HANDLER_KEY), \"(\"));\n    eventName.children.push(\")\");\n  } // handler processing\n\n\n  var exp = dir.exp;\n\n  if (exp && !exp.content.trim()) {\n    exp = undefined;\n  }\n\n  var shouldCache = context.cacheHandlers && !exp && !context.inVOnce;\n\n  if (exp) {\n    var isMemberExp = isMemberExpression(exp.content);\n    var isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));\n    var hasMultipleStatements = exp.content.includes(\";\");\n\n    if (process.env.NODE_ENV !== 'production' && true) {\n      validateBrowserExpression(exp, context, false, hasMultipleStatements);\n    }\n\n    if (isInlineStatement || shouldCache && isMemberExp) {\n      // wrap inline statement in a function expression\n      exp = createCompoundExpression([\"\".concat(isInlineStatement ? \"$event\" : \"\".concat(\"\", \"(...args)\"), \" => \").concat(hasMultipleStatements ? \"{\" : \"(\"), exp, hasMultipleStatements ? \"}\" : \")\"]);\n    }\n  }\n\n  var ret = {\n    props: [createObjectProperty(eventName, exp || createSimpleExpression(\"() => {}\", false, loc))]\n  }; // apply extended compiler augmentor\n\n  if (augmentor) {\n    ret = augmentor(ret);\n  }\n\n  if (shouldCache) {\n    // cache handlers so that it's always the same handler being passed down.\n    // this avoids unnecessary re-renders when users use inline handlers on\n    // components.\n    ret.props[0].value = context.cache(ret.props[0].value);\n  } // mark the key as handler for props normalization check\n\n\n  ret.props.forEach(function (p) {\n    return p.key.isHandlerKey = true;\n  });\n  return ret;\n}; // v-bind without arg is handled directly in ./transformElements.ts due to it affecting\n// codegen for the entire props object. This transform here is only for v-bind\n// *with* args.\n\n\nvar transformBind = function transformBind(dir, _node, context) {\n  var exp = dir.exp,\n      modifiers = dir.modifiers,\n      loc = dir.loc;\n  var arg = dir.arg;\n\n  if (arg.type !== 4\n  /* SIMPLE_EXPRESSION */\n  ) {\n    arg.children.unshift(\"(\");\n    arg.children.push(\") || \\\"\\\"\");\n  } else if (!arg.isStatic) {\n    arg.content = \"\".concat(arg.content, \" || \\\"\\\"\");\n  } // .sync is replaced by v-model:arg\n\n\n  if (modifiers.includes('camel')) {\n    if (arg.type === 4\n    /* SIMPLE_EXPRESSION */\n    ) {\n      if (arg.isStatic) {\n        arg.content = camelize$1(arg.content);\n      } else {\n        arg.content = \"\".concat(context.helperString(CAMELIZE), \"(\").concat(arg.content, \")\");\n      }\n    } else {\n      arg.children.unshift(\"\".concat(context.helperString(CAMELIZE), \"(\"));\n      arg.children.push(\")\");\n    }\n  }\n\n  if (!context.inSSR) {\n    if (modifiers.includes('prop')) {\n      injectPrefix(arg, '.');\n    }\n\n    if (modifiers.includes('attr')) {\n      injectPrefix(arg, '^');\n    }\n  }\n\n  if (!exp || exp.type === 4\n  /* SIMPLE_EXPRESSION */\n  && !exp.content.trim()) {\n    context.onError(createCompilerError(34\n    /* X_V_BIND_NO_EXPRESSION */\n    , loc));\n    return {\n      props: [createObjectProperty(arg, createSimpleExpression('', true, loc))]\n    };\n  }\n\n  return {\n    props: [createObjectProperty(arg, exp)]\n  };\n};\n\nvar injectPrefix = function injectPrefix(arg, prefix) {\n  if (arg.type === 4\n  /* SIMPLE_EXPRESSION */\n  ) {\n    if (arg.isStatic) {\n      arg.content = prefix + arg.content;\n    } else {\n      arg.content = \"`\".concat(prefix, \"${\").concat(arg.content, \"}`\");\n    }\n  } else {\n    arg.children.unshift(\"'\".concat(prefix, \"' + (\"));\n    arg.children.push(\")\");\n  }\n}; // Merge adjacent text nodes and expressions into a single expression\n// e.g. <div>abc {{ d }} {{ e }}</div> should have a single expression node as child.\n\n\nvar transformText = function transformText(node, context) {\n  if (node.type === 0\n  /* ROOT */\n  || node.type === 1\n  /* ELEMENT */\n  || node.type === 11\n  /* FOR */\n  || node.type === 10\n  /* IF_BRANCH */\n  ) {\n    // perform the transform on node exit so that all expressions have already\n    // been processed.\n    return function () {\n      var children = node.children;\n      var currentContainer = undefined;\n      var hasText = false;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n\n        if (isText(child)) {\n          hasText = true;\n\n          for (var j = i + 1; j < children.length; j++) {\n            var next = children[j];\n\n            if (isText(next)) {\n              if (!currentContainer) {\n                currentContainer = children[i] = {\n                  type: 8\n                  /* COMPOUND_EXPRESSION */\n                  ,\n                  loc: child.loc,\n                  children: [child]\n                };\n              } // merge adjacent text node into current\n\n\n              currentContainer.children.push(\" + \", next);\n              children.splice(j, 1);\n              j--;\n            } else {\n              currentContainer = undefined;\n              break;\n            }\n          }\n        }\n      }\n\n      if (!hasText || // if this is a plain element with a single text child, leave it\n      // as-is since the runtime has dedicated fast path for this by directly\n      // setting textContent of the element.\n      // for component root it's always normalized anyway.\n      children.length === 1 && (node.type === 0\n      /* ROOT */\n      || node.type === 1\n      /* ELEMENT */\n      && node.tagType === 0\n      /* ELEMENT */\n      && // #3756\n      // custom directives can potentially add DOM elements arbitrarily,\n      // we need to avoid setting textContent of the element at runtime\n      // to avoid accidentally overwriting the DOM elements added\n      // by the user through custom directives.\n      !node.props.find(function (p) {\n        return p.type === 7\n        /* DIRECTIVE */\n        && !context.directiveTransforms[p.name];\n      }) && // in compat mode, <template> tags with no special directives\n      // will be rendered as a fragment so its children must be\n      // converted into vnodes.\n      !(node.tag === 'template'))) {\n        return;\n      } // pre-convert text nodes into createTextVNode(text) calls to avoid\n      // runtime normalization.\n\n\n      for (var _i8 = 0; _i8 < children.length; _i8++) {\n        var _child = children[_i8];\n\n        if (isText(_child) || _child.type === 8\n        /* COMPOUND_EXPRESSION */\n        ) {\n          var callArgs = []; // createTextVNode defaults to single whitespace, so if it is a\n          // single space the code could be an empty call to save bytes.\n\n          if (_child.type !== 2\n          /* TEXT */\n          || _child.content !== ' ') {\n            callArgs.push(_child);\n          } // mark dynamic text with flag so it gets patched inside a block\n\n\n          if (!context.ssr && getConstantType(_child, context) === 0\n          /* NOT_CONSTANT */\n          ) {\n            callArgs.push(1\n            /* TEXT */\n            + (process.env.NODE_ENV !== 'production' ? \" /* \".concat(PatchFlagNames[1\n            /* TEXT */\n            ], \" */\") : \"\"));\n          }\n\n          children[_i8] = {\n            type: 12\n            /* TEXT_CALL */\n            ,\n            content: _child,\n            loc: _child.loc,\n            codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)\n          };\n        }\n      }\n    };\n  }\n};\n\nvar seen = new WeakSet();\n\nvar transformOnce = function transformOnce(node, context) {\n  if (node.type === 1\n  /* ELEMENT */\n  && findDir(node, 'once', true)) {\n    if (seen.has(node) || context.inVOnce) {\n      return;\n    }\n\n    seen.add(node);\n    context.inVOnce = true;\n    context.helper(SET_BLOCK_TRACKING);\n    return function () {\n      context.inVOnce = false;\n      var cur = context.currentNode;\n\n      if (cur.codegenNode) {\n        cur.codegenNode = context.cache(cur.codegenNode, true\n        /* isVNode */\n        );\n      }\n    };\n  }\n};\n\nvar transformModel = function transformModel(dir, node, context) {\n  var exp = dir.exp,\n      arg = dir.arg;\n\n  if (!exp) {\n    context.onError(createCompilerError(41\n    /* X_V_MODEL_NO_EXPRESSION */\n    , dir.loc));\n    return createTransformProps();\n  }\n\n  var rawExp = exp.loc.source;\n  var expString = exp.type === 4\n  /* SIMPLE_EXPRESSION */\n  ? exp.content : rawExp; // im SFC <script setup> inline mode, the exp may have been transformed into\n  // _unref(exp)\n\n  context.bindingMetadata[rawExp];\n  var maybeRef = !true\n  /* SETUP_CONST */\n  ;\n\n  if (!expString.trim() || !isMemberExpression(expString) && !maybeRef) {\n    context.onError(createCompilerError(42\n    /* X_V_MODEL_MALFORMED_EXPRESSION */\n    , exp.loc));\n    return createTransformProps();\n  }\n\n  var propName = arg ? arg : createSimpleExpression('modelValue', true);\n  var eventName = arg ? isStaticExp(arg) ? \"onUpdate:\".concat(arg.content) : createCompoundExpression(['\"onUpdate:\" + ', arg]) : \"onUpdate:modelValue\";\n  var assignmentExp;\n  var eventArg = context.isTS ? \"($event: any)\" : \"$event\";\n  {\n    assignmentExp = createCompoundExpression([\"\".concat(eventArg, \" => ((\"), exp, \") = $event)\"]);\n  }\n  var props = [// modelValue: foo\n  createObjectProperty(propName, dir.exp), // \"onUpdate:modelValue\": $event => (foo = $event)\n  createObjectProperty(eventName, assignmentExp)]; // modelModifiers: { foo: true, \"bar-baz\": true }\n\n  if (dir.modifiers.length && node.tagType === 1\n  /* COMPONENT */\n  ) {\n    var modifiers = dir.modifiers.map(function (m) {\n      return (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + \": true\";\n    }).join(\", \");\n    var modifiersKey = arg ? isStaticExp(arg) ? \"\".concat(arg.content, \"Modifiers\") : createCompoundExpression([arg, ' + \"Modifiers\"']) : \"modelModifiers\";\n    props.push(createObjectProperty(modifiersKey, createSimpleExpression(\"{ \".concat(modifiers, \" }\"), false, dir.loc, 2\n    /* CAN_HOIST */\n    )));\n  }\n\n  return createTransformProps(props);\n};\n\nfunction createTransformProps() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return {\n    props: props\n  };\n}\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nvar transformFilter = function transformFilter(node, context) {\n  if (!isCompatEnabled(\"COMPILER_FILTER\"\n  /* COMPILER_FILTERS */\n  , context)) {\n    return;\n  }\n\n  if (node.type === 5\n  /* INTERPOLATION */\n  ) {\n    // filter rewrite is applied before expression transform so only\n    // simple expressions are possible at this stage\n    rewriteFilter(node.content, context);\n  }\n\n  if (node.type === 1\n  /* ELEMENT */\n  ) {\n    node.props.forEach(function (prop) {\n      if (prop.type === 7\n      /* DIRECTIVE */\n      && prop.name !== 'for' && prop.exp) {\n        rewriteFilter(prop.exp, context);\n      }\n    });\n  }\n};\n\nfunction rewriteFilter(node, context) {\n  if (node.type === 4\n  /* SIMPLE_EXPRESSION */\n  ) {\n    parseFilter(node, context);\n  } else {\n    for (var i = 0; i < node.children.length; i++) {\n      var child = node.children[i];\n      if (_typeof(child) !== 'object') continue;\n\n      if (child.type === 4\n      /* SIMPLE_EXPRESSION */\n      ) {\n        parseFilter(child, context);\n      } else if (child.type === 8\n      /* COMPOUND_EXPRESSION */\n      ) {\n        rewriteFilter(node, context);\n      } else if (child.type === 5\n      /* INTERPOLATION */\n      ) {\n        rewriteFilter(child.content, context);\n      }\n    }\n  }\n}\n\nfunction parseFilter(node, context) {\n  var exp = node.content;\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c,\n      prev,\n      i,\n      expression,\n      filters = [];\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5c) inSingle = false;\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5c) inDouble = false;\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5c) inTemplateString = false;\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5c) inRegex = false;\n    } else if (c === 0x7c && // pipe\n    exp.charCodeAt(i + 1) !== 0x7c && exp.charCodeAt(i - 1) !== 0x7c && !curly && !square && !paren) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22:\n          inDouble = true;\n          break;\n        // \"\n\n        case 0x27:\n          inSingle = true;\n          break;\n        // '\n\n        case 0x60:\n          inTemplateString = true;\n          break;\n        // `\n\n        case 0x28:\n          paren++;\n          break;\n        // (\n\n        case 0x29:\n          paren--;\n          break;\n        // )\n\n        case 0x5b:\n          square++;\n          break;\n        // [\n\n        case 0x5d:\n          square--;\n          break;\n        // ]\n\n        case 0x7b:\n          curly++;\n          break;\n        // {\n\n        case 0x7d:\n          curly--;\n          break;\n        // }\n      }\n\n      if (c === 0x2f) {\n        // /\n        var j = i - 1;\n        var p = void 0; // find first non-whitespace prev char\n\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') break;\n        }\n\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter() {\n    filters.push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters.length) {\n    process.env.NODE_ENV !== 'production' && warnDeprecation(\"COMPILER_FILTER\"\n    /* COMPILER_FILTERS */\n    , context, node.loc);\n\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i], context);\n    }\n\n    node.content = expression;\n  }\n}\n\nfunction wrapFilter(exp, filter, context) {\n  context.helper(RESOLVE_FILTER);\n  var i = filter.indexOf('(');\n\n  if (i < 0) {\n    context.filters.add(filter);\n    return \"\".concat(toValidAssetId(filter, 'filter'), \"(\").concat(exp, \")\");\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    context.filters.add(name);\n    return \"\".concat(toValidAssetId(name, 'filter'), \"(\").concat(exp).concat(args !== ')' ? ',' + args : args);\n  }\n}\n\nvar seen$1 = new WeakSet();\n\nvar transformMemo = function transformMemo(node, context) {\n  if (node.type === 1\n  /* ELEMENT */\n  ) {\n    var dir = findDir(node, 'memo');\n\n    if (!dir || seen$1.has(node)) {\n      return;\n    }\n\n    seen$1.add(node);\n    return function () {\n      var codegenNode = node.codegenNode || context.currentNode.codegenNode;\n\n      if (codegenNode && codegenNode.type === 13\n      /* VNODE_CALL */\n      ) {\n        // non-component sub tree should be turned into a block\n        if (node.tagType !== 1\n        /* COMPONENT */\n        ) {\n          makeBlock(codegenNode, context);\n        }\n\n        node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [dir.exp, createFunctionExpression(undefined, codegenNode), \"_cache\", String(context.cached++)]);\n      }\n    };\n  }\n};\n\nfunction getBaseTransformPreset(prefixIdentifiers) {\n  return [[transformOnce, transformIf, transformMemo, transformFor].concat([transformFilter], _toConsumableArray(process.env.NODE_ENV !== 'production' ? [transformExpression] : []), [transformSlotOutlet, transformElement, trackSlotScopes, transformText]), {\n    on: transformOn,\n    bind: transformBind,\n    model: transformModel\n  }];\n} // we name it `baseCompile` so that higher order compilers like\n// @vue/compiler-dom can export `compile` while re-exporting everything else.\n\n\nfunction baseCompile(template) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var onError = options.onError || defaultOnError;\n  var isModuleMode = options.mode === 'module';\n  /* istanbul ignore if */\n\n  {\n    if (options.prefixIdentifiers === true) {\n      onError(createCompilerError(46\n      /* X_PREFIX_ID_NOT_SUPPORTED */\n      ));\n    } else if (isModuleMode) {\n      onError(createCompilerError(47\n      /* X_MODULE_MODE_NOT_SUPPORTED */\n      ));\n    }\n  }\n  var prefixIdentifiers = !true;\n\n  if (options.cacheHandlers) {\n    onError(createCompilerError(48\n    /* X_CACHE_HANDLER_NOT_SUPPORTED */\n    ));\n  }\n\n  if (options.scopeId && !isModuleMode) {\n    onError(createCompilerError(49\n    /* X_SCOPE_ID_NOT_SUPPORTED */\n    ));\n  }\n\n  var ast = isString(template) ? baseParse(template, options) : template;\n\n  var _getBaseTransformPres = getBaseTransformPreset(),\n      _getBaseTransformPres2 = _slicedToArray(_getBaseTransformPres, 2),\n      nodeTransforms = _getBaseTransformPres2[0],\n      directiveTransforms = _getBaseTransformPres2[1];\n\n  transform(ast, extend({}, options, {\n    prefixIdentifiers: prefixIdentifiers,\n    nodeTransforms: [].concat(_toConsumableArray(nodeTransforms), _toConsumableArray(options.nodeTransforms || [])),\n    directiveTransforms: extend({}, directiveTransforms, options.directiveTransforms || {} // user transforms\n    )\n  }));\n  return generate(ast, extend({}, options, {\n    prefixIdentifiers: prefixIdentifiers\n  }));\n}\n\nvar noopDirectiveTransform = function noopDirectiveTransform() {\n  return {\n    props: []\n  };\n};\n\nexport { BASE_TRANSITION, CAMELIZE, CAPITALIZE, CREATE_BLOCK, CREATE_COMMENT, CREATE_ELEMENT_BLOCK, CREATE_ELEMENT_VNODE, CREATE_SLOTS, CREATE_STATIC, CREATE_TEXT, CREATE_VNODE, FRAGMENT, GUARD_REACTIVE_PROPS, IS_MEMO_SAME, IS_REF, KEEP_ALIVE, MERGE_PROPS, NORMALIZE_CLASS, NORMALIZE_PROPS, NORMALIZE_STYLE, OPEN_BLOCK, POP_SCOPE_ID, PUSH_SCOPE_ID, RENDER_LIST, RENDER_SLOT, RESOLVE_COMPONENT, RESOLVE_DIRECTIVE, RESOLVE_DYNAMIC_COMPONENT, RESOLVE_FILTER, SET_BLOCK_TRACKING, SUSPENSE, TELEPORT, TO_DISPLAY_STRING, TO_HANDLERS, TO_HANDLER_KEY, UNREF, WITH_CTX, WITH_DIRECTIVES, WITH_MEMO, advancePositionWithClone, advancePositionWithMutation, assert, baseCompile, baseParse, buildProps, buildSlots, checkCompatEnabled, createArrayExpression, createAssignmentExpression, createBlockStatement, createCacheExpression, createCallExpression, createCompilerError, createCompoundExpression, createConditionalExpression, createForLoopParams, createFunctionExpression, createIfStatement, createInterpolation, createObjectExpression, createObjectProperty, createReturnStatement, createRoot, createSequenceExpression, createSimpleExpression, createStructuralDirectiveTransform, createTemplateLiteral, createTransformContext, createVNodeCall, extractIdentifiers, findDir, findProp, generate, getBaseTransformPreset, getInnerRange, getMemoedVNodeCall, getVNodeBlockHelper, getVNodeHelper, hasDynamicKeyVBind, hasScopeRef, helperNameMap, injectProp, isBindKey, isBuiltInType, isCoreComponent, isFunctionType, isInDestructureAssignment, isMemberExpression, isMemberExpressionBrowser, isMemberExpressionNode, isReferencedIdentifier, isSimpleIdentifier, isSlotOutlet, isStaticExp, isStaticProperty, isStaticPropertyKey, isTemplateNode, isText, isVSlot, locStub, makeBlock, noopDirectiveTransform, processExpression, processFor, processIf, processSlotOutlet, registerRuntimeHelpers, resolveComponentType, toValidAssetId, trackSlotScopes, trackVForSlotScopes, transform, transformBind, transformElement, transformExpression, transformModel, transformOn, traverseNode, walkBlockDeclarations, walkFunctionParams, walkIdentifiers, warnDeprecation };","map":null,"metadata":{},"sourceType":"module"}