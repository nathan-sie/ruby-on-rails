{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, ref, h, cloneVNode } from 'vue';\nimport _Popper from '../../popper/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { getFirstValidNode } from '../../../utils/vnode.mjs';\nimport popperDefaultProps from '../../popper/src/use-popper/defaults.mjs';\nvar Tooltip = defineComponent({\n  name: \"ElTooltip\",\n  components: {\n    ElPopper: _Popper\n  },\n  props: _objectSpread(_objectSpread({}, popperDefaultProps), {}, {\n    manual: {\n      type: Boolean,\n      \"default\": false\n    },\n    modelValue: {\n      type: Boolean,\n      validator: function validator(val) {\n        return typeof val === \"boolean\";\n      },\n      \"default\": void 0\n    },\n    openDelay: {\n      type: Number,\n      \"default\": 0\n    },\n    visibleArrow: {\n      type: Boolean,\n      \"default\": true\n    },\n    tabindex: {\n      type: [String, Number],\n      \"default\": \"0\"\n    }\n  }),\n  emits: [UPDATE_MODEL_EVENT],\n  setup: function setup(props, ctx) {\n    if (props.manual && typeof props.modelValue === \"undefined\") {\n      throwError(\"[ElTooltip]\", \"You need to pass a v-model to el-tooltip when `manual` is true\");\n    }\n\n    var popper = ref(null);\n\n    var onUpdateVisible = function onUpdateVisible(val) {\n      ctx.emit(UPDATE_MODEL_EVENT, val);\n    };\n\n    var updatePopper = function updatePopper() {\n      return popper.value.update();\n    };\n\n    return {\n      popper: popper,\n      onUpdateVisible: onUpdateVisible,\n      updatePopper: updatePopper\n    };\n  },\n  render: function render() {\n    var _this = this;\n\n    var $slots = this.$slots,\n        content = this.content,\n        manual = this.manual,\n        openDelay = this.openDelay,\n        onUpdateVisible = this.onUpdateVisible,\n        showAfter = this.showAfter,\n        visibleArrow = this.visibleArrow,\n        modelValue = this.modelValue,\n        tabindex = this.tabindex;\n\n    var throwErrorTip = function throwErrorTip() {\n      throwError(\"[ElTooltip]\", \"you need to provide a valid default slot.\");\n    };\n\n    var popper = h(_Popper, _objectSpread(_objectSpread({}, Object.keys(popperDefaultProps).reduce(function (result, key) {\n      return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, key, _this[key]));\n    }, {})), {}, {\n      ref: \"popper\",\n      manualMode: manual,\n      showAfter: openDelay || showAfter,\n      showArrow: visibleArrow,\n      visible: modelValue,\n      \"onUpdate:visible\": onUpdateVisible\n    }), {\n      \"default\": function _default() {\n        return $slots.content ? $slots.content() : content;\n      },\n      trigger: function trigger() {\n        if ($slots[\"default\"]) {\n          var firstVnode = getFirstValidNode($slots[\"default\"](), 1);\n          if (!firstVnode) throwErrorTip();\n          return cloneVNode(firstVnode, {\n            tabindex: tabindex\n          }, true);\n        }\n\n        throwErrorTip();\n      }\n    });\n    return popper;\n  }\n});\nexport { Tooltip as default };","map":null,"metadata":{},"sourceType":"module"}