{"ast":null,"code":"import { getCurrentInstance, ref, watchEffect, computed, h } from 'vue';\nimport { debugWarn } from '../../../../utils/error.mjs';\nimport { cellForced, defaultRenderCell, treeCellPrefix } from '../config.mjs';\nimport { parseWidth, parseMinWidth } from '../util.mjs';\n\nfunction useRender(props, slots, owner) {\n  var instance = getCurrentInstance();\n  var columnId = ref(\"\");\n  var isSubColumn = ref(false);\n  var realAlign = ref();\n  var realHeaderAlign = ref();\n  watchEffect(function () {\n    realAlign.value = props.align ? \"is-\".concat(props.align) : null;\n    realAlign.value;\n  });\n  watchEffect(function () {\n    realHeaderAlign.value = props.headerAlign ? \"is-\".concat(props.headerAlign) : realAlign.value;\n    realHeaderAlign.value;\n  });\n  var columnOrTableParent = computed(function () {\n    var parent = instance.vnode.vParent || instance.parent;\n\n    while (parent && !parent.tableId && !parent.columnId) {\n      parent = parent.vnode.vParent || parent.parent;\n    }\n\n    return parent;\n  });\n  var realWidth = ref(parseWidth(props.width));\n  var realMinWidth = ref(parseMinWidth(props.minWidth));\n\n  var setColumnWidth = function setColumnWidth(column) {\n    if (realWidth.value) column.width = realWidth.value;\n\n    if (realMinWidth.value) {\n      column.minWidth = realMinWidth.value;\n    }\n\n    if (!column.minWidth) {\n      column.minWidth = 80;\n    }\n\n    column.realWidth = Number(column.width === void 0 ? column.minWidth : column.width);\n    return column;\n  };\n\n  var setColumnForcedProps = function setColumnForcedProps(column) {\n    var type = column.type;\n    var source = cellForced[type] || {};\n    Object.keys(source).forEach(function (prop) {\n      var value = source[prop];\n\n      if (value !== void 0) {\n        column[prop] = prop === \"className\" ? \"\".concat(column[prop], \" \").concat(value) : value;\n      }\n    });\n    return column;\n  };\n\n  var checkSubColumn = function checkSubColumn(children) {\n    if (children instanceof Array) {\n      children.forEach(function (child) {\n        return check(child);\n      });\n    } else {\n      check(children);\n    }\n\n    function check(item) {\n      var _a;\n\n      if (((_a = item == null ? void 0 : item.type) == null ? void 0 : _a.name) === \"ElTableColumn\") {\n        item.vParent = instance;\n      }\n    }\n  };\n\n  var setColumnRenders = function setColumnRenders(column) {\n    if (props.renderHeader) {\n      debugWarn(\"TableColumn\", \"Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.\");\n    } else if (column.type !== \"selection\") {\n      column.renderHeader = function (scope) {\n        instance.columnConfig.value[\"label\"];\n        var renderHeader = slots.header;\n        return renderHeader ? renderHeader(scope) : column.label;\n      };\n    }\n\n    var originRenderCell = column.renderCell;\n\n    if (column.type === \"expand\") {\n      column.renderCell = function (data) {\n        return h(\"div\", {\n          \"class\": \"cell\"\n        }, [originRenderCell(data)]);\n      };\n\n      owner.value.renderExpanded = function (data) {\n        return slots[\"default\"] ? slots[\"default\"](data) : slots[\"default\"];\n      };\n    } else {\n      originRenderCell = originRenderCell || defaultRenderCell;\n\n      column.renderCell = function (data) {\n        var children = null;\n\n        if (slots[\"default\"]) {\n          children = slots[\"default\"](data);\n        } else {\n          children = originRenderCell(data);\n        }\n\n        var prefix = treeCellPrefix(data);\n        var props2 = {\n          \"class\": \"cell\",\n          style: {}\n        };\n\n        if (column.showOverflowTooltip) {\n          props2[\"class\"] += \" el-tooltip\";\n          props2.style = {\n            width: \"\".concat((data.column.realWidth || Number(data.column.width)) - 1, \"px\")\n          };\n        }\n\n        checkSubColumn(children);\n        return h(\"div\", props2, [prefix, children]);\n      };\n    }\n\n    return column;\n  };\n\n  var getPropsData = function getPropsData() {\n    for (var _len = arguments.length, propsKey = new Array(_len), _key = 0; _key < _len; _key++) {\n      propsKey[_key] = arguments[_key];\n    }\n\n    return propsKey.reduce(function (prev, cur) {\n      if (Array.isArray(cur)) {\n        cur.forEach(function (key) {\n          prev[key] = props[key];\n        });\n      }\n\n      return prev;\n    }, {});\n  };\n\n  var getColumnElIndex = function getColumnElIndex(children, child) {\n    return [].indexOf.call(children, child);\n  };\n\n  return {\n    columnId: columnId,\n    realAlign: realAlign,\n    isSubColumn: isSubColumn,\n    realHeaderAlign: realHeaderAlign,\n    columnOrTableParent: columnOrTableParent,\n    setColumnWidth: setColumnWidth,\n    setColumnForcedProps: setColumnForcedProps,\n    setColumnRenders: setColumnRenders,\n    getPropsData: getPropsData,\n    getColumnElIndex: getColumnElIndex\n  };\n}\n\nexport { useRender as default };","map":null,"metadata":{},"sourceType":"module"}