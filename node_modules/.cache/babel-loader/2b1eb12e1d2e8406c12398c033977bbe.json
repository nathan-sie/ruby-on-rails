{"ast":null,"code":"import { defineComponent, ref, inject, computed, onMounted, onBeforeUnmount } from 'vue';\nimport { on, off } from '../../../utils/dom.mjs';\nimport { BAR_MAP, renderThumbStyle } from './util.mjs';\nvar script = defineComponent({\n  name: \"Bar\",\n  props: {\n    vertical: Boolean,\n    size: String,\n    move: Number,\n    ratio: Number,\n    always: Boolean\n  },\n  setup: function setup(props) {\n    var instance = ref(null);\n    var thumb = ref(null);\n    var scrollbar = inject(\"scrollbar\", {});\n    var wrap = inject(\"scrollbar-wrap\", {});\n    var bar = computed(function () {\n      return BAR_MAP[props.vertical ? \"vertical\" : \"horizontal\"];\n    });\n    var barStore = ref({});\n    var cursorDown = ref(null);\n    var cursorLeave = ref(null);\n    var visible = ref(false);\n    var onselectstartStore = null;\n    var offsetRatio = computed(function () {\n      return Math.pow(instance.value[bar.value.offset], 2) / wrap.value[bar.value.scrollSize] / props.ratio / thumb.value[bar.value.offset];\n    });\n\n    var clickThumbHandler = function clickThumbHandler(e) {\n      e.stopPropagation();\n\n      if (e.ctrlKey || [1, 2].includes(e.button)) {\n        return;\n      }\n\n      window.getSelection().removeAllRanges();\n      startDrag(e);\n      barStore.value[bar.value.axis] = e.currentTarget[bar.value.offset] - (e[bar.value.client] - e.currentTarget.getBoundingClientRect()[bar.value.direction]);\n    };\n\n    var clickTrackHandler = function clickTrackHandler(e) {\n      var offset = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);\n      var thumbHalf = thumb.value[bar.value.offset] / 2;\n      var thumbPositionPercentage = (offset - thumbHalf) * 100 * offsetRatio.value / instance.value[bar.value.offset];\n      wrap.value[bar.value.scroll] = thumbPositionPercentage * wrap.value[bar.value.scrollSize] / 100;\n    };\n\n    var startDrag = function startDrag(e) {\n      e.stopImmediatePropagation();\n      cursorDown.value = true;\n      on(document, \"mousemove\", mouseMoveDocumentHandler);\n      on(document, \"mouseup\", mouseUpDocumentHandler);\n      onselectstartStore = document.onselectstart;\n\n      document.onselectstart = function () {\n        return false;\n      };\n    };\n\n    var mouseMoveDocumentHandler = function mouseMoveDocumentHandler(e) {\n      if (cursorDown.value === false) return;\n      var prevPage = barStore.value[bar.value.axis];\n      if (!prevPage) return;\n      var offset = (instance.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;\n      var thumbClickPosition = thumb.value[bar.value.offset] - prevPage;\n      var thumbPositionPercentage = (offset - thumbClickPosition) * 100 * offsetRatio.value / instance.value[bar.value.offset];\n      wrap.value[bar.value.scroll] = thumbPositionPercentage * wrap.value[bar.value.scrollSize] / 100;\n    };\n\n    var mouseUpDocumentHandler = function mouseUpDocumentHandler() {\n      cursorDown.value = false;\n      barStore.value[bar.value.axis] = 0;\n      off(document, \"mousemove\", mouseMoveDocumentHandler);\n      off(document, \"mouseup\", mouseUpDocumentHandler);\n      document.onselectstart = onselectstartStore;\n\n      if (cursorLeave.value) {\n        visible.value = false;\n      }\n    };\n\n    var thumbStyle = computed(function () {\n      return renderThumbStyle({\n        size: props.size,\n        move: props.move,\n        bar: bar.value\n      });\n    });\n\n    var mouseMoveScrollbarHandler = function mouseMoveScrollbarHandler() {\n      cursorLeave.value = false;\n      visible.value = !!props.size;\n    };\n\n    var mouseLeaveScrollbarHandler = function mouseLeaveScrollbarHandler() {\n      cursorLeave.value = true;\n      visible.value = cursorDown.value;\n    };\n\n    onMounted(function () {\n      on(scrollbar.value, \"mousemove\", mouseMoveScrollbarHandler);\n      on(scrollbar.value, \"mouseleave\", mouseLeaveScrollbarHandler);\n    });\n    onBeforeUnmount(function () {\n      off(document, \"mouseup\", mouseUpDocumentHandler);\n      off(scrollbar.value, \"mousemove\", mouseMoveScrollbarHandler);\n      off(scrollbar.value, \"mouseleave\", mouseLeaveScrollbarHandler);\n    });\n    return {\n      instance: instance,\n      thumb: thumb,\n      bar: bar,\n      clickTrackHandler: clickTrackHandler,\n      clickThumbHandler: clickThumbHandler,\n      thumbStyle: thumbStyle,\n      visible: visible\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}