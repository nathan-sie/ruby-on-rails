{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, computed } from 'vue';\nimport '../../../hooks/index.mjs';\nimport './item.mjs';\nimport script$1 from './item.vue_vue&type=script&lang.mjs';\nimport useThrottleRender from '../../../hooks/use-throttle-render/index.mjs';\nvar script = defineComponent({\n  name: \"ElSkeleton\",\n  components: _defineProperty({}, script$1.name, script$1),\n  props: {\n    animated: {\n      type: Boolean,\n      \"default\": false\n    },\n    count: {\n      type: Number,\n      \"default\": 1\n    },\n    rows: {\n      type: Number,\n      \"default\": 3\n    },\n    loading: {\n      type: Boolean,\n      \"default\": true\n    },\n    throttle: {\n      type: Number\n    }\n  },\n  setup: function setup(props) {\n    var innerLoading = computed(function () {\n      return props.loading;\n    });\n    var uiLoading = useThrottleRender(innerLoading, props.throttle);\n    return {\n      uiLoading: uiLoading\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}