{"ast":null,"code":"import { ref, reactive, computed, unref, watch } from 'vue';\nimport { createPopper } from '@popperjs/core';\nimport { generateId, isBool, isHTMLElement } from '../../../../utils/util.mjs';\nimport PopupManager from '../../../../utils/popup-manager.mjs';\nimport usePopperOptions from './popper-options.mjs';\nexport { Effect } from './defaults.mjs';\nimport { isString, isArray } from '@vue/shared';\nvar DEFAULT_TRIGGER = [\"hover\"];\nvar UPDATE_VISIBLE_EVENT = \"update:visible\";\n\nfunction usePopper(props, _ref) {\n  var emit = _ref.emit;\n  var arrowRef = ref(null);\n  var triggerRef = ref(null);\n  var popperRef = ref(null);\n  var popperId = \"el-popper-\".concat(generateId());\n  var popperInstance = null;\n  var showTimer = null;\n  var hideTimer = null;\n  var triggerFocused = false;\n\n  var isManualMode = function isManualMode() {\n    return props.manualMode || props.trigger === \"manual\";\n  };\n\n  var popperStyle = ref({\n    zIndex: PopupManager.nextZIndex()\n  });\n  var popperOptions = usePopperOptions(props, {\n    arrow: arrowRef\n  });\n  var state = reactive({\n    visible: !!props.visible\n  });\n  var visibility = computed({\n    get: function get() {\n      if (props.disabled) {\n        return false;\n      } else {\n        return isBool(props.visible) ? props.visible : state.visible;\n      }\n    },\n    set: function set(val) {\n      if (isManualMode()) return;\n      isBool(props.visible) ? emit(UPDATE_VISIBLE_EVENT, val) : state.visible = val;\n    }\n  });\n\n  function _show() {\n    if (props.autoClose > 0) {\n      hideTimer = window.setTimeout(function () {\n        _hide();\n      }, props.autoClose);\n    }\n\n    visibility.value = true;\n  }\n\n  function _hide() {\n    visibility.value = false;\n  }\n\n  function clearTimers() {\n    clearTimeout(showTimer);\n    clearTimeout(hideTimer);\n  }\n\n  var show = function show() {\n    if (isManualMode() || props.disabled) return;\n    clearTimers();\n\n    if (props.showAfter === 0) {\n      _show();\n    } else {\n      showTimer = window.setTimeout(function () {\n        _show();\n      }, props.showAfter);\n    }\n  };\n\n  var hide = function hide() {\n    if (isManualMode()) return;\n    clearTimers();\n\n    if (props.hideAfter > 0) {\n      hideTimer = window.setTimeout(function () {\n        close();\n      }, props.hideAfter);\n    } else {\n      close();\n    }\n  };\n\n  var close = function close() {\n    _hide();\n\n    if (props.disabled) {\n      doDestroy(true);\n    }\n  };\n\n  function onPopperMouseEnter() {\n    if (props.enterable && props.trigger !== \"click\") {\n      clearTimeout(hideTimer);\n    }\n  }\n\n  function onPopperMouseLeave() {\n    var trigger = props.trigger;\n    var shouldPrevent = isString(trigger) && (trigger === \"click\" || trigger === \"focus\") || trigger.length === 1 && (trigger[0] === \"click\" || trigger[0] === \"focus\");\n    if (shouldPrevent) return;\n    hide();\n  }\n\n  function initializePopper() {\n    if (!unref(visibility)) {\n      return;\n    }\n\n    var unwrappedTrigger = unref(triggerRef);\n\n    var _trigger = isHTMLElement(unwrappedTrigger) ? unwrappedTrigger : unwrappedTrigger.$el;\n\n    popperInstance = createPopper(_trigger, unref(popperRef), unref(popperOptions));\n    popperInstance.update();\n  }\n\n  function doDestroy(forceDestroy) {\n    if (!popperInstance || unref(visibility) && !forceDestroy) return;\n    detachPopper();\n  }\n\n  function detachPopper() {\n    var _a;\n\n    (_a = popperInstance == null ? void 0 : popperInstance.destroy) == null ? void 0 : _a.call(popperInstance);\n    popperInstance = null;\n  }\n\n  var events = {};\n\n  function update() {\n    if (!unref(visibility)) {\n      return;\n    }\n\n    if (popperInstance) {\n      popperInstance.update();\n    } else {\n      initializePopper();\n    }\n  }\n\n  function onVisibilityChange(toState) {\n    if (toState) {\n      popperStyle.value.zIndex = PopupManager.nextZIndex();\n      initializePopper();\n    }\n  }\n\n  if (!isManualMode()) {\n    var toggleState = function toggleState() {\n      if (unref(visibility)) {\n        hide();\n      } else {\n        show();\n      }\n    };\n\n    var popperEventsHandler = function popperEventsHandler(e) {\n      e.stopPropagation();\n\n      switch (e.type) {\n        case \"click\":\n          {\n            if (triggerFocused) {\n              triggerFocused = false;\n            } else {\n              toggleState();\n            }\n\n            break;\n          }\n\n        case \"mouseenter\":\n          {\n            show();\n            break;\n          }\n\n        case \"mouseleave\":\n          {\n            hide();\n            break;\n          }\n\n        case \"focus\":\n          {\n            triggerFocused = true;\n            show();\n            break;\n          }\n\n        case \"blur\":\n          {\n            triggerFocused = false;\n            hide();\n            break;\n          }\n      }\n    };\n\n    var triggerEventsMap = {\n      click: [\"onClick\"],\n      hover: [\"onMouseenter\", \"onMouseleave\"],\n      focus: [\"onFocus\", \"onBlur\"]\n    };\n\n    var mapEvents = function mapEvents(t) {\n      triggerEventsMap[t].forEach(function (event) {\n        events[event] = popperEventsHandler;\n      });\n    };\n\n    if (isArray(props.trigger)) {\n      Object.values(props.trigger).forEach(mapEvents);\n    } else {\n      mapEvents(props.trigger);\n    }\n  }\n\n  watch(popperOptions, function (val) {\n    if (!popperInstance) return;\n    popperInstance.setOptions(val);\n    popperInstance.update();\n  });\n  watch(visibility, onVisibilityChange);\n  return {\n    update: update,\n    doDestroy: doDestroy,\n    show: show,\n    hide: hide,\n    onPopperMouseEnter: onPopperMouseEnter,\n    onPopperMouseLeave: onPopperMouseLeave,\n    onAfterEnter: function onAfterEnter() {\n      emit(\"after-enter\");\n    },\n    onAfterLeave: function onAfterLeave() {\n      detachPopper();\n      emit(\"after-leave\");\n    },\n    onBeforeEnter: function onBeforeEnter() {\n      emit(\"before-enter\");\n    },\n    onBeforeLeave: function onBeforeLeave() {\n      emit(\"before-leave\");\n    },\n    initializePopper: initializePopper,\n    isManualMode: isManualMode,\n    arrowRef: arrowRef,\n    events: events,\n    popperId: popperId,\n    popperInstance: popperInstance,\n    popperRef: popperRef,\n    popperStyle: popperStyle,\n    triggerRef: triggerRef,\n    visibility: visibility\n  };\n}\n\nexport { DEFAULT_TRIGGER, UPDATE_VISIBLE_EVENT, usePopper as default };","map":null,"metadata":{},"sourceType":"module"}