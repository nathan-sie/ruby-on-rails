{"ast":null,"code":"var _InitialStateMap;\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { watch } from 'vue';\nimport debounce from 'lodash/debounce';\nimport useStore from './index.mjs';\nvar InitialStateMap = (_InitialStateMap = {\n  rowKey: \"rowKey\",\n  defaultExpandAll: \"defaultExpandAll\",\n  selectOnIndeterminate: \"selectOnIndeterminate\",\n  indent: \"indent\",\n  lazy: \"lazy\",\n  data: \"data\"\n}, _defineProperty(_InitialStateMap, \"treeProps.hasChildren\", {\n  key: \"lazyColumnIdentifier\",\n  \"default\": \"hasChildren\"\n}), _defineProperty(_InitialStateMap, \"treeProps.children\", {\n  key: \"childrenColumnName\",\n  \"default\": \"children\"\n}), _InitialStateMap);\n\nfunction createStore(table, props) {\n  if (!table) {\n    throw new Error(\"Table is required.\");\n  }\n\n  var store = useStore();\n  store.toggleAllSelection = debounce(store._toggleAllSelection, 10);\n  Object.keys(InitialStateMap).forEach(function (key) {\n    handleValue(getArrKeysValue(props, key), key, store);\n  });\n  proxyTableProps(store, props);\n  return store;\n}\n\nfunction proxyTableProps(store, props) {\n  Object.keys(InitialStateMap).forEach(function (key) {\n    watch(function () {\n      return getArrKeysValue(props, key);\n    }, function (value) {\n      handleValue(value, key, store);\n    });\n  });\n}\n\nfunction handleValue(value, propsKey, store) {\n  var newVal = value;\n  var storeKey = InitialStateMap[propsKey];\n\n  if (_typeof(InitialStateMap[propsKey]) === \"object\") {\n    storeKey = storeKey.key;\n    newVal = newVal || InitialStateMap[propsKey][\"default\"];\n  }\n\n  store.states[storeKey].value = newVal;\n}\n\nfunction getArrKeysValue(props, keys) {\n  if (keys.includes(\".\")) {\n    var keyList = keys.split(\".\");\n    var value = props;\n    keyList.forEach(function (key) {\n      value = value[key];\n    });\n    return value;\n  } else {\n    return props[keys];\n  }\n}\n\nexport { createStore };","map":null,"metadata":{},"sourceType":"module"}