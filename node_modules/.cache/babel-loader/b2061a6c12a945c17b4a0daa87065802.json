{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { defineComponent, getCurrentInstance, ref, computed, nextTick, watch, provide, reactive, onMounted, withDirectives, h } from 'vue';\nimport '../../../directives/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { More } from '@element-plus/icons';\nimport Menu$1 from '../../../utils/menu/menu-bar.mjs';\nimport { buildProps, definePropType, mutable } from '../../../utils/props.mjs';\nimport '../../../utils/util.mjs';\nimport './menu-collapse-transition.mjs';\nimport SubMenu from './sub-menu.mjs';\nimport { useMenuCssVar } from './use-menu-css-var.mjs';\nimport { isString, isObject } from '@vue/shared';\nimport Resize from '../../../directives/resize/index.mjs';\nimport script from './menu-collapse-transition.vue_vue&type=script&lang.mjs';\nvar menuProps = buildProps({\n  mode: {\n    type: String,\n    values: [\"horizontal\", \"vertical\"],\n    \"default\": \"vertical\"\n  },\n  defaultActive: {\n    type: String,\n    \"default\": \"\"\n  },\n  defaultOpeneds: {\n    type: definePropType(Array),\n    \"default\": function _default() {\n      return mutable([]);\n    }\n  },\n  uniqueOpened: Boolean,\n  router: Boolean,\n  menuTrigger: {\n    type: String,\n    values: [\"hover\", \"click\"],\n    \"default\": \"hover\"\n  },\n  collapse: Boolean,\n  backgroundColor: String,\n  textColor: String,\n  activeTextColor: String,\n  collapseTransition: {\n    type: Boolean,\n    \"default\": true\n  },\n  ellipsis: {\n    type: Boolean,\n    \"default\": true\n  }\n});\n\nvar checkIndexPath = function checkIndexPath(indexPath) {\n  return Array.isArray(indexPath) && indexPath.every(function (path) {\n    return isString(path);\n  });\n};\n\nvar menuEmits = {\n  close: function close(index, indexPath) {\n    return isString(index) && checkIndexPath(indexPath);\n  },\n  open: function open(index, indexPath) {\n    return isString(index) && checkIndexPath(indexPath);\n  },\n  select: function select(index, indexPath, item, routerResult) {\n    return isString(index) && checkIndexPath(indexPath) && isObject(item) && (routerResult === void 0 || routerResult instanceof Promise);\n  }\n};\nvar Menu = defineComponent({\n  name: \"ElMenu\",\n  props: menuProps,\n  emits: menuEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots,\n        expose = _ref.expose;\n    var instance = getCurrentInstance();\n    var router = instance.appContext.config.globalProperties.$router;\n    var menu = ref();\n    var openedMenus = ref(props.defaultOpeneds && !props.collapse ? props.defaultOpeneds.slice(0) : []);\n    var activeIndex = ref(props.defaultActive);\n    var items = ref({});\n    var subMenus = ref({});\n    var alteredCollapse = ref(false);\n    var isMenuPopup = computed(function () {\n      return props.mode === \"horizontal\" || props.mode === \"vertical\" && props.collapse;\n    });\n\n    var initMenu = function initMenu() {\n      var activeItem = activeIndex.value && items.value[activeIndex.value];\n      if (!activeItem || props.mode === \"horizontal\" || props.collapse) return;\n      var indexPath = activeItem.indexPath;\n      indexPath.forEach(function (index) {\n        var subMenu = subMenus.value[index];\n        subMenu && openMenu(index, subMenu.indexPath);\n      });\n    };\n\n    var openMenu = function openMenu(index, indexPath) {\n      if (openedMenus.value.includes(index)) return;\n\n      if (props.uniqueOpened) {\n        openedMenus.value = openedMenus.value.filter(function (index2) {\n          return indexPath.includes(index2);\n        });\n      }\n\n      openedMenus.value.push(index);\n      emit(\"open\", index, indexPath);\n    };\n\n    var closeMenu = function closeMenu(index, indexPath) {\n      var i = openedMenus.value.indexOf(index);\n\n      if (i !== -1) {\n        openedMenus.value.splice(i, 1);\n      }\n\n      emit(\"close\", index, indexPath);\n    };\n\n    var handleSubMenuClick = function handleSubMenuClick(_ref2) {\n      var index = _ref2.index,\n          indexPath = _ref2.indexPath;\n      var isOpened = openedMenus.value.includes(index);\n\n      if (isOpened) {\n        closeMenu(index, indexPath);\n      } else {\n        openMenu(index, indexPath);\n      }\n    };\n\n    var handleMenuItemClick = function handleMenuItemClick(menuItem) {\n      if (props.mode === \"horizontal\" || props.collapse) {\n        openedMenus.value = [];\n      }\n\n      var index = menuItem.index,\n          indexPath = menuItem.indexPath;\n      if (index === void 0 || indexPath === void 0) return;\n\n      if (props.router && router) {\n        var route = menuItem.route || index;\n        var routerResult = router.push(route).then(function (res) {\n          if (!res) activeIndex.value = index;\n          return res;\n        });\n        emit(\"select\", index, indexPath, {\n          index: index,\n          indexPath: indexPath,\n          route: route\n        }, routerResult);\n      } else {\n        activeIndex.value = index;\n        emit(\"select\", index, indexPath, {\n          index: index,\n          indexPath: indexPath\n        });\n      }\n    };\n\n    var updateActiveIndex = function updateActiveIndex(val) {\n      var itemsInData = items.value;\n      var item = itemsInData[val] || activeIndex.value && itemsInData[activeIndex.value] || itemsInData[props.defaultActive];\n\n      if (item) {\n        activeIndex.value = item.index;\n        initMenu();\n      } else {\n        if (!alteredCollapse.value) {\n          activeIndex.value = void 0;\n        } else {\n          alteredCollapse.value = false;\n        }\n      }\n    };\n\n    var handleResize = function handleResize() {\n      nextTick(function () {\n        return instance.proxy.$forceUpdate();\n      });\n    };\n\n    watch(function () {\n      return props.defaultActive;\n    }, function (currentActive) {\n      if (!items.value[currentActive]) {\n        activeIndex.value = \"\";\n      }\n\n      updateActiveIndex(currentActive);\n    });\n    watch(items.value, function () {\n      return initMenu();\n    });\n    watch(function () {\n      return props.collapse;\n    }, function (value, prev) {\n      if (value !== prev) {\n        alteredCollapse.value = true;\n      }\n\n      if (value) openedMenus.value = [];\n    });\n    {\n      var addSubMenu = function addSubMenu(item) {\n        subMenus.value[item.index] = item;\n      };\n\n      var removeSubMenu = function removeSubMenu(item) {\n        delete subMenus.value[item.index];\n      };\n\n      var addMenuItem = function addMenuItem(item) {\n        items.value[item.index] = item;\n      };\n\n      var removeMenuItem = function removeMenuItem(item) {\n        delete items.value[item.index];\n      };\n\n      provide(\"rootMenu\", reactive({\n        props: props,\n        openedMenus: openedMenus,\n        items: items,\n        subMenus: subMenus,\n        activeIndex: activeIndex,\n        isMenuPopup: isMenuPopup,\n        addMenuItem: addMenuItem,\n        removeMenuItem: removeMenuItem,\n        addSubMenu: addSubMenu,\n        removeSubMenu: removeSubMenu,\n        openMenu: openMenu,\n        closeMenu: closeMenu,\n        handleMenuItemClick: handleMenuItemClick,\n        handleSubMenuClick: handleSubMenuClick\n      }));\n      provide(\"subMenu:\".concat(instance.uid), {\n        addSubMenu: addSubMenu,\n        removeSubMenu: removeSubMenu\n      });\n    }\n    onMounted(function () {\n      initMenu();\n\n      if (props.mode === \"horizontal\") {\n        new Menu$1(instance.vnode.el);\n      }\n    });\n    {\n      var open = function open(index) {\n        var indexPath = subMenus.value[index].indexPath;\n        indexPath.forEach(function (i) {\n          return openMenu(i, indexPath);\n        });\n      };\n\n      expose({\n        open: open,\n        close: closeMenu,\n        handleResize: handleResize\n      });\n    }\n\n    var flattedChildren = function flattedChildren(children) {\n      var vnodes = Array.isArray(children) ? children : [children];\n      var result = [];\n      vnodes.forEach(function (child) {\n        if (Array.isArray(child.children)) {\n          result.push.apply(result, _toConsumableArray(flattedChildren(child.children)));\n        } else {\n          result.push(child);\n        }\n      });\n      return result;\n    };\n\n    var useVNodeResize = function useVNodeResize(vnode) {\n      return props.mode === \"horizontal\" ? withDirectives(vnode, [[Resize, handleResize]]) : vnode;\n    };\n\n    return function () {\n      var _a, _b, _c, _d;\n\n      var slot = (_b = (_a = slots[\"default\"]) == null ? void 0 : _a.call(slots)) != null ? _b : [];\n      var vShowMore = [];\n\n      if (props.mode === \"horizontal\" && menu.value) {\n        var items2 = Array.from((_d = (_c = menu.value) == null ? void 0 : _c.childNodes) != null ? _d : []).filter(function (item) {\n          return item.nodeName !== \"#text\" || item.nodeValue;\n        });\n        var originalSlot = flattedChildren(slot);\n        var moreItemWidth = 64;\n        var paddingLeft = parseInt(getComputedStyle(menu.value).paddingLeft, 10);\n        var paddingRight = parseInt(getComputedStyle(menu.value).paddingRight, 10);\n        var menuWidth = menu.value.clientWidth - paddingLeft - paddingRight;\n        var calcWidth = 0;\n        var sliceIndex = 0;\n        items2.forEach(function (item, index) {\n          calcWidth += item.offsetWidth || 0;\n\n          if (calcWidth <= menuWidth - moreItemWidth) {\n            sliceIndex = index + 1;\n          }\n        });\n        var slotDefault = originalSlot.slice(0, sliceIndex);\n        var slotMore = originalSlot.slice(sliceIndex);\n\n        if ((slotMore == null ? void 0 : slotMore.length) && props.ellipsis) {\n          slot = slotDefault;\n          vShowMore.push(h(SubMenu, {\n            index: \"sub-menu-more\",\n            \"class\": \"el-sub-menu__hide-arrow\"\n          }, {\n            title: function title() {\n              return h(ElIcon, {\n                \"class\": [\"el-sub-menu__icon-more\"]\n              }, {\n                \"default\": function _default() {\n                  return h(More);\n                }\n              });\n            },\n            \"default\": function _default() {\n              return slotMore;\n            }\n          }));\n        }\n      }\n\n      var ulStyle = useMenuCssVar(props);\n\n      var resizeMenu = function resizeMenu(vNode) {\n        return props.ellipsis ? useVNodeResize(vNode) : vNode;\n      };\n\n      var vMenu = resizeMenu(h(\"ul\", {\n        key: String(props.collapse),\n        role: \"menubar\",\n        ref: menu,\n        style: ulStyle.value,\n        \"class\": {\n          \"el-menu\": true,\n          \"el-menu--horizontal\": props.mode === \"horizontal\",\n          \"el-menu--collapse\": props.collapse\n        }\n      }, [].concat(_toConsumableArray(slot.map(function (vnode) {\n        return resizeMenu(vnode);\n      })), vShowMore)));\n\n      if (props.collapseTransition && props.mode === \"vertical\") {\n        return h(script, function () {\n          return vMenu;\n        });\n      }\n\n      return vMenu;\n    };\n  }\n});\nexport { Menu as default, menuEmits, menuProps };","map":null,"metadata":{},"sourceType":"module"}