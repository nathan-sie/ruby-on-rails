{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getCurrentInstance, computed, watch, onMounted } from 'vue';\nimport { isFunction } from '@vue/shared';\nimport { isBool } from '../../utils/util.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../utils/constants.mjs';\nimport isServer from '../../utils/isServer.mjs';\nvar useModelToggleProps = {\n  modelValue: {\n    type: Boolean,\n    \"default\": null\n  },\n  \"onUpdate:modelValue\": Function\n};\nvar useModelToggleEmits = [UPDATE_MODEL_EVENT];\n\nvar useModelToggle = function useModelToggle(_ref) {\n  var indicator = _ref.indicator,\n      shouldHideWhenRouteChanges = _ref.shouldHideWhenRouteChanges,\n      shouldProceed = _ref.shouldProceed,\n      onShow = _ref.onShow,\n      onHide = _ref.onHide;\n\n  var _getCurrentInstance = getCurrentInstance(),\n      appContext = _getCurrentInstance.appContext,\n      props = _getCurrentInstance.props,\n      proxy = _getCurrentInstance.proxy,\n      emit = _getCurrentInstance.emit;\n\n  var hasUpdateHandler = computed(function () {\n    return isFunction(props[\"onUpdate:modelValue\"]);\n  });\n  var isModelBindingAbsent = computed(function () {\n    return props.modelValue === null;\n  });\n\n  var doShow = function doShow() {\n    if (indicator.value === true) {\n      return;\n    }\n\n    indicator.value = true;\n\n    if (isFunction(onShow)) {\n      onShow();\n    }\n  };\n\n  var doHide = function doHide() {\n    if (indicator.value === false) {\n      return;\n    }\n\n    indicator.value = false;\n\n    if (isFunction(onHide)) {\n      onHide();\n    }\n  };\n\n  var show = function show() {\n    if (props.disabled === true || isFunction(shouldProceed) && !shouldProceed()) return;\n    var shouldEmit = hasUpdateHandler.value && !isServer;\n\n    if (shouldEmit) {\n      emit(UPDATE_MODEL_EVENT, true);\n    }\n\n    if (isModelBindingAbsent.value || !shouldEmit) {\n      doShow();\n    }\n  };\n\n  var hide = function hide() {\n    if (props.disabled === true || isServer) return;\n    var shouldEmit = hasUpdateHandler.value && !isServer;\n\n    if (shouldEmit) {\n      emit(UPDATE_MODEL_EVENT, false);\n    }\n\n    if (isModelBindingAbsent.value || !shouldEmit) {\n      doHide();\n    }\n  };\n\n  var onChange = function onChange(val) {\n    if (!isBool(val)) return;\n\n    if (props.disabled && val) {\n      if (hasUpdateHandler.value) {\n        emit(UPDATE_MODEL_EVENT, false);\n      }\n    } else if (indicator.value !== val) {\n      if (val) {\n        doShow();\n      } else {\n        doHide();\n      }\n    }\n  };\n\n  var toggle = function toggle() {\n    if (indicator.value) {\n      hide();\n    } else {\n      show();\n    }\n  };\n\n  watch(function () {\n    return props.modelValue;\n  }, onChange);\n\n  if (shouldHideWhenRouteChanges && appContext.config.globalProperties.$route !== void 0) {\n    watch(function () {\n      return _objectSpread({}, proxy.$route);\n    }, function () {\n      if (shouldHideWhenRouteChanges.value && indicator.value) {\n        hide();\n      }\n    });\n  }\n\n  onMounted(function () {\n    onChange(props.modelValue);\n  });\n  return {\n    hide: hide,\n    show: show,\n    toggle: toggle\n  };\n};\n\nexport { useModelToggle, useModelToggleEmits, useModelToggleProps };","map":null,"metadata":{},"sourceType":"module"}