{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { EVENT_CODE, triggerEvent } from '../aria.mjs';\nimport SubMenu from './submenu.mjs';\n\nvar MenuItem = /*#__PURE__*/function () {\n  function MenuItem(domNode) {\n    _classCallCheck(this, MenuItem);\n\n    this.domNode = domNode;\n    this.submenu = null;\n    this.submenu = null;\n    this.init();\n  }\n\n  _createClass(MenuItem, [{\n    key: \"init\",\n    value: function init() {\n      this.domNode.setAttribute(\"tabindex\", \"0\");\n      var menuChild = this.domNode.querySelector(\".el-menu\");\n\n      if (menuChild) {\n        this.submenu = new SubMenu(this, menuChild);\n      }\n\n      this.addListeners();\n    }\n  }, {\n    key: \"addListeners\",\n    value: function addListeners() {\n      var _this = this;\n\n      this.domNode.addEventListener(\"keydown\", function (event) {\n        var prevDef = false;\n\n        switch (event.code) {\n          case EVENT_CODE.down:\n            {\n              triggerEvent(event.currentTarget, \"mouseenter\");\n              _this.submenu && _this.submenu.gotoSubIndex(0);\n              prevDef = true;\n              break;\n            }\n\n          case EVENT_CODE.up:\n            {\n              triggerEvent(event.currentTarget, \"mouseenter\");\n              _this.submenu && _this.submenu.gotoSubIndex(_this.submenu.subMenuItems.length - 1);\n              prevDef = true;\n              break;\n            }\n\n          case EVENT_CODE.tab:\n            {\n              triggerEvent(event.currentTarget, \"mouseleave\");\n              break;\n            }\n\n          case EVENT_CODE.enter:\n          case EVENT_CODE.space:\n            {\n              prevDef = true;\n              event.currentTarget.click();\n              break;\n            }\n        }\n\n        if (prevDef) {\n          event.preventDefault();\n        }\n      });\n    }\n  }]);\n\n  return MenuItem;\n}();\n\nexport { MenuItem as default };","map":null,"metadata":{},"sourceType":"module"}