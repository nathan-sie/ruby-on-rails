{"ast":null,"code":"import { defineComponent, ref, provide, computed, onMounted, nextTick, onBeforeUnmount } from 'vue';\nimport { addResizeListener, removeResizeListener } from '../../../utils/resize-event.mjs';\nimport { isNumber, toObject, addUnit } from '../../../utils/util.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport './bar.mjs';\nimport script$1 from './bar.vue_vue&type=script&lang.mjs';\nimport { isArray, isString } from '@vue/shared';\nvar script = defineComponent({\n  name: \"ElScrollbar\",\n  components: {\n    Bar: script$1\n  },\n  props: {\n    height: {\n      type: [String, Number],\n      \"default\": \"\"\n    },\n    maxHeight: {\n      type: [String, Number],\n      \"default\": \"\"\n    },\n    \"native\": {\n      type: Boolean,\n      \"default\": false\n    },\n    wrapStyle: {\n      type: [String, Array],\n      \"default\": \"\"\n    },\n    wrapClass: {\n      type: [String, Array],\n      \"default\": \"\"\n    },\n    viewClass: {\n      type: [String, Array],\n      \"default\": \"\"\n    },\n    viewStyle: {\n      type: [String, Array],\n      \"default\": \"\"\n    },\n    noresize: Boolean,\n    tag: {\n      type: String,\n      \"default\": \"div\"\n    },\n    always: {\n      type: Boolean,\n      \"default\": false\n    },\n    minSize: {\n      type: Number,\n      \"default\": 20\n    }\n  },\n  emits: [\"scroll\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var sizeWidth = ref(\"0\");\n    var sizeHeight = ref(\"0\");\n    var moveX = ref(0);\n    var moveY = ref(0);\n    var scrollbar = ref(null);\n    var wrap = ref(null);\n    var resize = ref(null);\n    var ratioY = ref(1);\n    var ratioX = ref(1);\n    var SCOPE = \"ElScrollbar\";\n    var GAP = 4;\n    provide(\"scrollbar\", scrollbar);\n    provide(\"scrollbar-wrap\", wrap);\n\n    var handleScroll = function handleScroll() {\n      if (wrap.value) {\n        var offsetHeight = wrap.value.offsetHeight - GAP;\n        var offsetWidth = wrap.value.offsetWidth - GAP;\n        moveY.value = wrap.value.scrollTop * 100 / offsetHeight * ratioY.value;\n        moveX.value = wrap.value.scrollLeft * 100 / offsetWidth * ratioX.value;\n        emit(\"scroll\", {\n          scrollTop: wrap.value.scrollTop,\n          scrollLeft: wrap.value.scrollLeft\n        });\n      }\n    };\n\n    var setScrollTop = function setScrollTop(value) {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, \"value must be a number\");\n        return;\n      }\n\n      wrap.value.scrollTop = value;\n    };\n\n    var setScrollLeft = function setScrollLeft(value) {\n      if (!isNumber(value)) {\n        debugWarn(SCOPE, \"value must be a number\");\n        return;\n      }\n\n      wrap.value.scrollLeft = value;\n    };\n\n    var update = function update() {\n      if (!wrap.value) return;\n      var offsetHeight = wrap.value.offsetHeight - GAP;\n      var offsetWidth = wrap.value.offsetWidth - GAP;\n      var originalHeight = Math.pow(offsetHeight, 2) / wrap.value.scrollHeight;\n      var originalWidth = Math.pow(offsetWidth, 2) / wrap.value.scrollWidth;\n      var height = Math.max(originalHeight, props.minSize);\n      var width = Math.max(originalWidth, props.minSize);\n      ratioY.value = originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));\n      ratioX.value = originalWidth / (offsetWidth - originalWidth) / (width / (offsetWidth - width));\n      sizeHeight.value = height + GAP < offsetHeight ? \"\".concat(height, \"px\") : \"\";\n      sizeWidth.value = width + GAP < offsetWidth ? \"\".concat(width, \"px\") : \"\";\n    };\n\n    var style = computed(function () {\n      var style2 = props.wrapStyle;\n\n      if (isArray(style2)) {\n        style2 = toObject(style2);\n        style2.height = addUnit(props.height);\n        style2.maxHeight = addUnit(props.maxHeight);\n      } else if (isString(style2)) {\n        style2 += addUnit(props.height) ? \"height: \".concat(addUnit(props.height), \";\") : \"\";\n        style2 += addUnit(props.maxHeight) ? \"max-height: \".concat(addUnit(props.maxHeight), \";\") : \"\";\n      }\n\n      return style2;\n    });\n    onMounted(function () {\n      if (!props[\"native\"]) {\n        nextTick(update);\n      }\n\n      if (!props.noresize) {\n        addResizeListener(resize.value, update);\n        addEventListener(\"resize\", update);\n      }\n    });\n    onBeforeUnmount(function () {\n      if (!props.noresize) {\n        removeResizeListener(resize.value, update);\n        removeEventListener(\"resize\", update);\n      }\n    });\n    return {\n      moveX: moveX,\n      moveY: moveY,\n      ratioX: ratioX,\n      ratioY: ratioY,\n      sizeWidth: sizeWidth,\n      sizeHeight: sizeHeight,\n      style: style,\n      scrollbar: scrollbar,\n      wrap: wrap,\n      resize: resize,\n      update: update,\n      handleScroll: handleScroll,\n      setScrollTop: setScrollTop,\n      setScrollLeft: setScrollLeft\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}