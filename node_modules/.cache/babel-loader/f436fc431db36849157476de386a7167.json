{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowDown, ArrowUp } from '@element-plus/icons';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport _Popper from '../../popper/index.mjs';\nimport _Scrollbar from '../../scrollbar/index.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { useLocaleInject } from '../../../hooks/use-locale/index.mjs';\nimport { Effect } from '../../popper/src/use-popper/defaults.mjs';\nvar ElCheckboxGroup = ElCheckbox.CheckboxGroup;\nvar script = defineComponent({\n  name: \"ElTableFilterPanel\",\n  components: {\n    ElCheckbox: ElCheckbox,\n    ElCheckboxGroup: ElCheckboxGroup,\n    ElScrollbar: _Scrollbar,\n    ElPopper: _Popper,\n    ElIcon: ElIcon,\n    ArrowDown: ArrowDown,\n    ArrowUp: ArrowUp\n  },\n  directives: {\n    ClickOutside: ClickOutside\n  },\n  props: {\n    placement: {\n      type: String,\n      \"default\": \"bottom-start\"\n    },\n    store: {\n      type: Object\n    },\n    column: {\n      type: Object\n    },\n    upDataColumn: {\n      type: Function\n    }\n  },\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t;\n\n    var parent = instance.parent;\n\n    if (!parent.filterPanels.value[props.column.id]) {\n      parent.filterPanels.value[props.column.id] = instance;\n    }\n\n    var tooltipVisible = ref(false);\n    var tooltip = ref(null);\n    var filters = computed(function () {\n      return props.column && props.column.filters;\n    });\n    var filterValue = computed({\n      get: function get() {\n        return (props.column.filteredValue || [])[0];\n      },\n      set: function set(value) {\n        if (filteredValue.value) {\n          if (typeof value !== \"undefined\" && value !== null) {\n            filteredValue.value.splice(0, 1, value);\n          } else {\n            filteredValue.value.splice(0, 1);\n          }\n        }\n      }\n    });\n    var filteredValue = computed({\n      get: function get() {\n        if (props.column) {\n          return props.column.filteredValue || [];\n        }\n\n        return [];\n      },\n      set: function set(value) {\n        if (props.column) {\n          props.upDataColumn(\"filteredValue\", value);\n        }\n      }\n    });\n    var multiple = computed(function () {\n      if (props.column) {\n        return props.column.filterMultiple;\n      }\n\n      return true;\n    });\n\n    var isActive = function isActive(filter) {\n      return filter.value === filterValue.value;\n    };\n\n    var hidden = function hidden() {\n      tooltipVisible.value = false;\n    };\n\n    var showFilterPanel = function showFilterPanel(e) {\n      e.stopPropagation();\n      tooltipVisible.value = !tooltipVisible.value;\n    };\n\n    var hideFilterPanel = function hideFilterPanel() {\n      tooltipVisible.value = false;\n    };\n\n    var handleConfirm = function handleConfirm() {\n      confirmFilter(filteredValue.value);\n      hidden();\n    };\n\n    var handleReset = function handleReset() {\n      filteredValue.value = [];\n      confirmFilter(filteredValue.value);\n      hidden();\n    };\n\n    var handleSelect = function handleSelect(_filterValue) {\n      filterValue.value = _filterValue;\n\n      if (typeof _filterValue !== \"undefined\" && _filterValue !== null) {\n        confirmFilter(filteredValue.value);\n      } else {\n        confirmFilter([]);\n      }\n\n      hidden();\n    };\n\n    var confirmFilter = function confirmFilter(filteredValue2) {\n      props.store.commit(\"filterChange\", {\n        column: props.column,\n        values: filteredValue2\n      });\n      props.store.updateAllSelected();\n    };\n\n    watch(tooltipVisible, function (value) {\n      if (props.column) {\n        props.upDataColumn(\"filterOpened\", value);\n      }\n    }, {\n      immediate: true\n    });\n    var popperPaneRef = computed(function () {\n      var _a;\n\n      return (_a = tooltip.value) == null ? void 0 : _a.popperRef;\n    });\n    return {\n      tooltipVisible: tooltipVisible,\n      multiple: multiple,\n      filteredValue: filteredValue,\n      filterValue: filterValue,\n      filters: filters,\n      handleConfirm: handleConfirm,\n      handleReset: handleReset,\n      handleSelect: handleSelect,\n      isActive: isActive,\n      t: t,\n      showFilterPanel: showFilterPanel,\n      hideFilterPanel: hideFilterPanel,\n      popperPaneRef: popperPaneRef,\n      tooltip: tooltip,\n      Effect: Effect\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}