{"ast":null,"code":"import { defineComponent, inject, computed, Text } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { Loading } from '@element-plus/icons';\nimport { buttonProps, buttonEmits } from './button.mjs';\nimport { elButtonGroupKey } from '../../../tokens/button.mjs';\nimport { useGlobalConfig } from '../../../hooks/use-global-config/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { elFormKey } from '../../../tokens/form.mjs';\nvar script = defineComponent({\n  name: \"ElButton\",\n  components: {\n    ElIcon: ElIcon,\n    Loading: Loading\n  },\n  props: buttonProps,\n  emits: buttonEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n    var elBtnGroup = inject(elButtonGroupKey, void 0);\n    var globalConfig = useGlobalConfig();\n    var autoInsertSpace = computed(function () {\n      var _a;\n\n      return (_a = props.autoInsertSpace) != null ? _a : globalConfig == null ? void 0 : globalConfig.button.autoInsertSpace;\n    });\n    var shouldAddSpace = computed(function () {\n      var _a;\n\n      var defaultSlot = (_a = slots[\"default\"]) == null ? void 0 : _a.call(slots);\n\n      if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {\n        var slot = defaultSlot[0];\n\n        if ((slot == null ? void 0 : slot.type) === Text) {\n          var text = slot.children;\n          return /^(?:[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uFA0E\\uFA0F\\uFA11\\uFA13\\uFA14\\uFA1F\\uFA21\\uFA23\\uFA24\\uFA27-\\uFA29]|[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD884[\\uDC00-\\uDF4A]){2}$/.test(text);\n        }\n      }\n\n      return false;\n    });\n\n    var _useFormItem = useFormItem({\n      size: computed(function () {\n        return elBtnGroup == null ? void 0 : elBtnGroup.size;\n      })\n    }),\n        buttonSize = _useFormItem.size,\n        buttonDisabled = _useFormItem.disabled;\n\n    var buttonType = computed(function () {\n      return props.type || (elBtnGroup == null ? void 0 : elBtnGroup.type) || \"default\";\n    });\n    var elForm = inject(elFormKey, void 0);\n\n    var handleClick = function handleClick(evt) {\n      if (props.nativeType === \"reset\") {\n        elForm == null ? void 0 : elForm.resetFields();\n      }\n\n      emit(\"click\", evt);\n    };\n\n    return {\n      buttonSize: buttonSize,\n      buttonType: buttonType,\n      buttonDisabled: buttonDisabled,\n      shouldAddSpace: shouldAddSpace,\n      handleClick: handleClick\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}