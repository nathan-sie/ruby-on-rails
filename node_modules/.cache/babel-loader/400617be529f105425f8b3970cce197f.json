{"ast":null,"code":"import { getCurrentInstance } from 'vue';\n\nfunction useStyle(props) {\n  var instance = getCurrentInstance();\n  var parent = instance.parent;\n  var storeData = parent.store.states;\n\n  var isCellHidden = function isCellHidden(index, columns) {\n    var start = 0;\n\n    for (var i = 0; i < index; i++) {\n      start += columns[i].colSpan;\n    }\n\n    var after = start + columns[index].colSpan - 1;\n\n    if (props.fixed === \"left\") {\n      return after >= storeData.fixedLeafColumnsLength.value;\n    } else if (props.fixed === \"right\") {\n      return start < storeData.columns.value.length - storeData.rightFixedLeafColumnsLength.value;\n    } else {\n      return after < storeData.fixedLeafColumnsLength.value || start >= storeData.columns.value.length - storeData.rightFixedLeafColumnsLength.value;\n    }\n  };\n\n  var getHeaderRowStyle = function getHeaderRowStyle(rowIndex) {\n    var headerRowStyle = parent.props.headerRowStyle;\n\n    if (typeof headerRowStyle === \"function\") {\n      return headerRowStyle.call(null, {\n        rowIndex: rowIndex\n      });\n    }\n\n    return headerRowStyle;\n  };\n\n  var getHeaderRowClass = function getHeaderRowClass(rowIndex) {\n    var classes = [];\n    var headerRowClassName = parent.props.headerRowClassName;\n\n    if (typeof headerRowClassName === \"string\") {\n      classes.push(headerRowClassName);\n    } else if (typeof headerRowClassName === \"function\") {\n      classes.push(headerRowClassName.call(null, {\n        rowIndex: rowIndex\n      }));\n    }\n\n    return classes.join(\" \");\n  };\n\n  var getHeaderCellStyle = function getHeaderCellStyle(rowIndex, columnIndex, row, column) {\n    var headerCellStyle = parent.props.headerCellStyle;\n\n    if (typeof headerCellStyle === \"function\") {\n      return headerCellStyle.call(null, {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        row: row,\n        column: column\n      });\n    }\n\n    return headerCellStyle;\n  };\n\n  var getHeaderCellClass = function getHeaderCellClass(rowIndex, columnIndex, row, column) {\n    var classes = [column.id, column.order, column.headerAlign, column.className, column.labelClassName];\n\n    if (rowIndex === 0 && isCellHidden(columnIndex, row)) {\n      classes.push(\"is-hidden\");\n    }\n\n    if (!column.children) {\n      classes.push(\"is-leaf\");\n    }\n\n    if (column.sortable) {\n      classes.push(\"is-sortable\");\n    }\n\n    var headerCellClassName = parent.props.headerCellClassName;\n\n    if (typeof headerCellClassName === \"string\") {\n      classes.push(headerCellClassName);\n    } else if (typeof headerCellClassName === \"function\") {\n      classes.push(headerCellClassName.call(null, {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        row: row,\n        column: column\n      }));\n    }\n\n    classes.push(\"el-table__cell\");\n    return classes.join(\" \");\n  };\n\n  return {\n    getHeaderRowStyle: getHeaderRowStyle,\n    getHeaderRowClass: getHeaderRowClass,\n    getHeaderCellStyle: getHeaderCellStyle,\n    getHeaderCellClass: getHeaderCellClass\n  };\n}\n\nexport { useStyle as default };","map":null,"metadata":{},"sourceType":"module"}