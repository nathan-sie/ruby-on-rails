{"ast":null,"code":"import { defineComponent, ref, computed, inject, watch } from 'vue';\nimport dayjs from 'dayjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { DArrowLeft, DArrowRight } from '@element-plus/icons';\nimport './basic-month-table.mjs';\nimport script$1 from './basic-month-table.vue_vue&type=script&lang.mjs';\nimport { useLocaleInject } from '../../../../hooks/use-locale/index.mjs';\nvar script = defineComponent({\n  components: {\n    MonthTable: script$1,\n    ElIcon: ElIcon,\n    DArrowLeft: DArrowLeft,\n    DArrowRight: DArrowRight\n  },\n  props: {\n    unlinkPanels: Boolean,\n    parsedValue: {\n      type: Array\n    }\n  },\n  emits: [\"pick\", \"set-picker-option\"],\n  setup: function setup(props, ctx) {\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t,\n        lang = _useLocaleInject.lang;\n\n    var leftDate = ref(dayjs().locale(lang.value));\n    var rightDate = ref(dayjs().locale(lang.value).add(1, \"year\"));\n    var hasShortcuts = computed(function () {\n      return !!shortcuts.length;\n    });\n\n    var handleShortcutClick = function handleShortcutClick(shortcut) {\n      var shortcutValues = typeof shortcut.value === \"function\" ? shortcut.value() : shortcut.value;\n\n      if (shortcutValues) {\n        ctx.emit(\"pick\", [dayjs(shortcutValues[0]).locale(lang.value), dayjs(shortcutValues[1]).locale(lang.value)]);\n        return;\n      }\n\n      if (shortcut.onClick) {\n        shortcut.onClick(ctx);\n      }\n    };\n\n    var leftPrevYear = function leftPrevYear() {\n      leftDate.value = leftDate.value.subtract(1, \"year\");\n\n      if (!props.unlinkPanels) {\n        rightDate.value = rightDate.value.subtract(1, \"year\");\n      }\n    };\n\n    var rightNextYear = function rightNextYear() {\n      if (!props.unlinkPanels) {\n        leftDate.value = leftDate.value.add(1, \"year\");\n      }\n\n      rightDate.value = rightDate.value.add(1, \"year\");\n    };\n\n    var leftNextYear = function leftNextYear() {\n      leftDate.value = leftDate.value.add(1, \"year\");\n    };\n\n    var rightPrevYear = function rightPrevYear() {\n      rightDate.value = rightDate.value.subtract(1, \"year\");\n    };\n\n    var leftLabel = computed(function () {\n      return \"\".concat(leftDate.value.year(), \" \").concat(t(\"el.datepicker.year\"));\n    });\n    var rightLabel = computed(function () {\n      return \"\".concat(rightDate.value.year(), \" \").concat(t(\"el.datepicker.year\"));\n    });\n    var leftYear = computed(function () {\n      return leftDate.value.year();\n    });\n    var rightYear = computed(function () {\n      return rightDate.value.year() === leftDate.value.year() ? leftDate.value.year() + 1 : rightDate.value.year();\n    });\n    var enableYearArrow = computed(function () {\n      return props.unlinkPanels && rightYear.value > leftYear.value + 1;\n    });\n    var minDate = ref(null);\n    var maxDate = ref(null);\n    var rangeState = ref({\n      endDate: null,\n      selecting: false\n    });\n\n    var handleChangeRange = function handleChangeRange(val) {\n      rangeState.value = val;\n    };\n\n    var handleRangePick = function handleRangePick(val) {\n      var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var minDate_ = val.minDate;\n      var maxDate_ = val.maxDate;\n\n      if (maxDate.value === maxDate_ && minDate.value === minDate_) {\n        return;\n      }\n\n      maxDate.value = maxDate_;\n      minDate.value = minDate_;\n      if (!close) return;\n      handleConfirm();\n    };\n\n    var isValidValue = function isValidValue(value) {\n      return Array.isArray(value) && value && value[0] && value[1] && value[0].valueOf() <= value[1].valueOf();\n    };\n\n    var handleConfirm = function handleConfirm() {\n      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (isValidValue([minDate.value, maxDate.value])) {\n        ctx.emit(\"pick\", [minDate.value, maxDate.value], visible);\n      }\n    };\n\n    var onSelect = function onSelect(selecting) {\n      rangeState.value.selecting = selecting;\n\n      if (!selecting) {\n        rangeState.value.endDate = null;\n      }\n    };\n\n    var formatToString = function formatToString(value) {\n      return value.map(function (_) {\n        return _.format(format);\n      });\n    };\n\n    var getDefaultValue = function getDefaultValue() {\n      var start;\n\n      if (Array.isArray(defaultValue)) {\n        var left = dayjs(defaultValue[0]);\n        var right = dayjs(defaultValue[1]);\n\n        if (!props.unlinkPanels) {\n          right = left.add(1, \"year\");\n        }\n\n        return [left, right];\n      } else if (defaultValue) {\n        start = dayjs(defaultValue);\n      } else {\n        start = dayjs();\n      }\n\n      start = start.locale(lang.value);\n      return [start, start.add(1, \"year\")];\n    };\n\n    ctx.emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    var pickerBase = inject(\"EP_PICKER_BASE\");\n    var _pickerBase$props = pickerBase.props,\n        shortcuts = _pickerBase$props.shortcuts,\n        disabledDate = _pickerBase$props.disabledDate,\n        format = _pickerBase$props.format,\n        defaultValue = _pickerBase$props.defaultValue;\n    watch(function () {\n      return props.parsedValue;\n    }, function (newVal) {\n      if (newVal && newVal.length === 2) {\n        minDate.value = newVal[0];\n        maxDate.value = newVal[1];\n        leftDate.value = minDate.value;\n\n        if (props.unlinkPanels && maxDate.value) {\n          var minDateYear = minDate.value.year();\n          var maxDateYear = maxDate.value.year();\n          rightDate.value = minDateYear === maxDateYear ? maxDate.value.add(1, \"year\") : maxDate.value;\n        } else {\n          rightDate.value = leftDate.value.add(1, \"year\");\n        }\n      } else {\n        var defaultArr = getDefaultValue();\n        leftDate.value = defaultArr[0];\n        rightDate.value = defaultArr[1];\n      }\n    }, {\n      immediate: true\n    });\n    return {\n      shortcuts: shortcuts,\n      disabledDate: disabledDate,\n      onSelect: onSelect,\n      handleRangePick: handleRangePick,\n      rangeState: rangeState,\n      handleChangeRange: handleChangeRange,\n      minDate: minDate,\n      maxDate: maxDate,\n      enableYearArrow: enableYearArrow,\n      leftLabel: leftLabel,\n      rightLabel: rightLabel,\n      leftNextYear: leftNextYear,\n      leftPrevYear: leftPrevYear,\n      rightNextYear: rightNextYear,\n      rightPrevYear: rightPrevYear,\n      t: t,\n      leftDate: leftDate,\n      rightDate: rightDate,\n      hasShortcuts: hasShortcuts,\n      handleShortcutClick: handleShortcutClick\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}