{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { isVNode, defineComponent, renderSlot, createVNode, createTextVNode } from 'vue';\nimport { isString, isArray } from '@vue/shared';\nimport { isFragment, PatchFlags, isValidElementNode } from '../../../utils/vnode.mjs';\nimport { isNumber } from '../../../utils/util.mjs';\nimport { buildProps, definePropType, componentSize } from '../../../utils/props.mjs';\nimport './item.mjs';\nimport { useSpace } from './use-space.mjs';\nimport script from './item.vue_vue&type=script&lang.mjs';\nvar spaceProps = buildProps({\n  direction: {\n    type: String,\n    values: [\"horizontal\", \"vertical\"],\n    \"default\": \"horizontal\"\n  },\n  \"class\": {\n    type: definePropType([String, Object, Array]),\n    \"default\": \"\"\n  },\n  style: {\n    type: definePropType([String, Array, Object]),\n    \"default\": \"\"\n  },\n  alignment: {\n    type: definePropType(String),\n    \"default\": \"center\"\n  },\n  prefixCls: {\n    type: String\n  },\n  spacer: {\n    type: definePropType([Object, String, Number, Array]),\n    \"default\": null,\n    validator: function validator(val) {\n      return isVNode(val) || isNumber(val) || isString(val);\n    }\n  },\n  wrap: {\n    type: Boolean,\n    \"default\": false\n  },\n  fill: {\n    type: Boolean,\n    \"default\": false\n  },\n  fillRatio: {\n    type: Number,\n    \"default\": 100\n  },\n  size: {\n    type: [String, Array, Number],\n    values: componentSize,\n    validator: function validator(val) {\n      return isNumber(val) || isArray(val) && val.length === 2 && val.every(function (i) {\n        return isNumber(i);\n      });\n    }\n  }\n});\nvar Space = defineComponent({\n  name: \"ElSpace\",\n  props: spaceProps,\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n\n    var _useSpace = useSpace(props),\n        classes = _useSpace.classes,\n        containerStyle = _useSpace.containerStyle,\n        itemStyle = _useSpace.itemStyle;\n\n    return function () {\n      var _a;\n\n      var spacer = props.spacer,\n          prefixCls = props.prefixCls,\n          direction = props.direction;\n      var children = renderSlot(slots, \"default\", {\n        key: 0\n      }, function () {\n        return [];\n      });\n      if (((_a = children.children) != null ? _a : []).length === 0) return null;\n\n      if (isArray(children.children)) {\n        var extractedChildren = [];\n        children.children.forEach(function (child, loopKey) {\n          if (isFragment(child)) {\n            if (isArray(child.children)) {\n              child.children.forEach(function (nested, key) {\n                extractedChildren.push(createVNode(script, {\n                  style: itemStyle.value,\n                  prefixCls: prefixCls,\n                  key: \"nested-\".concat(key)\n                }, {\n                  \"default\": function _default() {\n                    return [nested];\n                  }\n                }, PatchFlags.PROPS | PatchFlags.STYLE, [\"style\", \"prefixCls\"]));\n              });\n            }\n          } else if (isValidElementNode(child)) {\n            extractedChildren.push(createVNode(script, {\n              style: itemStyle.value,\n              prefixCls: prefixCls,\n              key: \"LoopKey\".concat(loopKey)\n            }, {\n              \"default\": function _default() {\n                return [child];\n              }\n            }, PatchFlags.PROPS | PatchFlags.STYLE, [\"style\", \"prefixCls\"]));\n          }\n        });\n\n        if (spacer) {\n          var len = extractedChildren.length - 1;\n          extractedChildren = extractedChildren.reduce(function (acc, child, idx) {\n            var children2 = [].concat(_toConsumableArray(acc), [child]);\n\n            if (idx !== len) {\n              children2.push(createVNode(\"span\", {\n                style: [itemStyle.value, direction === \"vertical\" ? \"width: 100%\" : null],\n                key: idx\n              }, [isVNode(spacer) ? spacer : createTextVNode(spacer, PatchFlags.TEXT)], PatchFlags.STYLE));\n            }\n\n            return children2;\n          }, []);\n        }\n\n        return createVNode(\"div\", {\n          \"class\": classes.value,\n          style: containerStyle.value\n        }, extractedChildren, PatchFlags.STYLE | PatchFlags.CLASS);\n      }\n\n      return children.children;\n    };\n  }\n});\nexport { Space as default, spaceProps };","map":null,"metadata":{},"sourceType":"module"}