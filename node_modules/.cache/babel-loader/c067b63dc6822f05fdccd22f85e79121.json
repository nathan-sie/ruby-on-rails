{"ast":null,"code":"import { getCurrentInstance, ref } from 'vue';\nimport { addClass, removeClass, hasClass } from '../../../../utils/dom.mjs';\nimport isServer from '../../../../utils/isServer.mjs';\n\nfunction useEvent(props, emit) {\n  var instance = getCurrentInstance();\n  var parent = instance.parent;\n\n  var handleFilterClick = function handleFilterClick(event) {\n    event.stopPropagation();\n    return;\n  };\n\n  var handleHeaderClick = function handleHeaderClick(event, column) {\n    if (!column.filters && column.sortable) {\n      handleSortClick(event, column, false);\n    } else if (column.filterable && !column.sortable) {\n      handleFilterClick(event);\n    }\n\n    parent.emit(\"header-click\", column, event);\n  };\n\n  var handleHeaderContextMenu = function handleHeaderContextMenu(event, column) {\n    parent.emit(\"header-contextmenu\", column, event);\n  };\n\n  var draggingColumn = ref(null);\n  var dragging = ref(false);\n  var dragState = ref({});\n\n  var handleMouseDown = function handleMouseDown(event, column) {\n    if (isServer) return;\n    if (column.children && column.children.length > 0) return;\n\n    if (draggingColumn.value && props.border) {\n      dragging.value = true;\n      var table = parent;\n      emit(\"set-drag-visible\", true);\n      var tableEl = table.vnode.el;\n      var tableLeft = tableEl.getBoundingClientRect().left;\n      var columnEl = instance.vnode.el.querySelector(\"th.\".concat(column.id));\n      var columnRect = columnEl.getBoundingClientRect();\n      var minLeft = columnRect.left - tableLeft + 30;\n      addClass(columnEl, \"noclick\");\n      dragState.value = {\n        startMouseLeft: event.clientX,\n        startLeft: columnRect.right - tableLeft,\n        startColumnLeft: columnRect.left - tableLeft,\n        tableLeft: tableLeft\n      };\n      var resizeProxy = table.refs.resizeProxy;\n      resizeProxy.style.left = \"\".concat(dragState.value.startLeft, \"px\");\n\n      document.onselectstart = function () {\n        return false;\n      };\n\n      document.ondragstart = function () {\n        return false;\n      };\n\n      var handleMouseMove2 = function handleMouseMove2(event2) {\n        var deltaLeft = event2.clientX - dragState.value.startMouseLeft;\n        var proxyLeft = dragState.value.startLeft + deltaLeft;\n        resizeProxy.style.left = \"\".concat(Math.max(minLeft, proxyLeft), \"px\");\n      };\n\n      var handleMouseUp = function handleMouseUp() {\n        if (dragging.value) {\n          var _dragState$value = dragState.value,\n              startColumnLeft = _dragState$value.startColumnLeft,\n              startLeft = _dragState$value.startLeft;\n          var finalLeft = parseInt(resizeProxy.style.left, 10);\n          var columnWidth = finalLeft - startColumnLeft;\n          column.width = column.realWidth = columnWidth;\n          table.emit(\"header-dragend\", column.width, startLeft - startColumnLeft, column, event);\n          requestAnimationFrame(function () {\n            props.store.scheduleLayout(false, true);\n          });\n          document.body.style.cursor = \"\";\n          dragging.value = false;\n          draggingColumn.value = null;\n          dragState.value = {};\n          emit(\"set-drag-visible\", false);\n        }\n\n        document.removeEventListener(\"mousemove\", handleMouseMove2);\n        document.removeEventListener(\"mouseup\", handleMouseUp);\n        document.onselectstart = null;\n        document.ondragstart = null;\n        setTimeout(function () {\n          removeClass(columnEl, \"noclick\");\n        }, 0);\n      };\n\n      document.addEventListener(\"mousemove\", handleMouseMove2);\n      document.addEventListener(\"mouseup\", handleMouseUp);\n    }\n  };\n\n  var handleMouseMove = function handleMouseMove(event, column) {\n    if (column.children && column.children.length > 0) return;\n    var target = event.target;\n\n    while (target && target.tagName !== \"TH\") {\n      target = target.parentNode;\n    }\n\n    if (!column || !column.resizable) return;\n\n    if (!dragging.value && props.border) {\n      var rect = target.getBoundingClientRect();\n      var bodyStyle = document.body.style;\n\n      if (rect.width > 12 && rect.right - event.pageX < 8) {\n        bodyStyle.cursor = \"col-resize\";\n\n        if (hasClass(target, \"is-sortable\")) {\n          target.style.cursor = \"col-resize\";\n        }\n\n        draggingColumn.value = column;\n      } else if (!dragging.value) {\n        bodyStyle.cursor = \"\";\n\n        if (hasClass(target, \"is-sortable\")) {\n          target.style.cursor = \"pointer\";\n        }\n\n        draggingColumn.value = null;\n      }\n    }\n  };\n\n  var handleMouseOut = function handleMouseOut() {\n    if (isServer) return;\n    document.body.style.cursor = \"\";\n  };\n\n  var toggleOrder = function toggleOrder(_ref) {\n    var order = _ref.order,\n        sortOrders = _ref.sortOrders;\n    if (order === \"\") return sortOrders[0];\n    var index = sortOrders.indexOf(order || null);\n    return sortOrders[index > sortOrders.length - 2 ? 0 : index + 1];\n  };\n\n  var handleSortClick = function handleSortClick(event, column, givenOrder) {\n    event.stopPropagation();\n    var order = column.order === givenOrder ? null : givenOrder || toggleOrder(column);\n    var target = event.target;\n\n    while (target && target.tagName !== \"TH\") {\n      target = target.parentNode;\n    }\n\n    if (target && target.tagName === \"TH\") {\n      if (hasClass(target, \"noclick\")) {\n        removeClass(target, \"noclick\");\n        return;\n      }\n    }\n\n    if (!column.sortable) return;\n    var states = props.store.states;\n    var sortProp = states.sortProp.value;\n    var sortOrder;\n    var sortingColumn = states.sortingColumn.value;\n\n    if (sortingColumn !== column || sortingColumn === column && sortingColumn.order === null) {\n      if (sortingColumn) {\n        sortingColumn.order = null;\n      }\n\n      states.sortingColumn.value = column;\n      sortProp = column.property;\n    }\n\n    if (!order) {\n      sortOrder = column.order = null;\n    } else {\n      sortOrder = column.order = order;\n    }\n\n    states.sortProp.value = sortProp;\n    states.sortOrder.value = sortOrder;\n    parent.store.commit(\"changeSortCondition\");\n  };\n\n  return {\n    handleHeaderClick: handleHeaderClick,\n    handleHeaderContextMenu: handleHeaderContextMenu,\n    handleMouseDown: handleMouseDown,\n    handleMouseMove: handleMouseMove,\n    handleMouseOut: handleMouseOut,\n    handleSortClick: handleSortClick,\n    handleFilterClick: handleFilterClick\n  };\n}\n\nexport { useEvent as default };","map":null,"metadata":{},"sourceType":"module"}