{"ast":null,"code":"import { getCurrentInstance } from 'vue';\nexport { isVNode } from 'vue';\nimport { extend, hasOwn, hyphenate, toRawType, isArray, isObject, isString, isFunction } from '@vue/shared';\nexport { camelize, capitalize, extend, hasOwn, isArray, isObject, isString, looseEqual } from '@vue/shared';\nimport isEqualWith from 'lodash/isEqualWith';\nimport isServer from './isServer.mjs';\nimport { throwError, debugWarn } from './error.mjs';\nvar SCOPE = \"Util\";\n\nfunction toObject(arr) {\n  var res = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n\n  return res;\n}\n\nvar getValueByPath = function getValueByPath(obj) {\n  var paths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  var ret = obj;\n  paths.split(\".\").map(function (path) {\n    ret = ret == null ? void 0 : ret[path];\n  });\n  return ret;\n};\n\nfunction getPropByPath(obj, path, strict) {\n  var tempObj = obj;\n  var key, value;\n\n  if (obj && hasOwn(obj, path)) {\n    key = path;\n    value = tempObj == null ? void 0 : tempObj[path];\n  } else {\n    path = path.replace(/\\[(\\w+)\\]/g, \".$1\");\n    path = path.replace(/^\\./, \"\");\n    var keyArr = path.split(\".\");\n    var i = 0;\n\n    for (i; i < keyArr.length - 1; i++) {\n      if (!tempObj && !strict) break;\n      var key2 = keyArr[i];\n\n      if (key2 in tempObj) {\n        tempObj = tempObj[key2];\n      } else {\n        if (strict) {\n          throwError(SCOPE, \"Please transfer a valid prop path to form item!\");\n        }\n\n        break;\n      }\n    }\n\n    key = keyArr[i];\n    value = tempObj == null ? void 0 : tempObj[keyArr[i]];\n  }\n\n  return {\n    o: tempObj,\n    k: key,\n    v: value\n  };\n}\n\nvar generateId = function generateId() {\n  return Math.floor(Math.random() * 1e4);\n};\n\nvar escapeRegexpString = function escapeRegexpString() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return String(value).replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n};\n\nvar coerceTruthyValueToArray = function coerceTruthyValueToArray(arr) {\n  if (!arr && arr !== 0) {\n    return [];\n  }\n\n  return Array.isArray(arr) ? arr : [arr];\n};\n\nvar isFirefox = function isFirefox() {\n  return !isServer && !!window.navigator.userAgent.match(/firefox/i);\n};\n\nvar autoprefixer = function autoprefixer(style) {\n  var rules = [\"transform\", \"transition\", \"animation\"];\n  var prefixes = [\"ms-\", \"webkit-\"];\n  rules.forEach(function (rule) {\n    var value = style[rule];\n\n    if (rule && value) {\n      prefixes.forEach(function (prefix) {\n        style[prefix + rule] = value;\n      });\n    }\n  });\n  return style;\n};\n\nvar kebabCase = hyphenate;\n\nvar isBool = function isBool(val) {\n  return typeof val === \"boolean\";\n};\n\nvar isNumber = function isNumber(val) {\n  return typeof val === \"number\";\n};\n\nvar isHTMLElement = function isHTMLElement(val) {\n  return toRawType(val).startsWith(\"HTML\");\n};\n\nfunction rafThrottle(fn) {\n  var locked = false;\n  return function () {\n    var _this = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (locked) return;\n    locked = true;\n    window.requestAnimationFrame(function () {\n      Reflect.apply(fn, _this, args);\n      locked = false;\n    });\n  };\n}\n\nvar clearTimer = function clearTimer(timer) {\n  clearTimeout(timer.value);\n  timer.value = null;\n};\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction isUndefined(val) {\n  return val === void 0;\n}\n\nfunction useGlobalConfig() {\n  var vm = getCurrentInstance();\n\n  if (\"$ELEMENT\" in vm.proxy) {\n    return vm.proxy.$ELEMENT;\n  }\n\n  return {};\n}\n\nfunction isEmpty(val) {\n  if (!val && val !== 0 || isArray(val) && !val.length || isObject(val) && !Object.keys(val).length) return true;\n  return false;\n}\n\nfunction arrayFlat(arr) {\n  return arr.reduce(function (acm, item) {\n    var val = Array.isArray(item) ? arrayFlat(item) : item;\n    return acm.concat(val);\n  }, []);\n}\n\nfunction deduplicate(arr) {\n  return Array.from(new Set(arr));\n}\n\nfunction addUnit(value) {\n  if (isString(value)) {\n    return value;\n  } else if (isNumber(value)) {\n    return \"\".concat(value, \"px\");\n  }\n\n  debugWarn(SCOPE, \"binding value must be a string or number\");\n  return \"\";\n}\n\nfunction isEqualWithFunction(obj, other) {\n  return isEqualWith(obj, other, function (objVal, otherVal) {\n    return isFunction(objVal) && isFunction(otherVal) ? \"\".concat(objVal) === \"\".concat(otherVal) : void 0;\n  });\n}\n\nvar refAttacher = function refAttacher(ref) {\n  return function (val) {\n    ref.value = val;\n  };\n};\n\nexport { SCOPE, addUnit, arrayFlat, autoprefixer, clearTimer, coerceTruthyValueToArray, deduplicate, escapeRegexpString, generateId, getPropByPath, getRandomInt, getValueByPath, isBool, isEmpty, isEqualWithFunction, isFirefox, isHTMLElement, isNumber, isUndefined, kebabCase, rafThrottle, refAttacher, toObject, useGlobalConfig };","map":null,"metadata":{},"sourceType":"module"}