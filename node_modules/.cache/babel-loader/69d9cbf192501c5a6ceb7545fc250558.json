{"ast":null,"code":"import { h } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowRight, Loading } from '@element-plus/icons';\nimport { getPropByPath } from '../../../utils/util.mjs';\nvar cellStarts = {\n  \"default\": {\n    order: \"\"\n  },\n  selection: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\",\n    className: \"el-table-column--selection\"\n  },\n  expand: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  },\n  index: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  }\n};\nvar cellForced = {\n  selection: {\n    renderHeader: function renderHeader(_ref) {\n      var store = _ref.store;\n\n      function isDisabled() {\n        return store.states.data.value && store.states.data.value.length === 0;\n      }\n\n      return h(ElCheckbox, {\n        disabled: isDisabled(),\n        size: store.states.tableSize.value,\n        indeterminate: store.states.selection.value.length > 0 && !store.states.isAllSelected.value,\n        \"onUpdate:modelValue\": store.toggleAllSelection,\n        modelValue: store.states.isAllSelected.value\n      });\n    },\n    renderCell: function renderCell(_ref2) {\n      var row = _ref2.row,\n          column = _ref2.column,\n          store = _ref2.store,\n          $index = _ref2.$index;\n      return h(ElCheckbox, {\n        disabled: column.selectable ? !column.selectable.call(null, row, $index) : false,\n        size: store.states.tableSize.value,\n        onChange: function onChange() {\n          store.commit(\"rowSelectedChanged\", row);\n        },\n        onClick: function onClick(event) {\n          return event.stopPropagation();\n        },\n        modelValue: store.isSelected(row)\n      });\n    },\n    sortable: false,\n    resizable: false\n  },\n  index: {\n    renderHeader: function renderHeader(_ref3) {\n      var column = _ref3.column;\n      return column.label || \"#\";\n    },\n    renderCell: function renderCell(_ref4) {\n      var column = _ref4.column,\n          $index = _ref4.$index;\n      var i = $index + 1;\n      var index = column.index;\n\n      if (typeof index === \"number\") {\n        i = $index + index;\n      } else if (typeof index === \"function\") {\n        i = index($index);\n      }\n\n      return h(\"div\", {}, [i]);\n    },\n    sortable: false\n  },\n  expand: {\n    renderHeader: function renderHeader(_ref5) {\n      var column = _ref5.column;\n      return column.label || \"\";\n    },\n    renderCell: function renderCell(_ref6) {\n      var row = _ref6.row,\n          store = _ref6.store;\n      var classes = [\"el-table__expand-icon\"];\n\n      if (store.states.expandRows.value.indexOf(row) > -1) {\n        classes.push(\"el-table__expand-icon--expanded\");\n      }\n\n      var callback = function callback(e) {\n        e.stopPropagation();\n        store.toggleRowExpansion(row);\n      };\n\n      return h(\"div\", {\n        \"class\": classes,\n        onClick: callback\n      }, {\n        \"default\": function _default() {\n          return [h(ElIcon, null, {\n            \"default\": function _default() {\n              return [h(ArrowRight)];\n            }\n          })];\n        }\n      });\n    },\n    sortable: false,\n    resizable: false,\n    className: \"el-table__expand-column\"\n  }\n};\n\nfunction defaultRenderCell(_ref7) {\n  var row = _ref7.row,\n      column = _ref7.column,\n      $index = _ref7.$index;\n\n  var _a;\n\n  var property = column.property;\n  var value = property && getPropByPath(row, property, false).v;\n\n  if (column && column.formatter) {\n    return column.formatter(row, column, value, $index);\n  }\n\n  return ((_a = value == null ? void 0 : value.toString) == null ? void 0 : _a.call(value)) || \"\";\n}\n\nfunction treeCellPrefix(_ref8) {\n  var row = _ref8.row,\n      treeNode = _ref8.treeNode,\n      store = _ref8.store;\n  if (!treeNode) return null;\n  var ele = [];\n\n  var callback = function callback(e) {\n    e.stopPropagation();\n    store.loadOrToggle(row);\n  };\n\n  if (treeNode.indent) {\n    ele.push(h(\"span\", {\n      \"class\": \"el-table__indent\",\n      style: {\n        \"padding-left\": \"\".concat(treeNode.indent, \"px\")\n      }\n    }));\n  }\n\n  if (typeof treeNode.expanded === \"boolean\" && !treeNode.noLazyChildren) {\n    var expandClasses = [\"el-table__expand-icon\", treeNode.expanded ? \"el-table__expand-icon--expanded\" : \"\"];\n    var icon = ArrowRight;\n\n    if (treeNode.loading) {\n      icon = Loading;\n    }\n\n    ele.push(h(\"div\", {\n      \"class\": expandClasses,\n      onClick: callback\n    }, {\n      \"default\": function _default() {\n        return [h(ElIcon, {\n          \"class\": {\n            \"is-loading\": treeNode.loading\n          }\n        }, {\n          \"default\": function _default() {\n            return [h(icon)];\n          }\n        })];\n      }\n    }));\n  } else {\n    ele.push(h(\"span\", {\n      \"class\": \"el-table__placeholder\"\n    }));\n  }\n\n  return ele;\n}\n\nexport { cellForced, cellStarts, defaultRenderCell, treeCellPrefix };","map":null,"metadata":{},"sourceType":"module"}