{"ast":null,"code":"import { defineComponent, inject, computed, provide, getCurrentInstance, onBeforeUnmount, ref, h } from 'vue';\nimport { NOOP } from '@vue/shared';\nimport '../../../tokens/index.mjs';\nimport upload from './ajax.mjs';\nimport './upload-list.mjs';\nimport './upload.mjs';\nimport useHandlers from './useHandlers.mjs';\nimport script$1 from './upload.vue_vue&type=script&lang.mjs';\nimport script$2 from './upload-list.vue_vue&type=script&lang.mjs';\nimport { elFormKey } from '../../../tokens/form.mjs';\nvar script = defineComponent({\n  name: \"ElUpload\",\n  components: {\n    Upload: script$1,\n    UploadList: script$2\n  },\n  props: {\n    action: {\n      type: String,\n      required: true\n    },\n    headers: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    method: {\n      type: String,\n      \"default\": \"post\"\n    },\n    data: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    multiple: {\n      type: Boolean,\n      \"default\": false\n    },\n    name: {\n      type: String,\n      \"default\": \"file\"\n    },\n    drag: {\n      type: Boolean,\n      \"default\": false\n    },\n    withCredentials: Boolean,\n    showFileList: {\n      type: Boolean,\n      \"default\": true\n    },\n    accept: {\n      type: String,\n      \"default\": \"\"\n    },\n    type: {\n      type: String,\n      \"default\": \"select\"\n    },\n    beforeUpload: {\n      type: Function,\n      \"default\": NOOP\n    },\n    beforeRemove: {\n      type: Function,\n      \"default\": NOOP\n    },\n    onRemove: {\n      type: Function,\n      \"default\": NOOP\n    },\n    onChange: {\n      type: Function,\n      \"default\": NOOP\n    },\n    onPreview: {\n      type: Function,\n      \"default\": NOOP\n    },\n    onSuccess: {\n      type: Function,\n      \"default\": NOOP\n    },\n    onProgress: {\n      type: Function,\n      \"default\": NOOP\n    },\n    onError: {\n      type: Function,\n      \"default\": NOOP\n    },\n    fileList: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    autoUpload: {\n      type: Boolean,\n      \"default\": true\n    },\n    listType: {\n      type: String,\n      \"default\": \"text\"\n    },\n    httpRequest: {\n      type: Function,\n      \"default\": upload\n    },\n    disabled: Boolean,\n    limit: {\n      type: Number,\n      \"default\": null\n    },\n    onExceed: {\n      type: Function,\n      \"default\": function _default() {\n        return NOOP;\n      }\n    }\n  },\n  setup: function setup(props) {\n    var elForm = inject(elFormKey, {});\n    var uploadDisabled = computed(function () {\n      return props.disabled || elForm.disabled;\n    });\n\n    var _useHandlers = useHandlers(props),\n        abort = _useHandlers.abort,\n        clearFiles = _useHandlers.clearFiles,\n        handleError = _useHandlers.handleError,\n        handleProgress = _useHandlers.handleProgress,\n        handleStart = _useHandlers.handleStart,\n        handleSuccess = _useHandlers.handleSuccess,\n        handleRemove = _useHandlers.handleRemove,\n        submit = _useHandlers.submit,\n        uploadRef = _useHandlers.uploadRef,\n        uploadFiles = _useHandlers.uploadFiles;\n\n    provide(\"uploader\", getCurrentInstance());\n    onBeforeUnmount(function () {\n      uploadFiles.value.forEach(function (file) {\n        if (file.url && file.url.indexOf(\"blob:\") === 0) {\n          URL.revokeObjectURL(file.url);\n        }\n      });\n    });\n    return {\n      abort: abort,\n      dragOver: ref(false),\n      draging: ref(false),\n      handleError: handleError,\n      handleProgress: handleProgress,\n      handleRemove: handleRemove,\n      handleStart: handleStart,\n      handleSuccess: handleSuccess,\n      uploadDisabled: uploadDisabled,\n      uploadFiles: uploadFiles,\n      uploadRef: uploadRef,\n      submit: submit,\n      clearFiles: clearFiles\n    };\n  },\n  render: function render() {\n    var _this = this;\n\n    var _a, _b;\n\n    var uploadList;\n\n    if (this.showFileList) {\n      uploadList = h(script$2, {\n        disabled: this.uploadDisabled,\n        listType: this.listType,\n        files: this.uploadFiles,\n        onRemove: this.handleRemove,\n        handlePreview: this.onPreview\n      }, this.$slots.file ? {\n        \"default\": function _default(props) {\n          return _this.$slots.file({\n            file: props.file\n          });\n        }\n      } : null);\n    } else {\n      uploadList = null;\n    }\n\n    var uploadData = {\n      type: this.type,\n      drag: this.drag,\n      action: this.action,\n      multiple: this.multiple,\n      \"before-upload\": this.beforeUpload,\n      \"with-credentials\": this.withCredentials,\n      headers: this.headers,\n      method: this.method,\n      name: this.name,\n      data: this.data,\n      accept: this.accept,\n      fileList: this.uploadFiles,\n      autoUpload: this.autoUpload,\n      listType: this.listType,\n      disabled: this.uploadDisabled,\n      limit: this.limit,\n      \"on-exceed\": this.onExceed,\n      \"on-start\": this.handleStart,\n      \"on-progress\": this.handleProgress,\n      \"on-success\": this.handleSuccess,\n      \"on-error\": this.handleError,\n      \"on-preview\": this.onPreview,\n      \"on-remove\": this.handleRemove,\n      \"http-request\": this.httpRequest,\n      ref: \"uploadRef\"\n    };\n    var trigger = this.$slots.trigger || this.$slots[\"default\"];\n    var uploadComponent = h(script$1, uploadData, {\n      \"default\": function _default() {\n        return trigger == null ? void 0 : trigger();\n      }\n    });\n    return h(\"div\", [this.listType === \"picture-card\" ? uploadList : null, this.$slots.trigger ? [uploadComponent, this.$slots[\"default\"]()] : uploadComponent, (_b = (_a = this.$slots).tip) == null ? void 0 : _b.call(_a), this.listType !== \"picture-card\" ? uploadList : null]);\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}