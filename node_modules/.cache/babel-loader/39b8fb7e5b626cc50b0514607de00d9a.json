{"ast":null,"code":"import isServer from './isServer.mjs';\nimport { getConfig } from './config.mjs';\nimport { on, addClass, removeClass } from './dom.mjs';\nimport { EVENT_CODE } from './aria.mjs';\n\nvar onTouchMove = function onTouchMove(e) {\n  e.preventDefault();\n  e.stopPropagation();\n};\n\nvar onModalClick = function onModalClick() {\n  PopupManager == null ? void 0 : PopupManager.doOnModalClick();\n};\n\nvar hasModal = false;\nvar zIndex;\n\nvar getModal = function getModal() {\n  if (isServer) return;\n  var modalDom = PopupManager.modalDom;\n\n  if (modalDom) {\n    hasModal = true;\n  } else {\n    hasModal = false;\n    modalDom = document.createElement(\"div\");\n    PopupManager.modalDom = modalDom;\n    on(modalDom, \"touchmove\", onTouchMove);\n    on(modalDom, \"click\", onModalClick);\n  }\n\n  return modalDom;\n};\n\nvar instances = {};\nvar PopupManager = {\n  modalFade: true,\n  modalDom: void 0,\n  zIndex: zIndex,\n  getInstance: function getInstance(id) {\n    return instances[id];\n  },\n  register: function register(id, instance) {\n    if (id && instance) {\n      instances[id] = instance;\n    }\n  },\n  deregister: function deregister(id) {\n    if (id) {\n      instances[id] = null;\n      delete instances[id];\n    }\n  },\n  nextZIndex: function nextZIndex() {\n    return ++PopupManager.zIndex;\n  },\n  modalStack: [],\n  doOnModalClick: function doOnModalClick() {\n    var topItem = PopupManager.modalStack[PopupManager.modalStack.length - 1];\n    if (!topItem) return;\n    var instance = PopupManager.getInstance(topItem.id);\n\n    if (instance && instance.closeOnClickModal.value) {\n      instance.close();\n    }\n  },\n  openModal: function openModal(id, zIndex2, dom, modalClass, modalFade) {\n    if (isServer) return;\n    if (!id || zIndex2 === void 0) return;\n    this.modalFade = modalFade;\n    var modalStack = this.modalStack;\n\n    for (var i = 0, j = modalStack.length; i < j; i++) {\n      var item = modalStack[i];\n\n      if (item.id === id) {\n        return;\n      }\n    }\n\n    var modalDom = getModal();\n    addClass(modalDom, \"v-modal\");\n\n    if (this.modalFade && !hasModal) {\n      addClass(modalDom, \"v-modal-enter\");\n    }\n\n    if (modalClass) {\n      var classArr = modalClass.trim().split(/\\s+/);\n      classArr.forEach(function (item) {\n        return addClass(modalDom, item);\n      });\n    }\n\n    setTimeout(function () {\n      removeClass(modalDom, \"v-modal-enter\");\n    }, 200);\n\n    if (dom && dom.parentNode && dom.parentNode.nodeType !== 11) {\n      dom.parentNode.appendChild(modalDom);\n    } else {\n      document.body.appendChild(modalDom);\n    }\n\n    if (zIndex2) {\n      modalDom.style.zIndex = String(zIndex2);\n    }\n\n    modalDom.tabIndex = 0;\n    modalDom.style.display = \"\";\n    this.modalStack.push({\n      id: id,\n      zIndex: zIndex2,\n      modalClass: modalClass\n    });\n  },\n  closeModal: function closeModal(id) {\n    var modalStack = this.modalStack;\n    var modalDom = getModal();\n\n    if (modalStack.length > 0) {\n      var topItem = modalStack[modalStack.length - 1];\n\n      if (topItem.id === id) {\n        if (topItem.modalClass) {\n          var classArr = topItem.modalClass.trim().split(/\\s+/);\n          classArr.forEach(function (item) {\n            return removeClass(modalDom, item);\n          });\n        }\n\n        modalStack.pop();\n\n        if (modalStack.length > 0) {\n          modalDom.style.zIndex = modalStack[modalStack.length - 1].zIndex;\n        }\n      } else {\n        for (var i = modalStack.length - 1; i >= 0; i--) {\n          if (modalStack[i].id === id) {\n            modalStack.splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n\n    if (modalStack.length === 0) {\n      if (this.modalFade) {\n        addClass(modalDom, \"v-modal-leave\");\n      }\n\n      setTimeout(function () {\n        if (modalStack.length === 0) {\n          if (modalDom.parentNode) modalDom.parentNode.removeChild(modalDom);\n          modalDom.style.display = \"none\";\n          PopupManager.modalDom = void 0;\n        }\n\n        removeClass(modalDom, \"v-modal-leave\");\n      }, 200);\n    }\n  }\n};\nObject.defineProperty(PopupManager, \"zIndex\", {\n  configurable: true,\n  get: function get() {\n    if (zIndex === void 0) {\n      zIndex = getConfig(\"zIndex\") || 2e3;\n    }\n\n    return zIndex;\n  },\n  set: function set(value) {\n    zIndex = value;\n  }\n});\n\nvar getTopPopup = function getTopPopup() {\n  if (isServer) return;\n\n  if (PopupManager.modalStack.length > 0) {\n    var topPopup = PopupManager.modalStack[PopupManager.modalStack.length - 1];\n    if (!topPopup) return;\n    var instance = PopupManager.getInstance(topPopup.id);\n    return instance;\n  }\n};\n\nif (!isServer) {\n  on(window, \"keydown\", function (event) {\n    if (event.code === EVENT_CODE.esc) {\n      var topPopup = getTopPopup();\n\n      if (topPopup && topPopup.closeOnPressEscape.value) {\n        topPopup.handleClose ? topPopup.handleClose() : topPopup.handleAction ? topPopup.handleAction(\"cancel\") : topPopup.close();\n      }\n    }\n  });\n}\n\nexport { PopupManager as default };","map":null,"metadata":{},"sourceType":"module"}