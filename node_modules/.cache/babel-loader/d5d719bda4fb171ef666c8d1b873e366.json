{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { defineComponent, h } from 'vue';\nimport { hColgroup, hGutter } from '../h-helper.mjs';\nimport useStyle from './style-helper.mjs';\nvar TableFooter = defineComponent({\n  name: \"ElTableFooter\",\n  props: {\n    fixed: {\n      type: String,\n      \"default\": \"\"\n    },\n    store: {\n      required: true,\n      type: Object\n    },\n    summaryMethod: Function,\n    sumText: String,\n    border: Boolean,\n    defaultSort: {\n      type: Object,\n      \"default\": function _default() {\n        return {\n          prop: \"\",\n          order: \"\"\n        };\n      }\n    }\n  },\n  setup: function setup(props) {\n    var _useStyle = useStyle(props),\n        hasGutter = _useStyle.hasGutter,\n        getRowClasses = _useStyle.getRowClasses,\n        columns = _useStyle.columns;\n\n    return {\n      getRowClasses: getRowClasses,\n      hasGutter: hasGutter,\n      columns: columns\n    };\n  },\n  render: function render() {\n    var _this = this;\n\n    var sums = [];\n\n    if (this.summaryMethod) {\n      sums = this.summaryMethod({\n        columns: this.columns,\n        data: this.store.states.data.value\n      });\n    } else {\n      this.columns.forEach(function (column, index) {\n        if (index === 0) {\n          sums[index] = _this.sumText;\n          return;\n        }\n\n        var values = _this.store.states.data.value.map(function (item) {\n          return Number(item[column.property]);\n        });\n\n        var precisions = [];\n        var notNumber = true;\n        values.forEach(function (value) {\n          if (!isNaN(value)) {\n            notNumber = false;\n            var decimal = \"\".concat(value).split(\".\")[1];\n            precisions.push(decimal ? decimal.length : 0);\n          }\n        });\n        var precision = Math.max.apply(null, precisions);\n\n        if (!notNumber) {\n          sums[index] = values.reduce(function (prev, curr) {\n            var value = Number(curr);\n\n            if (!isNaN(value)) {\n              return parseFloat((prev + curr).toFixed(Math.min(precision, 20)));\n            } else {\n              return prev;\n            }\n          }, 0);\n        } else {\n          sums[index] = \"\";\n        }\n      });\n    }\n\n    return h(\"table\", {\n      \"class\": \"el-table__footer\",\n      cellspacing: \"0\",\n      cellpadding: \"0\",\n      border: \"0\"\n    }, [hColgroup(this.columns, this.hasGutter), h(\"tbody\", {\n      \"class\": [{\n        \"has-gutter\": this.hasGutter\n      }]\n    }, [h(\"tr\", {}, [].concat(_toConsumableArray(this.columns.map(function (column, cellIndex) {\n      return h(\"td\", {\n        key: cellIndex,\n        colspan: column.colSpan,\n        rowspan: column.rowSpan,\n        \"class\": [].concat(_toConsumableArray(_this.getRowClasses(column, cellIndex)), [\"el-table__cell\"])\n      }, [h(\"div\", {\n        \"class\": [\"cell\", column.labelClassName]\n      }, [sums[cellIndex]])]);\n    })), [this.hasGutter && hGutter()]))])]);\n  }\n});\nexport { TableFooter as default };","map":null,"metadata":{},"sourceType":"module"}