{"ast":null,"code":"import { defineComponent, provide, getCurrentInstance } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport { useTree } from './composables/useTree.mjs';\nimport './tree-node.mjs';\nimport { treeProps, treeEmits, ROOT_TREE_INJECTION_KEY } from './virtual-tree.mjs';\nimport script$1 from './tree-node.vue_vue&type=script&lang.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport { useLocaleInject } from '../../../hooks/use-locale/index.mjs';\nvar script = defineComponent({\n  name: \"ElTreeV2\",\n  components: {\n    ElTreeNode: script$1,\n    FixedSizeList: FixedSizeList\n  },\n  props: treeProps,\n  emits: treeEmits,\n  setup: function setup(props, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx: ctx,\n      props: props,\n      instance: getCurrentInstance()\n    });\n\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t;\n\n    var _useTree = useTree(props, ctx.emit),\n        flattenTree = _useTree.flattenTree,\n        isNotEmpty = _useTree.isNotEmpty,\n        toggleExpand = _useTree.toggleExpand,\n        isExpanded = _useTree.isExpanded,\n        isIndeterminate = _useTree.isIndeterminate,\n        isChecked = _useTree.isChecked,\n        isDisabled = _useTree.isDisabled,\n        isCurrent = _useTree.isCurrent,\n        isForceHiddenExpandIcon = _useTree.isForceHiddenExpandIcon,\n        toggleCheckbox = _useTree.toggleCheckbox,\n        handleNodeClick = _useTree.handleNodeClick,\n        handleNodeCheck = _useTree.handleNodeCheck,\n        getCurrentNode = _useTree.getCurrentNode,\n        getCurrentKey = _useTree.getCurrentKey,\n        setCurrentKey = _useTree.setCurrentKey,\n        getCheckedKeys = _useTree.getCheckedKeys,\n        getCheckedNodes = _useTree.getCheckedNodes,\n        getHalfCheckedKeys = _useTree.getHalfCheckedKeys,\n        getHalfCheckedNodes = _useTree.getHalfCheckedNodes,\n        setChecked = _useTree.setChecked,\n        setCheckedKeys = _useTree.setCheckedKeys,\n        filter = _useTree.filter,\n        setData = _useTree.setData;\n\n    ctx.expose({\n      getCurrentNode: getCurrentNode,\n      getCurrentKey: getCurrentKey,\n      setCurrentKey: setCurrentKey,\n      getCheckedKeys: getCheckedKeys,\n      getCheckedNodes: getCheckedNodes,\n      getHalfCheckedKeys: getHalfCheckedKeys,\n      getHalfCheckedNodes: getHalfCheckedNodes,\n      setChecked: setChecked,\n      setCheckedKeys: setCheckedKeys,\n      filter: filter,\n      setData: setData\n    });\n    return {\n      t: t,\n      flattenTree: flattenTree,\n      itemSize: 26,\n      isNotEmpty: isNotEmpty,\n      toggleExpand: toggleExpand,\n      toggleCheckbox: toggleCheckbox,\n      isExpanded: isExpanded,\n      isIndeterminate: isIndeterminate,\n      isChecked: isChecked,\n      isDisabled: isDisabled,\n      isCurrent: isCurrent,\n      isForceHiddenExpandIcon: isForceHiddenExpandIcon,\n      handleNodeClick: handleNodeClick,\n      handleNodeCheck: handleNodeCheck\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}