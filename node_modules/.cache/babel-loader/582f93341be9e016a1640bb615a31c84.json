{"ast":null,"code":"import { defineComponent, inject, ref, computed, watch } from 'vue';\nimport dayjs from 'dayjs';\nimport { ElButton } from '../../../button/index.mjs';\nimport '../../../../directives/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { ElInput } from '../../../input/index.mjs';\nimport '../../../time-picker/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport { EVENT_CODE } from '../../../../utils/aria.mjs';\nimport { isValidDatePickType } from '../../../../utils/validators.mjs';\nimport { DArrowLeft, ArrowLeft, DArrowRight, ArrowRight } from '@element-plus/icons';\nimport './basic-date-table.mjs';\nimport './basic-month-table.mjs';\nimport './basic-year-table.mjs';\nimport script$1 from './basic-date-table.vue_vue&type=script&lang.mjs';\nimport script$2 from '../../../time-picker/src/time-picker-com/panel-time-pick.vue_vue&type=script&lang.mjs';\nimport script$3 from './basic-month-table.vue_vue&type=script&lang.mjs';\nimport script$4 from './basic-year-table.vue_vue&type=script&lang.mjs';\nimport ClickOutside from '../../../../directives/click-outside/index.mjs';\nimport { useLocaleInject } from '../../../../hooks/use-locale/index.mjs';\nimport { extractTimeFormat, extractDateFormat } from '../../../time-picker/src/common/date-utils.mjs';\n\nvar timeWithinRange = function timeWithinRange(_, __, ___) {\n  return true;\n};\n\nvar script = defineComponent({\n  components: {\n    DateTable: script$1,\n    ElInput: ElInput,\n    ElButton: ElButton,\n    ElIcon: ElIcon,\n    TimePickPanel: script$2,\n    MonthTable: script$3,\n    YearTable: script$4,\n    DArrowLeft: DArrowLeft,\n    ArrowLeft: ArrowLeft,\n    DArrowRight: DArrowRight,\n    ArrowRight: ArrowRight\n  },\n  directives: {\n    clickoutside: ClickOutside\n  },\n  props: {\n    visible: {\n      type: Boolean,\n      \"default\": false\n    },\n    parsedValue: {\n      type: [Object, Array]\n    },\n    format: {\n      type: String,\n      \"default\": \"\"\n    },\n    type: {\n      type: String,\n      required: true,\n      validator: isValidDatePickType\n    }\n  },\n  emits: [\"pick\", \"set-picker-option\"],\n  setup: function setup(props, ctx) {\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t,\n        lang = _useLocaleInject.lang;\n\n    var pickerBase = inject(\"EP_PICKER_BASE\");\n    var _pickerBase$props = pickerBase.props,\n        shortcuts = _pickerBase$props.shortcuts,\n        disabledDate = _pickerBase$props.disabledDate,\n        cellClassName = _pickerBase$props.cellClassName,\n        defaultTime = _pickerBase$props.defaultTime,\n        defaultValue = _pickerBase$props.defaultValue,\n        arrowControl = _pickerBase$props.arrowControl;\n    var innerDate = ref(dayjs().locale(lang.value));\n    var defaultTimeD = computed(function () {\n      return dayjs(defaultTime).locale(lang.value);\n    });\n    var month = computed(function () {\n      return innerDate.value.month();\n    });\n    var year = computed(function () {\n      return innerDate.value.year();\n    });\n    var selectableRange = ref([]);\n    var userInputDate = ref(null);\n    var userInputTime = ref(null);\n\n    var checkDateWithinRange = function checkDateWithinRange(date) {\n      return selectableRange.value.length > 0 ? timeWithinRange(date, selectableRange.value, props.format || \"HH:mm:ss\") : true;\n    };\n\n    var formatEmit = function formatEmit(emitDayjs) {\n      if (defaultTime && !visibleTime.value) {\n        return defaultTimeD.value.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());\n      }\n\n      if (showTime.value) return emitDayjs.millisecond(0);\n      return emitDayjs.startOf(\"day\");\n    };\n\n    var emit = function emit(value) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (!value) {\n        ctx.emit.apply(ctx, [\"pick\", value].concat(args));\n      } else if (Array.isArray(value)) {\n        var dates = value.map(formatEmit);\n        ctx.emit.apply(ctx, [\"pick\", dates].concat(args));\n      } else {\n        ctx.emit.apply(ctx, [\"pick\", formatEmit(value)].concat(args));\n      }\n\n      userInputDate.value = null;\n      userInputTime.value = null;\n    };\n\n    var handleDatePick = function handleDatePick(value) {\n      if (selectionMode.value === \"day\") {\n        var newDate = props.parsedValue ? props.parsedValue.year(value.year()).month(value.month()).date(value.date()) : value;\n\n        if (!checkDateWithinRange(newDate)) {\n          newDate = selectableRange.value[0][0].year(value.year()).month(value.month()).date(value.date());\n        }\n\n        innerDate.value = newDate;\n        emit(newDate, showTime.value);\n      } else if (selectionMode.value === \"week\") {\n        emit(value.date);\n      } else if (selectionMode.value === \"dates\") {\n        emit(value, true);\n      }\n    };\n\n    var prevMonth_ = function prevMonth_() {\n      innerDate.value = innerDate.value.subtract(1, \"month\");\n    };\n\n    var nextMonth_ = function nextMonth_() {\n      innerDate.value = innerDate.value.add(1, \"month\");\n    };\n\n    var prevYear_ = function prevYear_() {\n      if (currentView.value === \"year\") {\n        innerDate.value = innerDate.value.subtract(10, \"year\");\n      } else {\n        innerDate.value = innerDate.value.subtract(1, \"year\");\n      }\n    };\n\n    var nextYear_ = function nextYear_() {\n      if (currentView.value === \"year\") {\n        innerDate.value = innerDate.value.add(10, \"year\");\n      } else {\n        innerDate.value = innerDate.value.add(1, \"year\");\n      }\n    };\n\n    var currentView = ref(\"date\");\n    var yearLabel = computed(function () {\n      var yearTranslation = t(\"el.datepicker.year\");\n\n      if (currentView.value === \"year\") {\n        var startYear = Math.floor(year.value / 10) * 10;\n\n        if (yearTranslation) {\n          return \"\".concat(startYear, \" \").concat(yearTranslation, \" - \").concat(startYear + 9, \" \").concat(yearTranslation);\n        }\n\n        return \"\".concat(startYear, \" - \").concat(startYear + 9);\n      }\n\n      return \"\".concat(year.value, \" \").concat(yearTranslation);\n    });\n\n    var handleShortcutClick = function handleShortcutClick(shortcut) {\n      var shortcutValue = typeof shortcut.value === \"function\" ? shortcut.value() : shortcut.value;\n\n      if (shortcutValue) {\n        emit(dayjs(shortcutValue).locale(lang.value));\n        return;\n      }\n\n      if (shortcut.onClick) {\n        shortcut.onClick(ctx);\n      }\n    };\n\n    var selectionMode = computed(function () {\n      if ([\"week\", \"month\", \"year\", \"dates\"].includes(props.type)) {\n        return props.type;\n      }\n\n      return \"day\";\n    });\n    watch(function () {\n      return selectionMode.value;\n    }, function (val) {\n      if ([\"month\", \"year\"].includes(val)) {\n        currentView.value = val;\n        return;\n      }\n\n      currentView.value = \"date\";\n    }, {\n      immediate: true\n    });\n    var hasShortcuts = computed(function () {\n      return !!shortcuts.length;\n    });\n\n    var handleMonthPick = function handleMonthPick(month2) {\n      innerDate.value = innerDate.value.startOf(\"month\").month(month2);\n\n      if (selectionMode.value === \"month\") {\n        emit(innerDate.value);\n      } else {\n        currentView.value = \"date\";\n      }\n    };\n\n    var handleYearPick = function handleYearPick(year2) {\n      if (selectionMode.value === \"year\") {\n        innerDate.value = innerDate.value.startOf(\"year\").year(year2);\n        emit(innerDate.value);\n      } else {\n        innerDate.value = innerDate.value.year(year2);\n        currentView.value = \"month\";\n      }\n    };\n\n    var showMonthPicker = function showMonthPicker() {\n      currentView.value = \"month\";\n    };\n\n    var showYearPicker = function showYearPicker() {\n      currentView.value = \"year\";\n    };\n\n    var showTime = computed(function () {\n      return props.type === \"datetime\" || props.type === \"datetimerange\";\n    });\n    var footerVisible = computed(function () {\n      return showTime.value || selectionMode.value === \"dates\";\n    });\n\n    var onConfirm = function onConfirm() {\n      if (selectionMode.value === \"dates\") {\n        emit(props.parsedValue);\n      } else {\n        var result = props.parsedValue;\n\n        if (!result) {\n          var defaultTimeD2 = dayjs(defaultTime).locale(lang.value);\n          var defaultValueD = getDefaultValue();\n          result = defaultTimeD2.year(defaultValueD.year()).month(defaultValueD.month()).date(defaultValueD.date());\n        }\n\n        innerDate.value = result;\n        emit(result);\n      }\n    };\n\n    var changeToNow = function changeToNow() {\n      var now = dayjs().locale(lang.value);\n      var nowDate = now.toDate();\n\n      if ((!disabledDate || !disabledDate(nowDate)) && checkDateWithinRange(nowDate)) {\n        innerDate.value = dayjs().locale(lang.value);\n        emit(innerDate.value);\n      }\n    };\n\n    var timeFormat = computed(function () {\n      return extractTimeFormat(props.format);\n    });\n    var dateFormat = computed(function () {\n      return extractDateFormat(props.format);\n    });\n    var visibleTime = computed(function () {\n      if (userInputTime.value) return userInputTime.value;\n      if (!props.parsedValue && !defaultValue) return;\n      return (props.parsedValue || innerDate.value).format(timeFormat.value);\n    });\n    var visibleDate = computed(function () {\n      if (userInputDate.value) return userInputDate.value;\n      if (!props.parsedValue && !defaultValue) return;\n      return (props.parsedValue || innerDate.value).format(dateFormat.value);\n    });\n    var timePickerVisible = ref(false);\n\n    var onTimePickerInputFocus = function onTimePickerInputFocus() {\n      timePickerVisible.value = true;\n    };\n\n    var handleTimePickClose = function handleTimePickClose() {\n      timePickerVisible.value = false;\n    };\n\n    var handleTimePick = function handleTimePick(value, visible, first) {\n      var newDate = props.parsedValue ? props.parsedValue.hour(value.hour()).minute(value.minute()).second(value.second()) : value;\n      innerDate.value = newDate;\n      emit(innerDate.value, true);\n\n      if (!first) {\n        timePickerVisible.value = visible;\n      }\n    };\n\n    var handleVisibleTimeChange = function handleVisibleTimeChange(value) {\n      var newDate = dayjs(value, timeFormat.value).locale(lang.value);\n\n      if (newDate.isValid() && checkDateWithinRange(newDate)) {\n        innerDate.value = newDate.year(innerDate.value.year()).month(innerDate.value.month()).date(innerDate.value.date());\n        userInputTime.value = null;\n        timePickerVisible.value = false;\n        emit(innerDate.value, true);\n      }\n    };\n\n    var handleVisibleDateChange = function handleVisibleDateChange(value) {\n      var newDate = dayjs(value, dateFormat.value).locale(lang.value);\n\n      if (newDate.isValid()) {\n        if (disabledDate && disabledDate(newDate.toDate())) {\n          return;\n        }\n\n        innerDate.value = newDate.hour(innerDate.value.hour()).minute(innerDate.value.minute()).second(innerDate.value.second());\n        userInputDate.value = null;\n        emit(innerDate.value, true);\n      }\n    };\n\n    var isValidValue = function isValidValue(date) {\n      return dayjs.isDayjs(date) && date.isValid() && (disabledDate ? !disabledDate(date.toDate()) : true);\n    };\n\n    var formatToString = function formatToString(value) {\n      if (selectionMode.value === \"dates\") {\n        return value.map(function (_) {\n          return _.format(props.format);\n        });\n      }\n\n      return value.format(props.format);\n    };\n\n    var parseUserInput = function parseUserInput(value) {\n      return dayjs(value, props.format).locale(lang.value);\n    };\n\n    var getDefaultValue = function getDefaultValue() {\n      var parseDate = dayjs(defaultValue).locale(lang.value);\n\n      if (!defaultValue) {\n        var defaultTimeDValue = defaultTimeD.value;\n        return dayjs().hour(defaultTimeDValue.hour()).minute(defaultTimeDValue.minute()).second(defaultTimeDValue.second()).locale(lang.value);\n      }\n\n      return parseDate;\n    };\n\n    var handleKeydown = function handleKeydown(event) {\n      var code = event.code,\n          keyCode = event.keyCode;\n      var list = [EVENT_CODE.up, EVENT_CODE.down, EVENT_CODE.left, EVENT_CODE.right];\n\n      if (props.visible && !timePickerVisible.value) {\n        if (list.includes(code)) {\n          handleKeyControl(keyCode);\n          event.stopPropagation();\n          event.preventDefault();\n        }\n\n        if (code === EVENT_CODE.enter && userInputDate.value === null && userInputTime.value === null) {\n          emit(innerDate, false);\n        }\n      }\n    };\n\n    var handleKeyControl = function handleKeyControl(keyCode) {\n      var mapping = {\n        year: {\n          38: -4,\n          40: 4,\n          37: -1,\n          39: 1,\n          offset: function offset(date, step) {\n            return date.setFullYear(date.getFullYear() + step);\n          }\n        },\n        month: {\n          38: -4,\n          40: 4,\n          37: -1,\n          39: 1,\n          offset: function offset(date, step) {\n            return date.setMonth(date.getMonth() + step);\n          }\n        },\n        week: {\n          38: -1,\n          40: 1,\n          37: -1,\n          39: 1,\n          offset: function offset(date, step) {\n            return date.setDate(date.getDate() + step * 7);\n          }\n        },\n        day: {\n          38: -7,\n          40: 7,\n          37: -1,\n          39: 1,\n          offset: function offset(date, step) {\n            return date.setDate(date.getDate() + step);\n          }\n        }\n      };\n      var newDate = innerDate.value.toDate();\n\n      while (Math.abs(innerDate.value.diff(newDate, \"year\", true)) < 1) {\n        var map = mapping[selectionMode.value];\n        map.offset(newDate, map[keyCode]);\n\n        if (disabledDate && disabledDate(newDate)) {\n          continue;\n        }\n\n        var result = dayjs(newDate).locale(lang.value);\n        innerDate.value = result;\n        ctx.emit(\"pick\", result, true);\n        break;\n      }\n    };\n\n    ctx.emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    ctx.emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    ctx.emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    ctx.emit(\"set-picker-option\", [\"handleKeydown\", handleKeydown]);\n    watch(function () {\n      return props.parsedValue;\n    }, function (val) {\n      if (val) {\n        if (selectionMode.value === \"dates\") return;\n        if (Array.isArray(val)) return;\n        innerDate.value = val;\n      } else {\n        innerDate.value = getDefaultValue();\n      }\n    }, {\n      immediate: true\n    });\n    return {\n      handleTimePick: handleTimePick,\n      handleTimePickClose: handleTimePickClose,\n      onTimePickerInputFocus: onTimePickerInputFocus,\n      timePickerVisible: timePickerVisible,\n      visibleTime: visibleTime,\n      visibleDate: visibleDate,\n      showTime: showTime,\n      changeToNow: changeToNow,\n      onConfirm: onConfirm,\n      footerVisible: footerVisible,\n      handleYearPick: handleYearPick,\n      showMonthPicker: showMonthPicker,\n      showYearPicker: showYearPicker,\n      handleMonthPick: handleMonthPick,\n      hasShortcuts: hasShortcuts,\n      shortcuts: shortcuts,\n      arrowControl: arrowControl,\n      disabledDate: disabledDate,\n      cellClassName: cellClassName,\n      selectionMode: selectionMode,\n      handleShortcutClick: handleShortcutClick,\n      prevYear_: prevYear_,\n      nextYear_: nextYear_,\n      prevMonth_: prevMonth_,\n      nextMonth_: nextMonth_,\n      innerDate: innerDate,\n      t: t,\n      yearLabel: yearLabel,\n      currentView: currentView,\n      month: month,\n      handleDatePick: handleDatePick,\n      handleVisibleTimeChange: handleVisibleTimeChange,\n      handleVisibleDateChange: handleVisibleDateChange,\n      timeFormat: timeFormat,\n      userInputTime: userInputTime,\n      userInputDate: userInputDate\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}