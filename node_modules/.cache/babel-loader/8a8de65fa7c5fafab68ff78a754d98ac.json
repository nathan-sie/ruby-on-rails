{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { ref, computed, defineComponent, watch, reactive, toRefs, provide } from 'vue';\nimport '../../../tokens/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { elFormKey } from '../../../tokens/form.mjs';\n\nfunction useFormLabelWidth() {\n  var potentialLabelWidthArr = ref([]);\n  var autoLabelWidth = computed(function () {\n    if (!potentialLabelWidthArr.value.length) return \"0\";\n    var max = Math.max.apply(Math, _toConsumableArray(potentialLabelWidthArr.value));\n    return max ? \"\".concat(max, \"px\") : \"\";\n  });\n\n  function getLabelWidthIndex(width) {\n    var index = potentialLabelWidthArr.value.indexOf(width);\n\n    if (index === -1) {\n      debugWarn(\"Form\", \"unexpected width \".concat(width));\n    }\n\n    return index;\n  }\n\n  function registerLabelWidth(val, oldVal) {\n    if (val && oldVal) {\n      var index = getLabelWidthIndex(oldVal);\n      potentialLabelWidthArr.value.splice(index, 1, val);\n    } else if (val) {\n      potentialLabelWidthArr.value.push(val);\n    }\n  }\n\n  function deregisterLabelWidth(val) {\n    var index = getLabelWidthIndex(val);\n    index > -1 && potentialLabelWidthArr.value.splice(index, 1);\n  }\n\n  return {\n    autoLabelWidth: autoLabelWidth,\n    registerLabelWidth: registerLabelWidth,\n    deregisterLabelWidth: deregisterLabelWidth\n  };\n}\n\nvar script = defineComponent({\n  name: \"ElForm\",\n  props: {\n    model: Object,\n    rules: Object,\n    labelPosition: String,\n    labelWidth: {\n      type: [String, Number],\n      \"default\": \"\"\n    },\n    labelSuffix: {\n      type: String,\n      \"default\": \"\"\n    },\n    inline: Boolean,\n    inlineMessage: Boolean,\n    statusIcon: Boolean,\n    showMessage: {\n      type: Boolean,\n      \"default\": true\n    },\n    size: String,\n    disabled: Boolean,\n    validateOnRuleChange: {\n      type: Boolean,\n      \"default\": true\n    },\n    hideRequiredAsterisk: {\n      type: Boolean,\n      \"default\": false\n    },\n    scrollToError: Boolean\n  },\n  emits: [\"validate\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var fields = [];\n    watch(function () {\n      return props.rules;\n    }, function () {\n      fields.forEach(function (field) {\n        field.evaluateValidationEnabled();\n      });\n\n      if (props.validateOnRuleChange) {\n        validate(function () {\n          return {};\n        });\n      }\n    });\n\n    var addField = function addField(field) {\n      if (field) {\n        fields.push(field);\n      }\n    };\n\n    var removeField = function removeField(field) {\n      if (field.prop) {\n        fields.splice(fields.indexOf(field), 1);\n      }\n    };\n\n    var resetFields = function resetFields() {\n      if (!props.model) {\n        debugWarn(\"Form\", \"model is required for resetFields to work.\");\n        return;\n      }\n\n      fields.forEach(function (field) {\n        field.resetField();\n      });\n    };\n\n    var clearValidate = function clearValidate() {\n      var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var fds = props2.length ? typeof props2 === \"string\" ? fields.filter(function (field) {\n        return props2 === field.prop;\n      }) : fields.filter(function (field) {\n        return props2.indexOf(field.prop) > -1;\n      }) : fields;\n      fds.forEach(function (field) {\n        field.clearValidate();\n      });\n    };\n\n    var validate = function validate(callback) {\n      if (!props.model) {\n        debugWarn(\"Form\", \"model is required for validate to work!\");\n        return;\n      }\n\n      var promise;\n\n      if (typeof callback !== \"function\") {\n        promise = new Promise(function (resolve, reject) {\n          callback = function callback(valid2, invalidFields2) {\n            if (valid2) {\n              resolve(true);\n            } else {\n              reject(invalidFields2);\n            }\n          };\n        });\n      }\n\n      if (fields.length === 0) {\n        callback(true);\n      }\n\n      var valid = true;\n      var count = 0;\n      var invalidFields = {};\n      var firstInvalidFields;\n\n      var _iterator = _createForOfIteratorHelper(fields),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var field = _step.value;\n          field.validate(\"\", function (message, field2) {\n            if (message) {\n              valid = false;\n              firstInvalidFields || (firstInvalidFields = field2);\n            }\n\n            invalidFields = _objectSpread(_objectSpread({}, invalidFields), field2);\n\n            if (++count === fields.length) {\n              callback(valid, invalidFields);\n            }\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (!valid && props.scrollToError) {\n        scrollToField(Object.keys(firstInvalidFields)[0]);\n      }\n\n      return promise;\n    };\n\n    var validateField = function validateField(props2, cb) {\n      props2 = [].concat(props2);\n      var fds = fields.filter(function (field) {\n        return props2.indexOf(field.prop) !== -1;\n      });\n\n      if (!fields.length) {\n        debugWarn(\"Form\", \"please pass correct props!\");\n        return;\n      }\n\n      fds.forEach(function (field) {\n        field.validate(\"\", cb);\n      });\n    };\n\n    var scrollToField = function scrollToField(prop) {\n      fields.forEach(function (item) {\n        if (item.prop === prop) {\n          item.$el.scrollIntoView();\n        }\n      });\n    };\n\n    var elForm = reactive(_objectSpread(_objectSpread({}, toRefs(props)), {}, {\n      resetFields: resetFields,\n      clearValidate: clearValidate,\n      validateField: validateField,\n      emit: emit,\n      addField: addField,\n      removeField: removeField\n    }, useFormLabelWidth()));\n    provide(elFormKey, elForm);\n    return {\n      validate: validate,\n      resetFields: resetFields,\n      clearValidate: clearValidate,\n      validateField: validateField,\n      scrollToField: scrollToField\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}