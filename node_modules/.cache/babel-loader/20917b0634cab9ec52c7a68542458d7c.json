{"ast":null,"code":"import { defineComponent, ref, computed } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../hooks/index.mjs';\nimport { coerceTruthyValueToArray } from '../../../../utils/util.mjs';\nimport ElDatePickerCell from './basic-cell-render.mjs';\nimport { useLocaleInject } from '../../../../hooks/use-locale/index.mjs';\nvar script = defineComponent({\n  components: {\n    ElDatePickerCell: ElDatePickerCell\n  },\n  props: {\n    date: {\n      type: Object\n    },\n    minDate: {\n      type: Object\n    },\n    maxDate: {\n      type: Object\n    },\n    parsedValue: {\n      type: [Object, Array]\n    },\n    selectionMode: {\n      type: String,\n      \"default\": \"day\"\n    },\n    showWeekNumber: {\n      type: Boolean,\n      \"default\": false\n    },\n    disabledDate: {\n      type: Function\n    },\n    cellClassName: {\n      type: Function\n    },\n    rangeState: {\n      type: Object,\n      \"default\": function _default() {\n        return {\n          endDate: null,\n          selecting: false\n        };\n      }\n    }\n  },\n  emits: [\"changerange\", \"pick\", \"select\"],\n  setup: function setup(props, ctx) {\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t,\n        lang = _useLocaleInject.lang;\n\n    var lastRow = ref(null);\n    var lastColumn = ref(null);\n    var tableRows = ref([[], [], [], [], [], []]);\n    var firstDayOfWeek = props.date.$locale().weekStart || 7;\n    var WEEKS_CONSTANT = props.date.locale(\"en\").localeData().weekdaysShort().map(function (_) {\n      return _.toLowerCase();\n    });\n    var offsetDay = computed(function () {\n      return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;\n    });\n    var startDate = computed(function () {\n      var startDayOfMonth = props.date.startOf(\"month\");\n      return startDayOfMonth.subtract(startDayOfMonth.day() || 7, \"day\");\n    });\n    var WEEKS = computed(function () {\n      return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);\n    });\n    var rows = computed(function () {\n      var _a;\n\n      var startOfMonth = props.date.startOf(\"month\");\n      var startOfMonthDay = startOfMonth.day() || 7;\n      var dateCountOfMonth = startOfMonth.daysInMonth();\n      var dateCountOfLastMonth = startOfMonth.subtract(1, \"month\").daysInMonth();\n      var offset = offsetDay.value;\n      var rows_ = tableRows.value;\n      var count = 1;\n      var selectedDate = props.selectionMode === \"dates\" ? coerceTruthyValueToArray(props.parsedValue) : [];\n      var calNow = dayjs().locale(lang.value).startOf(\"day\");\n\n      for (var i = 0; i < 6; i++) {\n        var row = rows_[i];\n\n        if (props.showWeekNumber) {\n          if (!row[0]) {\n            row[0] = {\n              type: \"week\",\n              text: startDate.value.add(i * 7 + 1, \"day\").week()\n            };\n          }\n        }\n\n        var _loop = function _loop(j) {\n          var cell = row[props.showWeekNumber ? j + 1 : j];\n\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: \"normal\",\n              inRange: false,\n              start: false,\n              end: false\n            };\n          }\n\n          var index = i * 7 + j;\n          var calTime = startDate.value.add(index - offset, \"day\");\n          cell.dayjs = calTime;\n          cell.date = calTime.toDate();\n          cell.timestamp = calTime.valueOf();\n          cell.type = \"normal\";\n          var calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate;\n          cell.inRange = props.minDate && calTime.isSameOrAfter(props.minDate, \"day\") && calEndDate && calTime.isSameOrBefore(calEndDate, \"day\") || props.minDate && calTime.isSameOrBefore(props.minDate, \"day\") && calEndDate && calTime.isSameOrAfter(calEndDate, \"day\");\n\n          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, \"day\");\n            cell.end = props.minDate && calTime.isSame(props.minDate, \"day\");\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, \"day\");\n            cell.end = calEndDate && calTime.isSame(calEndDate, \"day\");\n          }\n\n          var isToday = calTime.isSame(calNow, \"day\");\n\n          if (isToday) {\n            cell.type = \"today\";\n          }\n\n          if (i >= 0 && i <= 1) {\n            var numberOfDaysFromPreviousMonth = startOfMonthDay + offset < 0 ? 7 + startOfMonthDay + offset : startOfMonthDay + offset;\n\n            if (j + i * 7 >= numberOfDaysFromPreviousMonth) {\n              cell.text = count++;\n            } else {\n              cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - j % 7) + 1 + i * 7;\n              cell.type = \"prev-month\";\n            }\n          } else {\n            if (count <= dateCountOfMonth) {\n              cell.text = count++;\n            } else {\n              cell.text = count++ - dateCountOfMonth;\n              cell.type = \"next-month\";\n            }\n          }\n\n          var cellDate = calTime.toDate();\n          cell.selected = selectedDate.find(function (_) {\n            return _.valueOf() === calTime.valueOf();\n          });\n          cell.isSelected = !!cell.selected;\n          cell.isCurrent = isCurrent(cell);\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate);\n          cell.customClass = props.cellClassName && props.cellClassName(cellDate);\n          row[props.showWeekNumber ? j + 1 : j] = cell;\n        };\n\n        for (var j = 0; j < 7; j++) {\n          _loop(j);\n        }\n\n        if (props.selectionMode === \"week\") {\n          var start = props.showWeekNumber ? 1 : 0;\n          var end = props.showWeekNumber ? 7 : 6;\n          var isActive = isWeekActive(row[start + 1]);\n          row[start].inRange = isActive;\n          row[start].start = isActive;\n          row[end].inRange = isActive;\n          row[end].end = isActive;\n        }\n      }\n\n      return rows_;\n    });\n\n    var isCurrent = function isCurrent(cell) {\n      return props.selectionMode === \"day\" && (cell.type === \"normal\" || cell.type === \"today\") && cellMatchesDate(cell, props.parsedValue);\n    };\n\n    var cellMatchesDate = function cellMatchesDate(cell, date) {\n      if (!date) return false;\n      return dayjs(date).locale(lang.value).isSame(props.date.date(Number(cell.text)), \"day\");\n    };\n\n    var getCellClasses = function getCellClasses(cell) {\n      var classes = [];\n\n      if ((cell.type === \"normal\" || cell.type === \"today\") && !cell.disabled) {\n        classes.push(\"available\");\n\n        if (cell.type === \"today\") {\n          classes.push(\"today\");\n        }\n      } else {\n        classes.push(cell.type);\n      }\n\n      if (isCurrent(cell)) {\n        classes.push(\"current\");\n      }\n\n      if (cell.inRange && (cell.type === \"normal\" || cell.type === \"today\" || props.selectionMode === \"week\")) {\n        classes.push(\"in-range\");\n\n        if (cell.start) {\n          classes.push(\"start-date\");\n        }\n\n        if (cell.end) {\n          classes.push(\"end-date\");\n        }\n      }\n\n      if (cell.disabled) {\n        classes.push(\"disabled\");\n      }\n\n      if (cell.selected) {\n        classes.push(\"selected\");\n      }\n\n      if (cell.customClass) {\n        classes.push(cell.customClass);\n      }\n\n      return classes.join(\" \");\n    };\n\n    var getDateOfCell = function getDateOfCell(row, column) {\n      var offsetFromStart = row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value;\n      return startDate.value.add(offsetFromStart, \"day\");\n    };\n\n    var handleMouseMove = function handleMouseMove(event) {\n      if (!props.rangeState.selecting) return;\n      var target = event.target;\n\n      if (target.tagName === \"SPAN\") {\n        target = target.parentNode.parentNode;\n      }\n\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n\n      if (target.tagName !== \"TD\") return;\n      var row = target.parentNode.rowIndex - 1;\n      var column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        ctx.emit(\"changerange\", {\n          selecting: true,\n          endDate: getDateOfCell(row, column)\n        });\n      }\n    };\n\n    var handleClick = function handleClick(event) {\n      var target = event.target;\n\n      while (target) {\n        if (target.tagName === \"TD\") {\n          break;\n        }\n\n        target = target.parentNode;\n      }\n\n      if (!target || target.tagName !== \"TD\") return;\n      var row = target.parentNode.rowIndex - 1;\n      var column = target.cellIndex;\n      var cell = rows.value[row][column];\n      if (cell.disabled || cell.type === \"week\") return;\n      var newDate = getDateOfCell(row, column);\n\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting) {\n          ctx.emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          ctx.emit(\"select\", true);\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            ctx.emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n\n          ctx.emit(\"select\", false);\n        }\n      } else if (props.selectionMode === \"day\") {\n        ctx.emit(\"pick\", newDate);\n      } else if (props.selectionMode === \"week\") {\n        var weekNumber = newDate.week();\n        var value = \"\".concat(newDate.year(), \"w\").concat(weekNumber);\n        ctx.emit(\"pick\", {\n          year: newDate.year(),\n          week: weekNumber,\n          value: value,\n          date: newDate.startOf(\"week\")\n        });\n      } else if (props.selectionMode === \"dates\") {\n        var newValue = cell.selected ? coerceTruthyValueToArray(props.parsedValue).filter(function (_) {\n          return _.valueOf() !== newDate.valueOf();\n        }) : coerceTruthyValueToArray(props.parsedValue).concat([newDate]);\n        ctx.emit(\"pick\", newValue);\n      }\n    };\n\n    var isWeekActive = function isWeekActive(cell) {\n      if (props.selectionMode !== \"week\") return false;\n      var newDate = props.date.startOf(\"day\");\n\n      if (cell.type === \"prev-month\") {\n        newDate = newDate.subtract(1, \"month\");\n      }\n\n      if (cell.type === \"next-month\") {\n        newDate = newDate.add(1, \"month\");\n      }\n\n      newDate = newDate.date(parseInt(cell.text, 10));\n\n      if (props.parsedValue && !Array.isArray(props.parsedValue)) {\n        var dayOffset = (props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;\n        var weekDate = props.parsedValue.subtract(dayOffset, \"day\");\n        return weekDate.isSame(newDate, \"day\");\n      }\n\n      return false;\n    };\n\n    return {\n      handleMouseMove: handleMouseMove,\n      t: t,\n      rows: rows,\n      isWeekActive: isWeekActive,\n      getCellClasses: getCellClasses,\n      WEEKS: WEEKS,\n      handleClick: handleClick\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}