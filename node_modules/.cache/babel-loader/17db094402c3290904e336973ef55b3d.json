{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, getCurrentInstance, reactive, inject, computed, onMounted, toRefs, onUnmounted } from 'vue';\nimport { autoprefixer } from '../../../utils/util.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nvar CARD_SCALE = 0.83;\nvar script = defineComponent({\n  name: \"ElCarouselItem\",\n  props: {\n    name: {\n      type: String,\n      \"default\": \"\"\n    },\n    label: {\n      type: [String, Number],\n      \"default\": \"\"\n    }\n  },\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n    instance.uid;\n    var data = reactive({\n      hover: false,\n      translate: 0,\n      scale: 1,\n      active: false,\n      ready: false,\n      inStage: false,\n      animating: false\n    });\n    var injectCarouselScope = inject(\"injectCarouselScope\");\n    var parentDirection = computed(function () {\n      return injectCarouselScope.direction;\n    });\n    var itemStyle = computed(function () {\n      var translateType = parentDirection.value === \"vertical\" ? \"translateY\" : \"translateX\";\n      var value = \"\".concat(translateType, \"(\").concat(data.translate, \"px) scale(\").concat(data.scale, \")\");\n      var style = {\n        transform: value\n      };\n      return autoprefixer(style);\n    });\n\n    function processIndex(index, activeIndex, length) {\n      if (activeIndex === 0 && index === length - 1) {\n        return -1;\n      } else if (activeIndex === length - 1 && index === 0) {\n        return length;\n      } else if (index < activeIndex - 1 && activeIndex - index >= length / 2) {\n        return length + 1;\n      } else if (index > activeIndex + 1 && index - activeIndex >= length / 2) {\n        return -2;\n      }\n\n      return index;\n    }\n\n    function calcCardTranslate(index, activeIndex) {\n      var _a;\n\n      var parentWidth = ((_a = injectCarouselScope.root.value) == null ? void 0 : _a.offsetWidth) || 0;\n\n      if (data.inStage) {\n        return parentWidth * ((2 - CARD_SCALE) * (index - activeIndex) + 1) / 4;\n      } else if (index < activeIndex) {\n        return -(1 + CARD_SCALE) * parentWidth / 4;\n      } else {\n        return (3 + CARD_SCALE) * parentWidth / 4;\n      }\n    }\n\n    function calcTranslate(index, activeIndex, isVertical) {\n      var _a, _b;\n\n      var distance = (isVertical ? (_a = injectCarouselScope.root.value) == null ? void 0 : _a.offsetHeight : (_b = injectCarouselScope.root.value) == null ? void 0 : _b.offsetWidth) || 0;\n      return distance * (index - activeIndex);\n    }\n\n    var translateItem = function translateItem(index, activeIndex, oldIndex) {\n      var parentType = injectCarouselScope.type;\n      var length = injectCarouselScope.items.value.length;\n\n      if (parentType !== \"card\" && oldIndex !== void 0) {\n        data.animating = index === activeIndex || index === oldIndex;\n      }\n\n      if (index !== activeIndex && length > 2 && injectCarouselScope.loop) {\n        index = processIndex(index, activeIndex, length);\n      }\n\n      if (parentType === \"card\") {\n        if (parentDirection.value === \"vertical\") {\n          debugWarn(\"Carousel\", \"vertical direction is not supported in card mode\");\n        }\n\n        data.inStage = Math.round(Math.abs(index - activeIndex)) <= 1;\n        data.active = index === activeIndex;\n        data.translate = calcCardTranslate(index, activeIndex);\n        data.scale = data.active ? 1 : CARD_SCALE;\n      } else {\n        data.active = index === activeIndex;\n        var isVertical = parentDirection.value === \"vertical\";\n        data.translate = calcTranslate(index, activeIndex, isVertical);\n      }\n\n      data.ready = true;\n    };\n\n    function handleItemClick() {\n      if (injectCarouselScope && injectCarouselScope.type === \"card\") {\n        var index = injectCarouselScope.items.value.map(function (d) {\n          return d.uid;\n        }).indexOf(instance.uid);\n        injectCarouselScope.setActiveItem(index);\n      }\n    }\n\n    onMounted(function () {\n      if (injectCarouselScope.addItem) {\n        injectCarouselScope.addItem(_objectSpread(_objectSpread(_objectSpread({\n          uid: instance.uid\n        }, props), toRefs(data)), {}, {\n          translateItem: translateItem\n        }));\n      }\n    });\n    onUnmounted(function () {\n      if (injectCarouselScope.removeItem) {\n        injectCarouselScope.removeItem(instance.uid);\n      }\n    });\n    return {\n      data: data,\n      itemStyle: itemStyle,\n      translateItem: translateItem,\n      type: injectCarouselScope.type,\n      handleItemClick: handleItemClick\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}