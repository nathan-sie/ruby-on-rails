{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { defineComponent, ref, computed, nextTick, watch, onMounted } from 'vue';\nimport { isString } from '@vue/shared';\nimport { useThrottleFn, useEventListener } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport { ElImageViewer } from '../../image-viewer/index.mjs';\nimport isServer from '../../../utils/isServer.mjs';\nimport { isInContainer, getScrollContainer } from '../../../utils/dom.mjs';\nimport { imageProps, imageEmits } from './image.mjs';\nimport { useLocaleInject } from '../../../hooks/use-locale/index.mjs';\nimport useAttrs from '../../../hooks/use-attrs/index.mjs';\n\nvar isHtmlElement = function isHtmlElement(e) {\n  return e && e.nodeType === Node.ELEMENT_NODE;\n};\n\nvar prevOverflow = \"\";\nvar script = defineComponent({\n  name: \"ElImage\",\n  components: {\n    ImageViewer: ElImageViewer\n  },\n  inheritAttrs: false,\n  props: imageProps,\n  emits: imageEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        rawAttrs = _ref.attrs;\n\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t;\n\n    var attrs = useAttrs();\n    var hasLoadError = ref(false);\n    var loading = ref(true);\n    var imgWidth = ref(0);\n    var imgHeight = ref(0);\n    var showViewer = ref(false);\n    var container = ref();\n\n    var _scrollContainer = ref();\n\n    var stopScrollListener;\n    var stopWheelListener;\n    var containerStyle = computed(function () {\n      return rawAttrs.style;\n    });\n    var imageStyle = computed(function () {\n      var fit = props.fit;\n\n      if (!isServer && fit) {\n        return {\n          objectFit: fit\n        };\n      }\n\n      return {};\n    });\n    var preview = computed(function () {\n      var previewSrcList = props.previewSrcList;\n      return Array.isArray(previewSrcList) && previewSrcList.length > 0;\n    });\n    var imageIndex = computed(function () {\n      var src = props.src,\n          previewSrcList = props.previewSrcList,\n          initialIndex = props.initialIndex;\n      var previewIndex = initialIndex;\n      var srcIndex = previewSrcList.indexOf(src);\n\n      if (srcIndex >= 0) {\n        previewIndex = srcIndex;\n      }\n\n      return previewIndex;\n    });\n\n    var loadImage = function loadImage() {\n      if (isServer) return;\n      loading.value = true;\n      hasLoadError.value = false;\n      var img = new Image();\n      img.addEventListener(\"load\", function (e) {\n        return handleLoad(e, img);\n      });\n      img.addEventListener(\"error\", handleError);\n      Object.entries(attrs.value).forEach(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            key = _ref3[0],\n            value = _ref3[1];\n\n        if (key.toLowerCase() === \"onload\") return;\n        img.setAttribute(key, value);\n      });\n      img.src = props.src;\n    };\n\n    function handleLoad(e, img) {\n      imgWidth.value = img.width;\n      imgHeight.value = img.height;\n      loading.value = false;\n      hasLoadError.value = false;\n    }\n\n    function handleError(event) {\n      loading.value = false;\n      hasLoadError.value = true;\n      emit(\"error\", event);\n    }\n\n    function handleLazyLoad() {\n      if (isInContainer(container.value, _scrollContainer.value)) {\n        loadImage();\n        removeLazyLoadListener();\n      }\n    }\n\n    var lazyLoadHandler = useThrottleFn(handleLazyLoad, 200);\n\n    function addLazyLoadListener() {\n      return _addLazyLoadListener.apply(this, arguments);\n    }\n\n    function _addLazyLoadListener() {\n      _addLazyLoadListener = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _a, scrollContainer;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!isServer) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _context.next = 4;\n                return nextTick();\n\n              case 4:\n                scrollContainer = props.scrollContainer;\n\n                if (isHtmlElement(scrollContainer)) {\n                  _scrollContainer.value = scrollContainer;\n                } else if (isString(scrollContainer) && scrollContainer !== \"\") {\n                  _scrollContainer.value = (_a = document.querySelector(scrollContainer)) != null ? _a : void 0;\n                } else if (container.value) {\n                  _scrollContainer.value = getScrollContainer(container.value);\n                }\n\n                if (_scrollContainer.value) {\n                  stopScrollListener = useEventListener(_scrollContainer, \"scroll\", lazyLoadHandler);\n                  setTimeout(function () {\n                    return handleLazyLoad();\n                  }, 100);\n                }\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _addLazyLoadListener.apply(this, arguments);\n    }\n\n    function removeLazyLoadListener() {\n      if (isServer || !_scrollContainer.value || !lazyLoadHandler) return;\n      stopScrollListener();\n      _scrollContainer.value = void 0;\n    }\n\n    function wheelHandler(e) {\n      if (!e.ctrlKey) return;\n\n      if (e.deltaY < 0) {\n        e.preventDefault();\n        return false;\n      } else if (e.deltaY > 0) {\n        e.preventDefault();\n        return false;\n      }\n    }\n\n    function clickHandler() {\n      if (!preview.value) return;\n      stopWheelListener = useEventListener(\"wheel\", wheelHandler, {\n        passive: false\n      });\n      prevOverflow = document.body.style.overflow;\n      document.body.style.overflow = \"hidden\";\n      showViewer.value = true;\n    }\n\n    function closeViewer() {\n      stopWheelListener == null ? void 0 : stopWheelListener();\n      document.body.style.overflow = prevOverflow;\n      showViewer.value = false;\n      emit(\"close\");\n    }\n\n    function switchViewer(val) {\n      emit(\"switch\", val);\n    }\n\n    watch(function () {\n      return props.src;\n    }, function () {\n      if (props.lazy) {\n        loading.value = true;\n        hasLoadError.value = false;\n        removeLazyLoadListener();\n        addLazyLoadListener();\n      } else {\n        loadImage();\n      }\n    });\n    onMounted(function () {\n      if (props.lazy) {\n        addLazyLoadListener();\n      } else {\n        loadImage();\n      }\n    });\n    return {\n      attrs: attrs,\n      loading: loading,\n      hasLoadError: hasLoadError,\n      showViewer: showViewer,\n      containerStyle: containerStyle,\n      imageStyle: imageStyle,\n      preview: preview,\n      imageIndex: imageIndex,\n      container: container,\n      clickHandler: clickHandler,\n      closeViewer: closeViewer,\n      switchViewer: switchViewer,\n      t: t\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}