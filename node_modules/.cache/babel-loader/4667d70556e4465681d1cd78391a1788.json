{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, computed } from 'vue';\nimport { isNumber } from '../../../utils/util.mjs';\nimport { iconProps } from './icon.mjs';\nimport { isString } from '@vue/shared';\nvar script = defineComponent({\n  name: \"ElIcon\",\n  inheritAttrs: false,\n  props: iconProps,\n  setup: function setup(props) {\n    return {\n      style: computed(function () {\n        if (!props.size && !props.color) {\n          return {};\n        }\n\n        var size = props.size;\n\n        if (isNumber(size) || isString(size) && !size.endsWith(\"px\")) {\n          size = \"\".concat(size, \"px\");\n        }\n\n        return _objectSpread(_objectSpread({}, props.size ? {\n          \"--font-size\": size\n        } : {}), props.color ? {\n          \"--color\": props.color\n        } : {});\n      })\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}