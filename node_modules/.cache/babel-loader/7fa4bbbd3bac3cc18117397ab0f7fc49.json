{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { ref, isRef, nextTick } from 'vue';\nimport { hasOwn } from '@vue/shared';\nimport scrollbarWidth from '../../../utils/scrollbar-width.mjs';\nimport isServer from '../../../utils/isServer.mjs';\nimport { parseHeight } from './util.mjs';\n\nvar TableLayout = /*#__PURE__*/function () {\n  function TableLayout(options) {\n    _classCallCheck(this, TableLayout);\n\n    this.observers = [];\n    this.table = null;\n    this.store = null;\n    this.columns = [];\n    this.fit = true;\n    this.showHeader = true;\n    this.height = ref(null);\n    this.scrollX = ref(false);\n    this.scrollY = ref(false);\n    this.bodyWidth = ref(null);\n    this.fixedWidth = ref(null);\n    this.rightFixedWidth = ref(null);\n    this.tableHeight = ref(null);\n    this.headerHeight = ref(44);\n    this.appendHeight = ref(0);\n    this.footerHeight = ref(44);\n    this.viewportHeight = ref(null);\n    this.bodyHeight = ref(null);\n    this.fixedBodyHeight = ref(null);\n    this.gutterWidth = scrollbarWidth();\n\n    for (var name in options) {\n      if (hasOwn(options, name)) {\n        if (isRef(this[name])) {\n          this[name].value = options[name];\n        } else {\n          this[name] = options[name];\n        }\n      }\n    }\n\n    if (!this.table) {\n      throw new Error(\"Table is required for Table Layout\");\n    }\n\n    if (!this.store) {\n      throw new Error(\"Store is required for Table Layout\");\n    }\n  }\n\n  _createClass(TableLayout, [{\n    key: \"updateScrollY\",\n    value: function updateScrollY() {\n      var height = this.height.value;\n      if (height === null) return false;\n      var bodyWrapper = this.table.refs.bodyWrapper;\n\n      if (this.table.vnode.el && bodyWrapper) {\n        var scrollY = true;\n        var prevScrollY = this.scrollY.value;\n\n        if (this.bodyHeight.value === null) {\n          scrollY = false;\n        } else {\n          var body = bodyWrapper.querySelector(\".el-table__body\");\n          scrollY = body.offsetHeight > this.bodyHeight.value;\n        }\n\n        this.scrollY.value = scrollY;\n        return prevScrollY !== scrollY;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(value) {\n      var _this = this;\n\n      var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"height\";\n      if (isServer) return;\n      var el = this.table.vnode.el;\n      value = parseHeight(value);\n      this.height.value = Number(value);\n      if (!el && (value || value === 0)) return nextTick(function () {\n        return _this.setHeight(value, prop);\n      });\n\n      if (typeof value === \"number\") {\n        el.style[prop] = \"\".concat(value, \"px\");\n        this.updateElsHeight();\n      } else if (typeof value === \"string\") {\n        el.style[prop] = value;\n        this.updateElsHeight();\n      }\n    }\n  }, {\n    key: \"setMaxHeight\",\n    value: function setMaxHeight(value) {\n      this.setHeight(value, \"max-height\");\n    }\n  }, {\n    key: \"getFlattenColumns\",\n    value: function getFlattenColumns() {\n      var flattenColumns = [];\n      var columns = this.table.store.states.columns.value;\n      columns.forEach(function (column) {\n        if (column.isColumnGroup) {\n          flattenColumns.push.apply(flattenColumns, column.columns);\n        } else {\n          flattenColumns.push(column);\n        }\n      });\n      return flattenColumns;\n    }\n  }, {\n    key: \"updateElsHeight\",\n    value: function updateElsHeight() {\n      var _this2 = this;\n\n      if (!this.table.$ready) return nextTick(function () {\n        return _this2.updateElsHeight();\n      });\n      var _this$table$refs = this.table.refs,\n          headerWrapper = _this$table$refs.headerWrapper,\n          appendWrapper = _this$table$refs.appendWrapper,\n          footerWrapper = _this$table$refs.footerWrapper;\n      this.appendHeight.value = appendWrapper ? appendWrapper.offsetHeight : 0;\n      if (this.showHeader && !headerWrapper) return;\n      var headerTrElm = headerWrapper ? headerWrapper.querySelector(\".el-table__header tr\") : null;\n      var noneHeader = this.headerDisplayNone(headerTrElm);\n      var headerHeight = this.headerHeight.value = !this.showHeader ? 0 : headerWrapper.offsetHeight;\n\n      if (this.showHeader && !noneHeader && headerWrapper.offsetWidth > 0 && (this.table.store.states.columns.value || []).length > 0 && headerHeight < 2) {\n        return nextTick(function () {\n          return _this2.updateElsHeight();\n        });\n      }\n\n      var tableHeight = this.tableHeight.value = this.table.vnode.el.clientHeight;\n      var footerHeight = this.footerHeight.value = footerWrapper ? footerWrapper.offsetHeight : 0;\n\n      if (this.height.value !== null) {\n        this.bodyHeight.value = tableHeight - headerHeight - footerHeight + (footerWrapper ? 1 : 0);\n      }\n\n      this.fixedBodyHeight.value = this.scrollX.value ? this.bodyHeight.value - this.gutterWidth : this.bodyHeight.value;\n      this.viewportHeight.value = this.scrollX.value ? tableHeight - this.gutterWidth : tableHeight;\n      this.updateScrollY();\n      this.notifyObservers(\"scrollable\");\n    }\n  }, {\n    key: \"headerDisplayNone\",\n    value: function headerDisplayNone(elm) {\n      if (!elm) return true;\n      var headerChild = elm;\n\n      while (headerChild.tagName !== \"DIV\") {\n        if (getComputedStyle(headerChild).display === \"none\") {\n          return true;\n        }\n\n        headerChild = headerChild.parentElement;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateColumnsWidth\",\n    value: function updateColumnsWidth() {\n      if (isServer) return;\n      var fit = this.fit;\n      var bodyWidth = this.table.vnode.el.clientWidth;\n      var bodyMinWidth = 0;\n      var flattenColumns = this.getFlattenColumns();\n      var flexColumns = flattenColumns.filter(function (column) {\n        return typeof column.width !== \"number\";\n      });\n      flattenColumns.forEach(function (column) {\n        if (typeof column.width === \"number\" && column.realWidth) column.realWidth = null;\n      });\n\n      if (flexColumns.length > 0 && fit) {\n        flattenColumns.forEach(function (column) {\n          bodyMinWidth += Number(column.width || column.minWidth || 80);\n        });\n        var scrollYWidth = this.scrollY.value ? this.gutterWidth : 0;\n\n        if (bodyMinWidth <= bodyWidth - scrollYWidth) {\n          this.scrollX.value = false;\n          var totalFlexWidth = bodyWidth - scrollYWidth - bodyMinWidth;\n\n          if (flexColumns.length === 1) {\n            flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth;\n          } else {\n            var allColumnsWidth = flexColumns.reduce(function (prev, column) {\n              return prev + Number(column.minWidth || 80);\n            }, 0);\n            var flexWidthPerPixel = totalFlexWidth / allColumnsWidth;\n            var noneFirstWidth = 0;\n            flexColumns.forEach(function (column, index) {\n              if (index === 0) return;\n              var flexWidth = Math.floor(Number(column.minWidth || 80) * flexWidthPerPixel);\n              noneFirstWidth += flexWidth;\n              column.realWidth = Number(column.minWidth || 80) + flexWidth;\n            });\n            flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;\n          }\n        } else {\n          this.scrollX.value = true;\n          flexColumns.forEach(function (column) {\n            column.realWidth = Number(column.minWidth);\n          });\n        }\n\n        this.bodyWidth.value = Math.max(bodyMinWidth, bodyWidth);\n        this.table.state.resizeState.value.width = this.bodyWidth.value;\n      } else {\n        flattenColumns.forEach(function (column) {\n          if (!column.width && !column.minWidth) {\n            column.realWidth = 80;\n          } else {\n            column.realWidth = Number(column.width || column.minWidth);\n          }\n\n          bodyMinWidth += column.realWidth;\n        });\n        this.scrollX.value = bodyMinWidth > bodyWidth;\n        this.bodyWidth.value = bodyMinWidth;\n      }\n\n      var fixedColumns = this.store.states.fixedColumns.value;\n\n      if (fixedColumns.length > 0) {\n        var fixedWidth = 0;\n        fixedColumns.forEach(function (column) {\n          fixedWidth += Number(column.realWidth || column.width);\n        });\n        this.fixedWidth.value = fixedWidth;\n      }\n\n      var rightFixedColumns = this.store.states.rightFixedColumns.value;\n\n      if (rightFixedColumns.length > 0) {\n        var rightFixedWidth = 0;\n        rightFixedColumns.forEach(function (column) {\n          rightFixedWidth += Number(column.realWidth || column.width);\n        });\n        this.rightFixedWidth.value = rightFixedWidth;\n      }\n\n      this.notifyObservers(\"columns\");\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      this.observers.push(observer);\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      var index = this.observers.indexOf(observer);\n\n      if (index !== -1) {\n        this.observers.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"notifyObservers\",\n    value: function notifyObservers(event) {\n      var _this3 = this;\n\n      var observers = this.observers;\n      observers.forEach(function (observer) {\n        var _a, _b;\n\n        switch (event) {\n          case \"columns\":\n            (_a = observer.state) == null ? void 0 : _a.onColumnsChange(_this3);\n            break;\n\n          case \"scrollable\":\n            (_b = observer.state) == null ? void 0 : _b.onScrollableChange(_this3);\n            break;\n\n          default:\n            throw new Error(\"Table Layout don't have event \".concat(event, \".\"));\n        }\n      });\n    }\n  }]);\n\n  return TableLayout;\n}();\n\nexport { TableLayout as default };","map":null,"metadata":{},"sourceType":"module"}