{"ast":null,"code":"import { defineComponent, ref, watch, computed } from 'vue';\nimport isEqual from 'lodash/isEqual';\nimport { ElSelect, ElOption } from '../../../select/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { buildProps, definePropType, mutable } from '../../../../utils/props.mjs';\nimport { usePagination } from '../usePagination.mjs';\nimport { useLocaleInject } from '../../../../hooks/use-locale/index.mjs';\nvar paginationSizesProps = buildProps({\n  pageSize: {\n    type: Number,\n    required: true\n  },\n  pageSizes: {\n    type: definePropType(Array),\n    \"default\": function _default() {\n      return mutable([10, 20, 30, 40, 50, 100]);\n    }\n  },\n  popperClass: {\n    type: String,\n    \"default\": \"\"\n  },\n  disabled: Boolean\n});\nvar script = defineComponent({\n  name: \"ElPaginationSizes\",\n  components: {\n    ElSelect: ElSelect,\n    ElOption: ElOption\n  },\n  props: paginationSizesProps,\n  emits: [\"page-size-change\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t;\n\n    var pagination = usePagination();\n    var innerPageSize = ref(props.pageSize);\n    watch(function () {\n      return props.pageSizes;\n    }, function (newVal, oldVal) {\n      if (isEqual(newVal, oldVal)) return;\n\n      if (Array.isArray(newVal)) {\n        var pageSize = newVal.indexOf(props.pageSize) > -1 ? props.pageSize : props.pageSizes[0];\n        emit(\"page-size-change\", pageSize);\n      }\n    });\n    watch(function () {\n      return props.pageSize;\n    }, function (newVal) {\n      innerPageSize.value = newVal;\n    });\n    var innerPagesizes = computed(function () {\n      return props.pageSizes;\n    });\n\n    function handleChange(val) {\n      var _a;\n\n      if (val !== innerPageSize.value) {\n        innerPageSize.value = val;\n        (_a = pagination.handleSizeChange) == null ? void 0 : _a.call(pagination, Number(val));\n      }\n    }\n\n    return {\n      innerPagesizes: innerPagesizes,\n      innerPageSize: innerPageSize,\n      t: t,\n      handleChange: handleChange\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}