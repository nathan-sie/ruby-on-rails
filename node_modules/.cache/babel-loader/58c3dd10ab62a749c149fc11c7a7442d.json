{"ast":null,"code":"import { isVNode, Fragment, Text, Comment, openBlock, createBlock, createCommentVNode, camelize } from 'vue';\nimport { hasOwn } from '@vue/shared';\nimport { debugWarn } from './error.mjs';\nvar TEMPLATE = \"template\";\nvar SCOPE = \"VNode\";\nvar PatchFlags;\n\n(function (PatchFlags2) {\n  PatchFlags2[PatchFlags2[\"TEXT\"] = 1] = \"TEXT\";\n  PatchFlags2[PatchFlags2[\"CLASS\"] = 2] = \"CLASS\";\n  PatchFlags2[PatchFlags2[\"STYLE\"] = 4] = \"STYLE\";\n  PatchFlags2[PatchFlags2[\"PROPS\"] = 8] = \"PROPS\";\n  PatchFlags2[PatchFlags2[\"FULL_PROPS\"] = 16] = \"FULL_PROPS\";\n  PatchFlags2[PatchFlags2[\"HYDRATE_EVENTS\"] = 32] = \"HYDRATE_EVENTS\";\n  PatchFlags2[PatchFlags2[\"STABLE_FRAGMENT\"] = 64] = \"STABLE_FRAGMENT\";\n  PatchFlags2[PatchFlags2[\"KEYED_FRAGMENT\"] = 128] = \"KEYED_FRAGMENT\";\n  PatchFlags2[PatchFlags2[\"UNKEYED_FRAGMENT\"] = 256] = \"UNKEYED_FRAGMENT\";\n  PatchFlags2[PatchFlags2[\"NEED_PATCH\"] = 512] = \"NEED_PATCH\";\n  PatchFlags2[PatchFlags2[\"DYNAMIC_SLOTS\"] = 1024] = \"DYNAMIC_SLOTS\";\n  PatchFlags2[PatchFlags2[\"HOISTED\"] = -1] = \"HOISTED\";\n  PatchFlags2[PatchFlags2[\"BAIL\"] = -2] = \"BAIL\";\n})(PatchFlags || (PatchFlags = {}));\n\nvar isFragment = function isFragment(node) {\n  return isVNode(node) && node.type === Fragment;\n};\n\nvar isText = function isText(node) {\n  return node.type === Text;\n};\n\nvar isComment = function isComment(node) {\n  return node.type === Comment;\n};\n\nvar isTemplate = function isTemplate(node) {\n  return node.type === TEMPLATE;\n};\n\nfunction getChildren(node, depth) {\n  if (isComment(node)) return;\n\n  if (isFragment(node) || isTemplate(node)) {\n    return depth > 0 ? getFirstValidNode(node.children, depth - 1) : void 0;\n  }\n\n  return node;\n}\n\nvar isValidElementNode = function isValidElementNode(node) {\n  return isVNode(node) && !isFragment(node) && !isComment(node);\n};\n\nvar getFirstValidNode = function getFirstValidNode(nodes) {\n  var maxDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n\n  if (Array.isArray(nodes)) {\n    return getChildren(nodes[0], maxDepth);\n  } else {\n    return getChildren(nodes, maxDepth);\n  }\n};\n\nfunction renderIf(condition, node, props, children, patchFlag, patchProps) {\n  return condition ? renderBlock(node, props, children, patchFlag, patchProps) : createCommentVNode(\"v-if\", true);\n}\n\nfunction renderBlock(node, props, children, patchFlag, patchProps) {\n  return openBlock(), createBlock(node, props, children, patchFlag, patchProps);\n}\n\nvar getNormalizedProps = function getNormalizedProps(node) {\n  if (!isVNode(node)) {\n    debugWarn(SCOPE, \"value must be a VNode\");\n    return;\n  }\n\n  var raw = node.props || {};\n  var type = node.type.props || {};\n  var props = {};\n  Object.keys(type).forEach(function (key) {\n    if (hasOwn(type[key], \"default\")) {\n      props[key] = type[key][\"default\"];\n    }\n  });\n  Object.keys(raw).forEach(function (key) {\n    props[camelize(key)] = raw[key];\n  });\n  return props;\n};\n\nexport { PatchFlags, SCOPE, getFirstValidNode, getNormalizedProps, isComment, isFragment, isTemplate, isText, isValidElementNode, renderBlock, renderIf };","map":null,"metadata":{},"sourceType":"module"}