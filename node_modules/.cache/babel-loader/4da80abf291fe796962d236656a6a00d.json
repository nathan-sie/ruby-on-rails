{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, computed, nextTick, provide, toRefs, watch } from 'vue';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport { isValidComponentSize } from '../../../utils/validators.mjs';\nimport { useCheckboxGroup } from './useCheckbox.mjs';\nvar script = defineComponent({\n  name: \"ElCheckboxGroup\",\n  props: {\n    modelValue: {\n      type: [Object, Boolean, Array],\n      \"default\": function _default() {\n        return void 0;\n      }\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      \"default\": void 0\n    },\n    max: {\n      type: Number,\n      \"default\": void 0\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    fill: {\n      type: String,\n      \"default\": void 0\n    },\n    textColor: {\n      type: String,\n      \"default\": void 0\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, \"change\"],\n  setup: function setup(props, ctx) {\n    var _useCheckboxGroup = useCheckboxGroup(),\n        elFormItem = _useCheckboxGroup.elFormItem,\n        elFormItemSize = _useCheckboxGroup.elFormItemSize,\n        ELEMENT = _useCheckboxGroup.ELEMENT;\n\n    var checkboxGroupSize = computed(function () {\n      return props.size || elFormItemSize.value || ELEMENT.size;\n    });\n\n    var changeEvent = function changeEvent(value) {\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      nextTick(function () {\n        ctx.emit(\"change\", value);\n      });\n    };\n\n    var modelValue = computed({\n      get: function get() {\n        return props.modelValue;\n      },\n      set: function set(val) {\n        changeEvent(val);\n      }\n    });\n    provide(\"CheckboxGroup\", _objectSpread(_objectSpread({\n      name: \"ElCheckboxGroup\",\n      modelValue: modelValue\n    }, toRefs(props)), {}, {\n      checkboxGroupSize: checkboxGroupSize,\n      changeEvent: changeEvent\n    }));\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      var _a;\n\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n    });\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}