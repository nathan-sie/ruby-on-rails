{"ast":null,"code":"import { defineComponent, shallowRef, reactive, computed, watch, onMounted } from 'vue';\nimport { useEventListener, useResizeObserver } from '@vueuse/core';\nimport { getScrollContainer } from '../../../utils/dom.mjs';\nimport { affixProps, affixEmits } from './affix.mjs';\nvar script = defineComponent({\n  name: \"ElAffix\",\n  props: affixProps,\n  emits: affixEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var target = shallowRef();\n    var root = shallowRef();\n    var scrollContainer = shallowRef();\n    var state = reactive({\n      fixed: false,\n      height: 0,\n      width: 0,\n      scrollTop: 0,\n      clientHeight: 0,\n      transform: 0\n    });\n    var rootStyle = computed(function () {\n      return {\n        height: state.fixed ? \"\".concat(state.height, \"px\") : \"\",\n        width: state.fixed ? \"\".concat(state.width, \"px\") : \"\"\n      };\n    });\n    var affixStyle = computed(function () {\n      if (!state.fixed) return;\n      var offset = props.offset ? \"\".concat(props.offset, \"px\") : 0;\n      var transform = state.transform ? \"translateY(\".concat(state.transform, \"px)\") : \"\";\n      return {\n        height: \"\".concat(state.height, \"px\"),\n        width: \"\".concat(state.width, \"px\"),\n        top: props.position === \"top\" ? offset : \"\",\n        bottom: props.position === \"bottom\" ? offset : \"\",\n        transform: transform,\n        zIndex: props.zIndex\n      };\n    });\n\n    var update = function update() {\n      if (!root.value || !target.value || !scrollContainer.value) return;\n      var rootRect = root.value.getBoundingClientRect();\n      var targetRect = target.value.getBoundingClientRect();\n      state.height = rootRect.height;\n      state.width = rootRect.width;\n      state.scrollTop = scrollContainer.value instanceof Window ? document.documentElement.scrollTop : scrollContainer.value.scrollTop;\n      state.clientHeight = document.documentElement.clientHeight;\n\n      if (props.position === \"top\") {\n        if (props.target) {\n          var difference = targetRect.bottom - props.offset - state.height;\n          state.fixed = props.offset > rootRect.top && targetRect.bottom > 0;\n          state.transform = difference < 0 ? difference : 0;\n        } else {\n          state.fixed = props.offset > rootRect.top;\n        }\n      } else {\n        if (props.target) {\n          var _difference = state.clientHeight - targetRect.top - props.offset - state.height;\n\n          state.fixed = state.clientHeight - props.offset < rootRect.bottom && state.clientHeight > targetRect.top;\n          state.transform = _difference < 0 ? -_difference : 0;\n        } else {\n          state.fixed = state.clientHeight - props.offset < rootRect.bottom;\n        }\n      }\n    };\n\n    var onScroll = function onScroll() {\n      update();\n      emit(\"scroll\", {\n        scrollTop: state.scrollTop,\n        fixed: state.fixed\n      });\n    };\n\n    watch(function () {\n      return state.fixed;\n    }, function () {\n      emit(\"change\", state.fixed);\n    });\n    onMounted(function () {\n      var _a;\n\n      if (props.target) {\n        target.value = (_a = document.querySelector(props.target)) != null ? _a : void 0;\n\n        if (!target.value) {\n          throw new Error(\"Target is not existed: \".concat(props.target));\n        }\n      } else {\n        target.value = document.documentElement;\n      }\n\n      scrollContainer.value = getScrollContainer(root.value, true);\n    });\n    useEventListener(scrollContainer, \"scroll\", onScroll);\n    useResizeObserver(root, function () {\n      return update();\n    });\n    useResizeObserver(target, function () {\n      return update();\n    });\n    return {\n      root: root,\n      state: state,\n      rootStyle: rootStyle,\n      affixStyle: affixStyle,\n      update: update\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}