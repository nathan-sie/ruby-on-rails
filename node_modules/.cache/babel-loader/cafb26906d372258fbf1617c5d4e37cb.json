{"ast":null,"code":"import { isRef, onUnmounted, watch } from 'vue';\nimport scrollbarWidth from '../../utils/scrollbar-width.mjs';\nimport { throwError } from '../../utils/error.mjs';\nimport { removeClass, hasClass, getStyle, addClass } from '../../utils/dom.mjs';\n\nvar useLockScreen = function useLockScreen(trigger) {\n  if (!isRef(trigger)) {\n    throwError(\"[useLockScreen]\", \"You need to pass a ref param to this function\");\n  }\n\n  var scrollBarWidth = 0;\n  var withoutHiddenClass = false;\n  var bodyPaddingRight = \"0\";\n  var computedBodyPaddingRight = 0;\n  onUnmounted(function () {\n    cleanup();\n  });\n\n  var cleanup = function cleanup() {\n    removeClass(document.body, \"el-popup-parent--hidden\");\n\n    if (withoutHiddenClass) {\n      document.body.style.paddingRight = bodyPaddingRight;\n    }\n  };\n\n  watch(trigger, function (val) {\n    if (val) {\n      withoutHiddenClass = !hasClass(document.body, \"el-popup-parent--hidden\");\n\n      if (withoutHiddenClass) {\n        bodyPaddingRight = document.body.style.paddingRight;\n        computedBodyPaddingRight = parseInt(getStyle(document.body, \"paddingRight\"), 10);\n      }\n\n      scrollBarWidth = scrollbarWidth();\n      var bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;\n      var bodyOverflowY = getStyle(document.body, \"overflowY\");\n\n      if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === \"scroll\") && withoutHiddenClass) {\n        document.body.style.paddingRight = \"\".concat(computedBodyPaddingRight + scrollBarWidth, \"px\");\n      }\n\n      addClass(document.body, \"el-popup-parent--hidden\");\n    } else {\n      cleanup();\n    }\n  });\n};\n\nexport { useLockScreen as default };","map":null,"metadata":{},"sourceType":"module"}