{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, onMounted, onBeforeUnmount, onActivated, onDeactivated, renderSlot, toDisplayString, withDirectives, h, Fragment, Teleport } from 'vue';\nimport '../../../directives/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport usePopper from './use-popper/index.mjs';\nimport popperDefaultProps from './use-popper/defaults.mjs';\nimport './renderers/index.mjs';\nimport renderArrow from './renderers/arrow.mjs';\nimport renderPopper from './renderers/popper.mjs';\nimport renderTrigger from './renderers/trigger.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nvar compName = \"ElPopper\";\nvar UPDATE_VISIBLE_EVENT = \"update:visible\";\nvar script = defineComponent({\n  name: compName,\n  props: popperDefaultProps,\n  emits: [UPDATE_VISIBLE_EVENT, \"after-enter\", \"after-leave\", \"before-enter\", \"before-leave\"],\n  setup: function setup(props, ctx) {\n    if (!ctx.slots.trigger) {\n      throwError(compName, \"Trigger must be provided\");\n    }\n\n    var popperStates = usePopper(props, ctx);\n\n    var forceDestroy = function forceDestroy() {\n      return popperStates.doDestroy(true);\n    };\n\n    onMounted(popperStates.initializePopper);\n    onBeforeUnmount(forceDestroy);\n    onActivated(popperStates.initializePopper);\n    onDeactivated(forceDestroy);\n    return popperStates;\n  },\n  render: function render() {\n    var _this = this;\n\n    var _a;\n\n    var $slots = this.$slots,\n        appendToBody = this.appendToBody,\n        kls = this[\"class\"],\n        style = this.style,\n        effect = this.effect,\n        hide = this.hide,\n        onPopperMouseEnter = this.onPopperMouseEnter,\n        onPopperMouseLeave = this.onPopperMouseLeave,\n        onAfterEnter = this.onAfterEnter,\n        onAfterLeave = this.onAfterLeave,\n        onBeforeEnter = this.onBeforeEnter,\n        onBeforeLeave = this.onBeforeLeave,\n        popperClass = this.popperClass,\n        popperId = this.popperId,\n        popperStyle = this.popperStyle,\n        pure = this.pure,\n        showArrow = this.showArrow,\n        transition = this.transition,\n        visibility = this.visibility,\n        stopPopperMouseEvent = this.stopPopperMouseEvent;\n    var isManual = this.isManualMode();\n    var arrow = renderArrow(showArrow);\n    var popper = renderPopper({\n      effect: effect,\n      name: transition,\n      popperClass: popperClass,\n      popperId: popperId,\n      popperStyle: popperStyle,\n      pure: pure,\n      stopPopperMouseEvent: stopPopperMouseEvent,\n      onMouseenter: onPopperMouseEnter,\n      onMouseleave: onPopperMouseLeave,\n      onAfterEnter: onAfterEnter,\n      onAfterLeave: onAfterLeave,\n      onBeforeEnter: onBeforeEnter,\n      onBeforeLeave: onBeforeLeave,\n      visibility: visibility\n    }, [renderSlot($slots, \"default\", {}, function () {\n      return [toDisplayString(_this.content)];\n    }), arrow]);\n\n    var _t = (_a = $slots.trigger) == null ? void 0 : _a.call($slots);\n\n    var triggerProps = _objectSpread({\n      \"aria-describedby\": popperId,\n      \"class\": kls,\n      style: style,\n      ref: \"triggerRef\"\n    }, this.events);\n\n    var trigger = isManual ? renderTrigger(_t, triggerProps) : withDirectives(renderTrigger(_t, triggerProps), [[ClickOutside, hide]]);\n    return h(Fragment, null, [trigger, h(Teleport, {\n      to: \"body\",\n      disabled: !appendToBody\n    }, [popper])]);\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}