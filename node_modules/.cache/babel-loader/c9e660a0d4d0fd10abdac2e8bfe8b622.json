{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { defineComponent, ref, computed } from 'vue';\nimport dayjs from 'dayjs';\nimport localeData from 'dayjs/plugin/localeData';\nimport '../../../hooks/index.mjs';\nimport '../../time-picker/index.mjs';\nimport { rangeArr } from '../../time-picker/src/common/date-utils.mjs';\nimport { useLocaleInject } from '../../../hooks/use-locale/index.mjs';\ndayjs.extend(localeData);\n\nvar getPrevMonthLastDays = function getPrevMonthLastDays(date, amount) {\n  var lastDay = date.subtract(1, \"month\").endOf(\"month\").date();\n  return rangeArr(amount).map(function (_, index) {\n    return lastDay - (amount - index - 1);\n  });\n};\n\nvar getMonthDays = function getMonthDays(date) {\n  var days = date.daysInMonth();\n  return rangeArr(days).map(function (_, index) {\n    return index + 1;\n  });\n};\n\nvar script = defineComponent({\n  props: {\n    selectedDay: {\n      type: Object\n    },\n    range: {\n      type: Array\n    },\n    date: {\n      type: Object\n    },\n    hideHeader: {\n      type: Boolean\n    }\n  },\n  emits: [\"pick\"],\n  setup: function setup(props, ctx) {\n    var _useLocaleInject = useLocaleInject(),\n        lang = _useLocaleInject.lang;\n\n    var WEEK_DAYS = ref(dayjs().locale(lang.value).localeData().weekdaysShort());\n    var now = dayjs().locale(lang.value);\n    var firstDayOfWeek = now.$locale().weekStart || 0;\n\n    var toNestedArr = function toNestedArr(days) {\n      return rangeArr(days.length / 7).map(function (_, index) {\n        var start = index * 7;\n        return days.slice(start, start + 7);\n      });\n    };\n\n    var getFormattedDate = function getFormattedDate(day, type) {\n      var result;\n\n      if (type === \"prev\") {\n        result = props.date.startOf(\"month\").subtract(1, \"month\").date(day);\n      } else if (type === \"next\") {\n        result = props.date.startOf(\"month\").add(1, \"month\").date(day);\n      } else {\n        result = props.date.date(day);\n      }\n\n      return result;\n    };\n\n    var getCellClass = function getCellClass(_ref) {\n      var text = _ref.text,\n          type = _ref.type;\n      var classes = [type];\n\n      if (type === \"current\") {\n        var date_ = getFormattedDate(text, type);\n\n        if (date_.isSame(props.selectedDay, \"day\")) {\n          classes.push(\"is-selected\");\n        }\n\n        if (date_.isSame(now, \"day\")) {\n          classes.push(\"is-today\");\n        }\n      }\n\n      return classes;\n    };\n\n    var pickDay = function pickDay(_ref2) {\n      var text = _ref2.text,\n          type = _ref2.type;\n      var date = getFormattedDate(text, type);\n      ctx.emit(\"pick\", date);\n    };\n\n    var getSlotData = function getSlotData(_ref3) {\n      var text = _ref3.text,\n          type = _ref3.type;\n      var day = getFormattedDate(text, type);\n      return {\n        isSelected: day.isSame(props.selectedDay),\n        type: \"\".concat(type, \"-month\"),\n        day: day.format(\"YYYY-MM-DD\"),\n        date: day.toDate()\n      };\n    };\n\n    var isInRange = computed(function () {\n      return props.range && props.range.length;\n    });\n    var rows = computed(function () {\n      var days = [];\n\n      if (isInRange.value) {\n        var _props$range = _slicedToArray(props.range, 2),\n            start = _props$range[0],\n            end = _props$range[1];\n\n        var currentMonthRange = rangeArr(end.date() - start.date() + 1).map(function (_, index) {\n          return {\n            text: start.date() + index,\n            type: \"current\"\n          };\n        });\n        var remaining = currentMonthRange.length % 7;\n        remaining = remaining === 0 ? 0 : 7 - remaining;\n        var nextMonthRange = rangeArr(remaining).map(function (_, index) {\n          return {\n            text: index + 1,\n            type: \"next\"\n          };\n        });\n        days = currentMonthRange.concat(nextMonthRange);\n      } else {\n        var firstDay = props.date.startOf(\"month\").day() || 7;\n        var prevMonthDays = getPrevMonthLastDays(props.date, firstDay - firstDayOfWeek).map(function (day) {\n          return {\n            text: day,\n            type: \"prev\"\n          };\n        });\n        var currentMonthDays = getMonthDays(props.date).map(function (day) {\n          return {\n            text: day,\n            type: \"current\"\n          };\n        });\n        days = [].concat(_toConsumableArray(prevMonthDays), _toConsumableArray(currentMonthDays));\n        var nextMonthDays = rangeArr(42 - days.length).map(function (_, index) {\n          return {\n            text: index + 1,\n            type: \"next\"\n          };\n        });\n        days = days.concat(nextMonthDays);\n      }\n\n      return toNestedArr(days);\n    });\n    var weekDays = computed(function () {\n      var start = firstDayOfWeek;\n\n      if (start === 0) {\n        return WEEK_DAYS.value;\n      } else {\n        return WEEK_DAYS.value.slice(start).concat(WEEK_DAYS.value.slice(0, start));\n      }\n    });\n    return {\n      isInRange: isInRange,\n      weekDays: weekDays,\n      rows: rows,\n      getCellClass: getCellClass,\n      pickDay: pickDay,\n      getSlotData: getSlotData\n    };\n  }\n});\nexport { script as default, getMonthDays, getPrevMonthLastDays };","map":null,"metadata":{},"sourceType":"module"}