{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { on } from '../../../utils/dom.mjs';\n\nvar attachEvents = function attachEvents(el, binding, vnode) {\n  var _ref = binding.arg || binding.value;\n\n  var popover = vnode.dirs[0].instance.$refs[_ref];\n\n  if (popover) {\n    popover.triggerRef = el;\n    el.setAttribute(\"tabindex\", popover.tabindex);\n    Object.entries(popover.events).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          eventName = _ref3[0],\n          e = _ref3[1];\n\n      on(el, eventName.toLowerCase().slice(2), e);\n    });\n  }\n};\n\nvar PopoverDirective = {\n  mounted: function mounted(el, binding, vnode) {\n    attachEvents(el, binding, vnode);\n  },\n  updated: function updated(el, binding, vnode) {\n    attachEvents(el, binding, vnode);\n  }\n};\nvar VPopover = \"popover\";\nexport { VPopover, PopoverDirective as default };","map":null,"metadata":{},"sourceType":"module"}