{"ast":null,"code":"import { openBlock, createElementBlock, normalizeClass, withDirectives, vModelCheckbox, normalizeStyle, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nvar _hoisted_1 = [\"aria-checked\", \"aria-disabled\"];\nvar _hoisted_2 = [\"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\"];\nvar _hoisted_3 = [\"name\", \"tabindex\", \"disabled\", \"value\"];\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"label\", {\n    \"class\": normalizeClass([\"el-checkbox-button\", [_ctx.size ? \"el-checkbox-button--\" + _ctx.size : \"\", {\n      \"is-disabled\": _ctx.isDisabled\n    }, {\n      \"is-checked\": _ctx.isChecked\n    }, {\n      \"is-focus\": _ctx.focus\n    }]]),\n    role: \"checkbox\",\n    \"aria-checked\": _ctx.isChecked,\n    \"aria-disabled\": _ctx.isDisabled\n  }, [_ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock(\"input\", {\n    key: 0,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return _ctx.model = $event;\n    }),\n    \"class\": \"el-checkbox-button__original\",\n    type: \"checkbox\",\n    name: _ctx.name,\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.isDisabled,\n    \"true-value\": _ctx.trueLabel,\n    \"false-value\": _ctx.falseLabel,\n    onChange: _cache[1] || (_cache[1] = function () {\n      return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);\n    }),\n    onFocus: _cache[2] || (_cache[2] = function ($event) {\n      return _ctx.focus = true;\n    }),\n    onBlur: _cache[3] || (_cache[3] = function ($event) {\n      return _ctx.focus = false;\n    })\n  }, null, 40, _hoisted_2)), [[vModelCheckbox, _ctx.model]]) : withDirectives((openBlock(), createElementBlock(\"input\", {\n    key: 1,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = function ($event) {\n      return _ctx.model = $event;\n    }),\n    \"class\": \"el-checkbox-button__original\",\n    type: \"checkbox\",\n    name: _ctx.name,\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.isDisabled,\n    value: _ctx.label,\n    onChange: _cache[5] || (_cache[5] = function () {\n      return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);\n    }),\n    onFocus: _cache[6] || (_cache[6] = function ($event) {\n      return _ctx.focus = true;\n    }),\n    onBlur: _cache[7] || (_cache[7] = function ($event) {\n      return _ctx.focus = false;\n    })\n  }, null, 40, _hoisted_3)), [[vModelCheckbox, _ctx.model]]), _ctx.$slots[\"default\"] || _ctx.label ? (openBlock(), createElementBlock(\"span\", {\n    key: 2,\n    \"class\": \"el-checkbox-button__inner\",\n    style: normalizeStyle(_ctx.isChecked ? _ctx.activeStyle : null)\n  }, [renderSlot(_ctx.$slots, \"default\", {}, function () {\n    return [createTextVNode(toDisplayString(_ctx.label), 1)];\n  })], 4)) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n}\n\nexport { render };","map":null,"metadata":{},"sourceType":"module"}