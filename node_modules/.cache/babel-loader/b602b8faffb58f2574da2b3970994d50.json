{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { nextTick } from 'vue';\nimport { hasOwn } from '@vue/shared';\nimport { getStyle, addClass, removeClass } from '../../../utils/dom.mjs';\nimport PopupManager from '../../../utils/popup-manager.mjs';\nimport isServer from '../../../utils/isServer.mjs';\nimport { createLoadingComponent } from './createLoadingComponent.mjs';\nvar defaults = {\n  parent: null,\n  background: \"\",\n  svg: null,\n  svgViewBox: null,\n  spinner: false,\n  text: null,\n  fullscreen: true,\n  body: false,\n  lock: false,\n  customClass: \"\"\n};\nvar globalLoadingOption = {\n  fullscreenLoading: null\n};\n\nvar addStyle = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options, parent, instance) {\n    var maskStyle;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            maskStyle = {};\n\n            if (!options.fullscreen) {\n              _context.next = 7;\n              break;\n            }\n\n            instance.originalPosition.value = getStyle(document.body, \"position\");\n            instance.originalOverflow.value = getStyle(document.body, \"overflow\");\n            maskStyle.zIndex = PopupManager.nextZIndex();\n            _context.next = 16;\n            break;\n\n          case 7:\n            if (!options.body) {\n              _context.next = 15;\n              break;\n            }\n\n            instance.originalPosition.value = getStyle(document.body, \"position\");\n            _context.next = 11;\n            return nextTick();\n\n          case 11:\n            [\"top\", \"left\"].forEach(function (property) {\n              var scroll = property === \"top\" ? \"scrollTop\" : \"scrollLeft\";\n              maskStyle[property] = \"\".concat(options.target.getBoundingClientRect()[property] + document.body[scroll] + document.documentElement[scroll] - parseInt(getStyle(document.body, \"margin-\".concat(property)), 10), \"px\");\n            });\n            [\"height\", \"width\"].forEach(function (property) {\n              maskStyle[property] = \"\".concat(options.target.getBoundingClientRect()[property], \"px\");\n            });\n            _context.next = 16;\n            break;\n\n          case 15:\n            instance.originalPosition.value = getStyle(parent, \"position\");\n\n          case 16:\n            Object.keys(maskStyle).forEach(function (property) {\n              instance.$el.style[property] = maskStyle[property];\n            });\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function addStyle(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar addClassList = function addClassList(options, parent, instance) {\n  if (instance.originalPosition.value !== \"absolute\" && instance.originalPosition.value !== \"fixed\") {\n    addClass(parent, \"el-loading-parent--relative\");\n  } else {\n    removeClass(parent, \"el-loading-parent--relative\");\n  }\n\n  if (options.fullscreen && options.lock) {\n    addClass(parent, \"el-loading-parent--hidden\");\n  } else {\n    removeClass(parent, \"el-loading-parent--hidden\");\n  }\n};\n\nvar Loading = function Loading() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (isServer) return;\n  options = _objectSpread(_objectSpread({}, defaults), options);\n\n  if (typeof options.target === \"string\") {\n    options.target = document.querySelector(options.target);\n  }\n\n  options.target = options.target || document.body;\n\n  if (options.target !== document.body) {\n    options.fullscreen = false;\n  } else {\n    options.body = true;\n  }\n\n  if (options.fullscreen && globalLoadingOption.fullscreenLoading) {\n    globalLoadingOption.fullscreenLoading.close();\n  }\n\n  var parent = options.body ? document.body : options.target;\n  options.parent = parent;\n  var instance = createLoadingComponent({\n    options: options,\n    globalLoadingOption: globalLoadingOption\n  });\n  addStyle(options, parent, instance);\n  addClassList(options, parent, instance);\n\n  options.parent.vLoadingAddClassList = function () {\n    addClassList(options, parent, instance);\n  };\n\n  var loadingNumber = parent.getAttribute(\"loading-number\");\n\n  if (!loadingNumber) {\n    loadingNumber = 1;\n  } else {\n    loadingNumber = Number.parseInt(loadingNumber) + 1;\n  }\n\n  parent.setAttribute(\"loading-number\", loadingNumber.toString());\n  parent.appendChild(instance.$el);\n  nextTick().then(function () {\n    instance.visible.value = hasOwn(options, \"visible\") ? options.visible : true;\n  });\n\n  if (options.fullscreen) {\n    globalLoadingOption.fullscreenLoading = instance;\n  }\n\n  return instance;\n};\n\nexport { Loading as default };","map":null,"metadata":{},"sourceType":"module"}