{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, inject, ref, computed, h, withCtx, renderSlot, withKeys, withModifiers } from 'vue';\nimport { isUndefined, getValueByPath } from '../../../utils/util.mjs';\nimport '../../virtual-list/index.mjs';\nimport './group-item.mjs';\nimport './option-item.mjs';\nimport { selectV2InjectionKey } from './token.mjs';\nimport { isObject } from '@vue/shared';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport DynamicSizeList from '../../virtual-list/src/components/dynamic-size-list.mjs';\nimport script$1 from './group-item.vue_vue&type=script&lang.mjs';\nimport script$2 from './option-item.vue_vue&type=script&lang.mjs';\nvar script = defineComponent({\n  name: \"ElSelectDropdown\",\n  props: {\n    data: Array,\n    hoveringIndex: Number,\n    width: Number\n  },\n  setup: function setup(props) {\n    var select = inject(selectV2InjectionKey);\n    var cachedHeights = ref([]);\n    var listRef = ref(null);\n    var isSized = computed(function () {\n      return isUndefined(select.props.estimatedOptionHeight);\n    });\n    var listProps = computed(function () {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight\n        };\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: function itemSize(idx) {\n          return cachedHeights.value[idx];\n        }\n      };\n    });\n\n    var contains = function contains() {\n      var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var target = arguments.length > 1 ? arguments[1] : undefined;\n      var valueKey = select.props.valueKey;\n\n      if (!isObject(target)) {\n        return arr.includes(target);\n      }\n\n      return arr && arr.some(function (item) {\n        return getValueByPath(item, valueKey) === getValueByPath(target, valueKey);\n      });\n    };\n\n    var isEqual = function isEqual(selected, target) {\n      if (!isObject(target)) {\n        return selected === target;\n      } else {\n        var valueKey = select.props.valueKey;\n        return getValueByPath(selected, valueKey) === getValueByPath(target, valueKey);\n      }\n    };\n\n    var isItemSelected = function isItemSelected(modelValue, target) {\n      if (select.props.multiple) {\n        return contains(modelValue, target.value);\n      }\n\n      return isEqual(modelValue, target.value);\n    };\n\n    var isItemDisabled = function isItemDisabled(modelValue, selected) {\n      var _select$props = select.props,\n          disabled = _select$props.disabled,\n          multiple = _select$props.multiple,\n          multipleLimit = _select$props.multipleLimit;\n      return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);\n    };\n\n    var isItemHovering = function isItemHovering(target) {\n      return props.hoveringIndex === target;\n    };\n\n    var scrollToItem = function scrollToItem(index) {\n      var list = listRef.value;\n\n      if (list) {\n        list.scrollToItem(index);\n      }\n    };\n\n    var resetScrollTop = function resetScrollTop() {\n      var list = listRef.value;\n\n      if (list) {\n        list.resetScrollTop();\n      }\n    };\n\n    return {\n      select: select,\n      listProps: listProps,\n      listRef: listRef,\n      isSized: isSized,\n      isItemDisabled: isItemDisabled,\n      isItemHovering: isItemHovering,\n      isItemSelected: isItemSelected,\n      scrollToItem: scrollToItem,\n      resetScrollTop: resetScrollTop\n    };\n  },\n  render: function render(_ctx, _cache) {\n    var _a;\n\n    var $slots = _ctx.$slots,\n        data = _ctx.data,\n        listProps = _ctx.listProps,\n        select = _ctx.select,\n        isSized = _ctx.isSized,\n        width = _ctx.width,\n        isItemDisabled = _ctx.isItemDisabled,\n        isItemHovering = _ctx.isItemHovering,\n        isItemSelected = _ctx.isItemSelected;\n    var Comp = isSized ? FixedSizeList : DynamicSizeList;\n    var selectProps = select.props,\n        onSelect = select.onSelect,\n        onHover = select.onHover,\n        onKeyboardNavigate = select.onKeyboardNavigate,\n        onKeyboardSelect = select.onKeyboardSelect;\n    var height = selectProps.height,\n        modelValue = selectProps.modelValue,\n        multiple = selectProps.multiple;\n\n    if (data.length === 0) {\n      return h(\"div\", {\n        \"class\": \"el-select-dropdown\",\n        style: {\n          width: \"\".concat(width, \"px\")\n        }\n      }, (_a = $slots.empty) == null ? void 0 : _a.call($slots));\n    }\n\n    var ListItem = withCtx(function (scoped) {\n      var index = scoped.index,\n          data2 = scoped.data;\n      var item = data2[index];\n\n      if (data2[index].type === \"Group\") {\n        return h(script$1, {\n          item: item,\n          style: scoped.style,\n          height: isSized ? listProps.itemSize : listProps.estimatedSize\n        });\n      }\n\n      var selected = isItemSelected(modelValue, item);\n      var itemDisabled = isItemDisabled(modelValue, selected);\n      return h(script$2, _objectSpread(_objectSpread({}, scoped), {}, {\n        selected: selected,\n        disabled: item.disabled || itemDisabled,\n        created: !!item.created,\n        hovering: isItemHovering(index),\n        item: item,\n        onSelect: onSelect,\n        onHover: onHover\n      }), {\n        \"default\": withCtx(function (props) {\n          return renderSlot($slots, \"default\", props, function () {\n            return [h(\"span\", item.label)];\n          });\n        })\n      });\n    });\n    var List = h(Comp, _objectSpread({\n      ref: \"listRef\",\n      className: \"el-select-dropdown__list\",\n      data: data,\n      height: height,\n      width: width,\n      total: data.length,\n      scrollbarAlwaysOn: selectProps.scrollbarAlwaysOn,\n      onKeydown: [_cache[1] || (_cache[1] = withKeys(withModifiers(function () {\n        return onKeyboardNavigate(\"forward\");\n      }, [\"stop\", \"prevent\"]), [\"down\"])), _cache[2] || (_cache[2] = withKeys(withModifiers(function () {\n        return onKeyboardNavigate(\"backward\");\n      }, [\"stop\", \"prevent\"]), [\"up\"])), _cache[3] || (_cache[3] = withKeys(withModifiers(onKeyboardSelect, [\"stop\", \"prevent\"]), [\"enter\"])), _cache[4] || (_cache[4] = withKeys(withModifiers(function () {\n        return select.expanded = false;\n      }, [\"stop\", \"prevent\"]), [\"esc\"])), _cache[5] || (_cache[5] = withKeys(function () {\n        return select.expanded = false;\n      }, [\"tab\"]))]\n    }, listProps), {\n      \"default\": ListItem\n    });\n    return h(\"div\", {\n      \"class\": {\n        \"is-multiple\": multiple,\n        \"el-select-dropdown\": true\n      }\n    }, [List]);\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}