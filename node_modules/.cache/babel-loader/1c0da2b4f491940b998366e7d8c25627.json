{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { isVNode, createVNode, render } from 'vue';\nimport '../../../utils/util.mjs';\nimport PopupManager from '../../../utils/popup-manager.mjs';\nimport isServer from '../../../utils/isServer.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport './message2.mjs';\nimport { messageTypes } from './message.mjs';\nimport script from './message.vue_vue&type=script&lang.mjs';\nvar instances = [];\nvar seed = 1;\n\nvar message = function message() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (isServer) return {\n    close: function close() {\n      return void 0;\n    }\n  };\n\n  if (!isVNode(options) && _typeof(options) === \"object\" && options.grouping && !isVNode(options.message) && instances.length) {\n    var tempVm = instances.find(function (item) {\n      var _a, _b, _c;\n\n      return \"\".concat((_b = (_a = item.vm.props) == null ? void 0 : _a.message) != null ? _b : \"\") === \"\".concat((_c = options.message) != null ? _c : \"\");\n    });\n\n    if (tempVm) {\n      tempVm.vm.component.props.repeatNum += 1;\n      tempVm.vm.component.props.type = options == null ? void 0 : options.type;\n      return {\n        close: function close() {\n          return vm.component.proxy.visible = false;\n        }\n      };\n    }\n  }\n\n  if (typeof options === \"string\" || isVNode(options)) {\n    options = {\n      message: options\n    };\n  }\n\n  var verticalOffset = options.offset || 20;\n  instances.forEach(function (_ref) {\n    var vm2 = _ref.vm;\n\n    var _a;\n\n    verticalOffset += (((_a = vm2.el) == null ? void 0 : _a.offsetHeight) || 0) + 16;\n  });\n  verticalOffset += 16;\n  var id = \"message_\".concat(seed++);\n  var userOnClose = options.onClose;\n\n  var props = _objectSpread(_objectSpread({\n    zIndex: PopupManager.nextZIndex(),\n    offset: verticalOffset\n  }, options), {}, {\n    id: id,\n    onClose: function onClose() {\n      close(id, userOnClose);\n    }\n  });\n\n  var appendTo = document.body;\n\n  if (options.appendTo instanceof HTMLElement) {\n    appendTo = options.appendTo;\n  } else if (typeof options.appendTo === \"string\") {\n    appendTo = document.querySelector(options.appendTo);\n  }\n\n  if (!(appendTo instanceof HTMLElement)) {\n    debugWarn(\"ElMessage\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n    appendTo = document.body;\n  }\n\n  var container = document.createElement(\"div\");\n  container.className = \"container_\".concat(id);\n  var message2 = props.message;\n  var vm = createVNode(script, props, isVNode(props.message) ? {\n    \"default\": function _default() {\n      return message2;\n    }\n  } : null);\n\n  vm.props.onDestroy = function () {\n    render(null, container);\n  };\n\n  render(vm, container);\n  instances.push({\n    vm: vm\n  });\n  appendTo.appendChild(container.firstElementChild);\n  return {\n    close: function close() {\n      return vm.component.proxy.visible = false;\n    }\n  };\n};\n\nmessageTypes.forEach(function (type) {\n  message[type] = function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof options === \"string\" || isVNode(options)) {\n      options = {\n        message: options\n      };\n    }\n\n    return message(_objectSpread(_objectSpread({}, options), {}, {\n      type: type\n    }));\n  };\n});\n\nfunction close(id, userOnClose) {\n  var idx = instances.findIndex(function (_ref2) {\n    var vm2 = _ref2.vm;\n    return id === vm2.component.props.id;\n  });\n  if (idx === -1) return;\n  var vm = instances[idx].vm;\n  if (!vm) return;\n  userOnClose == null ? void 0 : userOnClose(vm);\n  var removedHeight = vm.el.offsetHeight;\n  instances.splice(idx, 1);\n  var len = instances.length;\n  if (len < 1) return;\n\n  for (var i = idx; i < len; i++) {\n    var pos = parseInt(instances[i].vm.el.style[\"top\"], 10) - removedHeight - 16;\n    instances[i].vm.component.props.offset = pos;\n  }\n}\n\nfunction closeAll() {\n  var _a;\n\n  for (var i = instances.length - 1; i >= 0; i--) {\n    var instance = instances[i].vm.component;\n    (_a = instance == null ? void 0 : instance.proxy) == null ? void 0 : _a.close();\n  }\n}\n\nmessage.closeAll = closeAll;\nexport { close, closeAll, message as default };","map":null,"metadata":{},"sourceType":"module"}