{"ast":null,"code":"import { buildProps, componentSize } from '../../../utils/props.mjs';\nimport { isNumber } from '../../../utils/util.mjs';\nvar inputNumberProps = buildProps({\n  step: {\n    type: Number,\n    \"default\": 1\n  },\n  stepStrictly: {\n    type: Boolean,\n    \"default\": false\n  },\n  max: {\n    type: Number,\n    \"default\": Infinity\n  },\n  min: {\n    type: Number,\n    \"default\": -Infinity\n  },\n  modelValue: {\n    type: Number,\n    required: true\n  },\n  disabled: {\n    type: Boolean,\n    \"default\": false\n  },\n  size: {\n    type: String,\n    values: componentSize\n  },\n  controls: {\n    type: Boolean,\n    \"default\": true\n  },\n  controlsPosition: {\n    type: String,\n    \"default\": \"\",\n    values: [\"\", \"right\"]\n  },\n  name: String,\n  label: String,\n  placeholder: String,\n  precision: {\n    type: Number,\n    validator: function validator(val) {\n      return val >= 0 && val === parseInt(\"\".concat(val), 10);\n    }\n  }\n});\nvar inputNumberEmits = {\n  change: function change(prev, cur) {\n    return prev !== cur;\n  },\n  blur: function blur(e) {\n    return e instanceof FocusEvent;\n  },\n  focus: function focus(e) {\n    return e instanceof FocusEvent;\n  },\n  input: function input(val) {\n    return isNumber(val);\n  },\n  \"update:modelValue\": function updateModelValue(val) {\n    return isNumber(val);\n  }\n};\nexport { inputNumberEmits, inputNumberProps };","map":null,"metadata":{},"sourceType":"module"}