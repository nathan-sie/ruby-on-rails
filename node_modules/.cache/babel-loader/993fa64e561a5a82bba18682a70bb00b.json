{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, ref, computed } from 'vue';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../dialog/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport { Close } from '@element-plus/icons';\nimport TrapFocus from '../../../directives/trap-focus/index.mjs';\nimport { dialogProps, dialogEmits } from '../../dialog/src/dialog.mjs';\nimport { useDialog } from '../../dialog/src/use-dialog.mjs';\nvar script = defineComponent({\n  name: \"ElDrawer\",\n  components: {\n    ElOverlay: ElOverlay,\n    ElIcon: ElIcon,\n    Close: Close\n  },\n  directives: {\n    TrapFocus: TrapFocus\n  },\n  props: _objectSpread(_objectSpread({}, dialogProps), {}, {\n    direction: {\n      type: String,\n      \"default\": \"rtl\",\n      validator: function validator(val) {\n        return [\"ltr\", \"rtl\", \"ttb\", \"btt\"].indexOf(val) !== -1;\n      }\n    },\n    size: {\n      type: [String, Number],\n      \"default\": \"30%\"\n    },\n    withHeader: {\n      type: Boolean,\n      \"default\": true\n    },\n    modalFade: {\n      type: Boolean,\n      \"default\": true\n    }\n  }),\n  emits: dialogEmits,\n  setup: function setup(props, ctx) {\n    var drawerRef = ref(null);\n    return _objectSpread(_objectSpread({}, useDialog(props, ctx, drawerRef)), {}, {\n      drawerRef: drawerRef,\n      isHorizontal: computed(function () {\n        return props.direction === \"rtl\" || props.direction === \"ltr\";\n      }),\n      drawerSize: computed(function () {\n        return typeof props.size === \"number\" ? \"\".concat(props.size, \"px\") : props.size;\n      })\n    });\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}