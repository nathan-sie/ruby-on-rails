{"ast":null,"code":"import { defineComponent, ref, computed, nextTick, onMounted, watch } from 'vue';\nimport debounce from 'lodash/debounce';\nimport '../../../../directives/index.mjs';\nimport _Scrollbar from '../../../scrollbar/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport { ArrowUp, ArrowDown } from '@element-plus/icons';\nimport { getTimeLists } from './useTimePicker.mjs';\nimport RepeatClick from '../../../../directives/repeat-click/index.mjs';\nvar script = defineComponent({\n  directives: {\n    repeatClick: RepeatClick\n  },\n  components: {\n    ElScrollbar: _Scrollbar,\n    ElIcon: ElIcon,\n    ArrowUp: ArrowUp,\n    ArrowDown: ArrowDown\n  },\n  props: {\n    role: {\n      type: String,\n      required: true\n    },\n    spinnerDate: {\n      type: Object,\n      required: true\n    },\n    showSeconds: {\n      type: Boolean,\n      \"default\": true\n    },\n    arrowControl: Boolean,\n    amPmMode: {\n      type: String,\n      \"default\": \"\"\n    },\n    disabledHours: {\n      type: Function\n    },\n    disabledMinutes: {\n      type: Function\n    },\n    disabledSeconds: {\n      type: Function\n    }\n  },\n  emits: [\"change\", \"select-range\", \"set-option\"],\n  setup: function setup(props, ctx) {\n    var isScrolling = false;\n    var debouncedResetScroll = debounce(function (type) {\n      isScrolling = false;\n      adjustCurrentSpinner(type);\n    }, 200);\n    var currentScrollbar = ref(null);\n    var listHoursRef = ref(null);\n    var listMinutesRef = ref(null);\n    var listSecondsRef = ref(null);\n    var listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef\n    };\n    var spinnerItems = computed(function () {\n      var arr = [\"hours\", \"minutes\", \"seconds\"];\n      return props.showSeconds ? arr : arr.slice(0, 2);\n    });\n    var hours = computed(function () {\n      return props.spinnerDate.hour();\n    });\n    var minutes = computed(function () {\n      return props.spinnerDate.minute();\n    });\n    var seconds = computed(function () {\n      return props.spinnerDate.second();\n    });\n    var timePartsMap = computed(function () {\n      return {\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds\n      };\n    });\n    var hoursList = computed(function () {\n      return getHoursList(props.role);\n    });\n    var minutesList = computed(function () {\n      return getMinutesList(hours.value, props.role);\n    });\n    var secondsList = computed(function () {\n      return getSecondsList(hours.value, minutes.value, props.role);\n    });\n    var listMap = computed(function () {\n      return {\n        hours: hoursList,\n        minutes: minutesList,\n        seconds: secondsList\n      };\n    });\n    var arrowHourList = computed(function () {\n      var hour = hours.value;\n      return [hour > 0 ? hour - 1 : void 0, hour, hour < 23 ? hour + 1 : void 0];\n    });\n    var arrowMinuteList = computed(function () {\n      var minute = minutes.value;\n      return [minute > 0 ? minute - 1 : void 0, minute, minute < 59 ? minute + 1 : void 0];\n    });\n    var arrowSecondList = computed(function () {\n      var second = seconds.value;\n      return [second > 0 ? second - 1 : void 0, second, second < 59 ? second + 1 : void 0];\n    });\n    var arrowListMap = computed(function () {\n      return {\n        hours: arrowHourList,\n        minutes: arrowMinuteList,\n        seconds: arrowSecondList\n      };\n    });\n\n    var getAmPmFlag = function getAmPmFlag(hour) {\n      var shouldShowAmPm = !!props.amPmMode;\n      if (!shouldShowAmPm) return \"\";\n      var isCapital = props.amPmMode === \"A\";\n      var content = hour < 12 ? \" am\" : \" pm\";\n      if (isCapital) content = content.toUpperCase();\n      return content;\n    };\n\n    var emitSelectRange = function emitSelectRange(type) {\n      if (type === \"hours\") {\n        ctx.emit(\"select-range\", 0, 2);\n      } else if (type === \"minutes\") {\n        ctx.emit(\"select-range\", 3, 5);\n      } else if (type === \"seconds\") {\n        ctx.emit(\"select-range\", 6, 8);\n      }\n\n      currentScrollbar.value = type;\n    };\n\n    var adjustCurrentSpinner = function adjustCurrentSpinner(type) {\n      adjustSpinner(type, timePartsMap.value[type].value);\n    };\n\n    var adjustSpinners = function adjustSpinners() {\n      adjustCurrentSpinner(\"hours\");\n      adjustCurrentSpinner(\"minutes\");\n      adjustCurrentSpinner(\"seconds\");\n    };\n\n    var adjustSpinner = function adjustSpinner(type, value) {\n      if (props.arrowControl) return;\n      var el = listRefsMap[type];\n\n      if (el.value) {\n        el.value.$el.querySelector(\".el-scrollbar__wrap\").scrollTop = Math.max(0, value * typeItemHeight(type));\n      }\n    };\n\n    var typeItemHeight = function typeItemHeight(type) {\n      var el = listRefsMap[type];\n      return el.value.$el.querySelector(\"li\").offsetHeight;\n    };\n\n    var onIncreaseClick = function onIncreaseClick() {\n      scrollDown(1);\n    };\n\n    var onDecreaseClick = function onDecreaseClick() {\n      scrollDown(-1);\n    };\n\n    var scrollDown = function scrollDown(step) {\n      if (!currentScrollbar.value) {\n        emitSelectRange(\"hours\");\n      }\n\n      var label = currentScrollbar.value;\n      var now = timePartsMap.value[label].value;\n      var total = currentScrollbar.value === \"hours\" ? 24 : 60;\n      now = (now + step + total) % total;\n      modifyDateField(label, now);\n      adjustSpinner(label, now);\n      nextTick(function () {\n        return emitSelectRange(currentScrollbar.value);\n      });\n    };\n\n    var modifyDateField = function modifyDateField(type, value) {\n      var list = listMap.value[type].value;\n      var isDisabled = list[value];\n      if (isDisabled) return;\n\n      switch (type) {\n        case \"hours\":\n          ctx.emit(\"change\", props.spinnerDate.hour(value).minute(minutes.value).second(seconds.value));\n          break;\n\n        case \"minutes\":\n          ctx.emit(\"change\", props.spinnerDate.hour(hours.value).minute(value).second(seconds.value));\n          break;\n\n        case \"seconds\":\n          ctx.emit(\"change\", props.spinnerDate.hour(hours.value).minute(minutes.value).second(value));\n          break;\n      }\n    };\n\n    var handleClick = function handleClick(type, _ref) {\n      var value = _ref.value,\n          disabled = _ref.disabled;\n\n      if (!disabled) {\n        modifyDateField(type, value);\n        emitSelectRange(type);\n        adjustSpinner(type, value);\n      }\n    };\n\n    var handleScroll = function handleScroll(type) {\n      isScrolling = true;\n      debouncedResetScroll(type);\n      var value = Math.min(Math.round((listRefsMap[type].value.$el.querySelector(\".el-scrollbar__wrap\").scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === \"hours\" ? 23 : 59);\n      modifyDateField(type, value);\n    };\n\n    var scrollBarHeight = function scrollBarHeight(type) {\n      return listRefsMap[type].value.$el.offsetHeight;\n    };\n\n    var bindScrollEvent = function bindScrollEvent() {\n      var bindFuntion = function bindFuntion(type) {\n        if (listRefsMap[type].value) {\n          listRefsMap[type].value.$el.querySelector(\".el-scrollbar__wrap\").onscroll = function () {\n            handleScroll(type);\n          };\n        }\n      };\n\n      bindFuntion(\"hours\");\n      bindFuntion(\"minutes\");\n      bindFuntion(\"seconds\");\n    };\n\n    onMounted(function () {\n      nextTick(function () {\n        !props.arrowControl && bindScrollEvent();\n        adjustSpinners();\n        if (props.role === \"start\") emitSelectRange(\"hours\");\n      });\n    });\n\n    var getRefId = function getRefId(item) {\n      return \"list\".concat(item.charAt(0).toUpperCase() + item.slice(1), \"Ref\");\n    };\n\n    ctx.emit(\"set-option\", [\"\".concat(props.role, \"_scrollDown\"), scrollDown]);\n    ctx.emit(\"set-option\", [\"\".concat(props.role, \"_emitSelectRange\"), emitSelectRange]);\n\n    var _getTimeLists = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds),\n        getHoursList = _getTimeLists.getHoursList,\n        getMinutesList = _getTimeLists.getMinutesList,\n        getSecondsList = _getTimeLists.getSecondsList;\n\n    watch(function () {\n      return props.spinnerDate;\n    }, function () {\n      if (isScrolling) return;\n      adjustSpinners();\n    });\n    return {\n      getRefId: getRefId,\n      spinnerItems: spinnerItems,\n      currentScrollbar: currentScrollbar,\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      hoursList: hoursList,\n      minutesList: minutesList,\n      arrowHourList: arrowHourList,\n      arrowMinuteList: arrowMinuteList,\n      arrowSecondList: arrowSecondList,\n      getAmPmFlag: getAmPmFlag,\n      emitSelectRange: emitSelectRange,\n      adjustCurrentSpinner: adjustCurrentSpinner,\n      typeItemHeight: typeItemHeight,\n      listHoursRef: listHoursRef,\n      listMinutesRef: listMinutesRef,\n      listSecondsRef: listSecondsRef,\n      onIncreaseClick: onIncreaseClick,\n      onDecreaseClick: onDecreaseClick,\n      handleClick: handleClick,\n      secondsList: secondsList,\n      timePartsMap: timePartsMap,\n      arrowListMap: arrowListMap,\n      listMap: listMap\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}