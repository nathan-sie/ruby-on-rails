{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, inject, reactive, ref, computed, watch, h, toRefs } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../utils/constants.mjs';\nimport { ArrowLeft, ArrowRight } from '@element-plus/icons';\nimport './transfer-panel.mjs';\nimport { useComputedData } from './useComputedData.mjs';\nimport { LEFT_CHECK_CHANGE_EVENT, RIGHT_CHECK_CHANGE_EVENT, useCheckedChange } from './useCheckedChange.mjs';\nimport { useMove } from './useMove.mjs';\nimport './transfer.mjs';\nimport script$1 from './transfer-panel.vue_vue&type=script&lang.mjs';\nimport { useLocaleInject } from '../../../hooks/use-locale/index.mjs';\nimport { elFormItemKey } from '../../../tokens/form.mjs';\nvar script = defineComponent({\n  name: \"ElTransfer\",\n  components: {\n    TransferPanel: script$1,\n    ElButton: ElButton,\n    ElIcon: ElIcon,\n    ArrowLeft: ArrowLeft,\n    ArrowRight: ArrowRight\n  },\n  props: {\n    data: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    titles: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    buttonTexts: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    filterPlaceholder: {\n      type: String,\n      \"default\": \"\"\n    },\n    filterMethod: Function,\n    leftDefaultChecked: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    rightDefaultChecked: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    renderContent: Function,\n    modelValue: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    format: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    filterable: {\n      type: Boolean,\n      \"default\": false\n    },\n    props: {\n      type: Object,\n      \"default\": function _default() {\n        return {\n          label: \"label\",\n          key: \"key\",\n          disabled: \"disabled\"\n        };\n      }\n    },\n    targetOrder: {\n      type: String,\n      \"default\": \"original\",\n      validator: function validator(val) {\n        return [\"original\", \"push\", \"unshift\"].includes(val);\n      }\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, LEFT_CHECK_CHANGE_EVENT, RIGHT_CHECK_CHANGE_EVENT],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t;\n\n    var elFormItem = inject(elFormItemKey, {});\n    var checkedState = reactive({\n      leftChecked: [],\n      rightChecked: []\n    });\n\n    var _useComputedData = useComputedData(props),\n        propsKey = _useComputedData.propsKey,\n        sourceData = _useComputedData.sourceData,\n        targetData = _useComputedData.targetData;\n\n    var _useCheckedChange = useCheckedChange(checkedState, emit),\n        onSourceCheckedChange = _useCheckedChange.onSourceCheckedChange,\n        onTargetCheckedChange = _useCheckedChange.onTargetCheckedChange;\n\n    var _useMove = useMove(props, checkedState, propsKey, emit),\n        addToLeft = _useMove.addToLeft,\n        addToRight = _useMove.addToRight;\n\n    var leftPanel = ref(null);\n    var rightPanel = ref(null);\n\n    var clearQuery = function clearQuery(which) {\n      if (which === \"left\") {\n        leftPanel.value.query = \"\";\n      } else if (which === \"right\") {\n        rightPanel.value.query = \"\";\n      }\n    };\n\n    var hasButtonTexts = computed(function () {\n      return props.buttonTexts.length === 2;\n    });\n    var leftPanelTitle = computed(function () {\n      return props.titles[0] || t(\"el.transfer.titles.0\");\n    });\n    var rightPanelTitle = computed(function () {\n      return props.titles[1] || t(\"el.transfer.titles.1\");\n    });\n    var panelFilterPlaceholder = computed(function () {\n      return props.filterPlaceholder || t(\"el.transfer.filterPlaceholder\");\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      var _a;\n\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n    });\n    var optionRender = computed(function () {\n      return function (option) {\n        if (props.renderContent) return props.renderContent(h, option);\n        if (slots[\"default\"]) return slots[\"default\"]({\n          option: option\n        });\n        return h(\"span\", option[props.props.label] || option[props.props.key]);\n      };\n    });\n    return _objectSpread(_objectSpread({\n      sourceData: sourceData,\n      targetData: targetData,\n      onSourceCheckedChange: onSourceCheckedChange,\n      onTargetCheckedChange: onTargetCheckedChange,\n      addToLeft: addToLeft,\n      addToRight: addToRight\n    }, toRefs(checkedState)), {}, {\n      hasButtonTexts: hasButtonTexts,\n      leftPanelTitle: leftPanelTitle,\n      rightPanelTitle: rightPanelTitle,\n      panelFilterPlaceholder: panelFilterPlaceholder,\n      clearQuery: clearQuery,\n      optionRender: optionRender\n    });\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}