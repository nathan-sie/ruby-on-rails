{"ast":null,"code":"import { defineComponent, ref, computed } from 'vue';\nimport { ElSelect } from '../../select/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Clock, CircleClose } from '@element-plus/icons';\nvar ElOption = ElSelect.Option;\n\nvar parseTime = function parseTime(time) {\n  var values = (time || \"\").split(\":\");\n\n  if (values.length >= 2) {\n    var hours = parseInt(values[0], 10);\n    var minutes = parseInt(values[1], 10);\n    return {\n      hours: hours,\n      minutes: minutes\n    };\n  }\n\n  return null;\n};\n\nvar compareTime = function compareTime(time1, time2) {\n  var value1 = parseTime(time1);\n  var value2 = parseTime(time2);\n  var minutes1 = value1.minutes + value1.hours * 60;\n  var minutes2 = value2.minutes + value2.hours * 60;\n\n  if (minutes1 === minutes2) {\n    return 0;\n  }\n\n  return minutes1 > minutes2 ? 1 : -1;\n};\n\nvar formatTime = function formatTime(time) {\n  return \"\".concat(time.hours < 10 ? \"0\".concat(time.hours) : time.hours, \":\").concat(time.minutes < 10 ? \"0\".concat(time.minutes) : time.minutes);\n};\n\nvar nextTime = function nextTime(time, step) {\n  var timeValue = parseTime(time);\n  var stepValue = parseTime(step);\n  var next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes\n  };\n  next.minutes += stepValue.minutes;\n  next.hours += stepValue.hours;\n  next.hours += Math.floor(next.minutes / 60);\n  next.minutes = next.minutes % 60;\n  return formatTime(next);\n};\n\nvar script = defineComponent({\n  name: \"ElTimeSelect\",\n  components: {\n    ElSelect: ElSelect,\n    ElOption: ElOption,\n    ElIcon: ElIcon\n  },\n  model: {\n    prop: \"value\",\n    event: \"change\"\n  },\n  props: {\n    modelValue: String,\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    editable: {\n      type: Boolean,\n      \"default\": true\n    },\n    clearable: {\n      type: Boolean,\n      \"default\": true\n    },\n    size: {\n      type: String,\n      \"default\": \"\",\n      validator: function validator(value) {\n        return !value || [\"medium\", \"small\", \"mini\"].indexOf(value) !== -1;\n      }\n    },\n    placeholder: {\n      type: String,\n      \"default\": \"\"\n    },\n    start: {\n      type: String,\n      \"default\": \"09:00\"\n    },\n    end: {\n      type: String,\n      \"default\": \"18:00\"\n    },\n    step: {\n      type: String,\n      \"default\": \"00:30\"\n    },\n    minTime: {\n      type: String,\n      \"default\": \"\"\n    },\n    maxTime: {\n      type: String,\n      \"default\": \"\"\n    },\n    name: {\n      type: String,\n      \"default\": \"\"\n    },\n    prefixIcon: {\n      type: [String, Object],\n      \"default\": Clock\n    },\n    clearIcon: {\n      type: [String, Object],\n      \"default\": CircleClose\n    }\n  },\n  emits: [\"change\", \"blur\", \"focus\", \"update:modelValue\"],\n  setup: function setup(props) {\n    var select = ref(null);\n    var value = computed(function () {\n      return props.modelValue;\n    });\n    var items = computed(function () {\n      var result = [];\n\n      if (props.start && props.end && props.step) {\n        var current = props.start;\n\n        while (compareTime(current, props.end) <= 0) {\n          result.push({\n            value: current,\n            disabled: compareTime(current, props.minTime || \"-1:-1\") <= 0 || compareTime(current, props.maxTime || \"100:100\") >= 0\n          });\n          current = nextTime(current, props.step);\n        }\n      }\n\n      return result;\n    });\n\n    var blur = function blur() {\n      var _a, _b;\n\n      (_b = (_a = select.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n\n    var focus = function focus() {\n      var _a, _b;\n\n      (_b = (_a = select.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n\n    return {\n      select: select,\n      value: value,\n      items: items,\n      blur: blur,\n      focus: focus\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}