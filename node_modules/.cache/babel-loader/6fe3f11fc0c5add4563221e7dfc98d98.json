{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport isEqual from 'lodash/isEqual';\nimport Node from './node.mjs';\n\nvar flatNodes = function flatNodes(nodes, leafOnly) {\n  return nodes.reduce(function (res, node) {\n    if (node.isLeaf) {\n      res.push(node);\n    } else {\n      !leafOnly && res.push(node);\n      res = res.concat(flatNodes(node.children, leafOnly));\n    }\n\n    return res;\n  }, []);\n};\n\nvar Store = /*#__PURE__*/function () {\n  function Store(data, config) {\n    var _this = this;\n\n    _classCallCheck(this, Store);\n\n    this.config = config;\n    var nodes = (data || []).map(function (nodeData) {\n      return new Node(nodeData, _this.config);\n    });\n    this.nodes = nodes;\n    this.allNodes = flatNodes(nodes, false);\n    this.leafNodes = flatNodes(nodes, true);\n  }\n\n  _createClass(Store, [{\n    key: \"getNodes\",\n    value: function getNodes() {\n      return this.nodes;\n    }\n  }, {\n    key: \"getFlattedNodes\",\n    value: function getFlattedNodes(leafOnly) {\n      return leafOnly ? this.leafNodes : this.allNodes;\n    }\n  }, {\n    key: \"appendNode\",\n    value: function appendNode(nodeData, parentNode) {\n      var node = parentNode ? parentNode.appendChild(nodeData) : new Node(nodeData, this.config);\n      if (!parentNode) this.nodes.push(node);\n      this.allNodes.push(node);\n      node.isLeaf && this.leafNodes.push(node);\n    }\n  }, {\n    key: \"appendNodes\",\n    value: function appendNodes(nodeDataList, parentNode) {\n      var _this2 = this;\n\n      nodeDataList.forEach(function (nodeData) {\n        return _this2.appendNode(nodeData, parentNode);\n      });\n    }\n  }, {\n    key: \"getNodeByValue\",\n    value: function getNodeByValue(value) {\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!value && value !== 0) return null;\n      var nodes = this.getFlattedNodes(leafOnly).filter(function (node) {\n        return isEqual(node.value, value) || isEqual(node.pathValues, value);\n      });\n      return nodes[0] || null;\n    }\n  }, {\n    key: \"getSameNode\",\n    value: function getSameNode(node) {\n      if (!node) return null;\n      var nodes = this.getFlattedNodes(false).filter(function (_ref) {\n        var value = _ref.value,\n            level = _ref.level;\n        return isEqual(node.value, value) && node.level === level;\n      });\n      return nodes[0] || null;\n    }\n  }]);\n\n  return Store;\n}();\n\nexport { Store as default };","map":null,"metadata":{},"sourceType":"module"}