{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { hasOwn } from '@vue/shared';\nimport Node from './node.mjs';\nimport { getNodeKey } from './util.mjs';\n\nvar TreeStore = /*#__PURE__*/function () {\n  function TreeStore(options) {\n    _classCallCheck(this, TreeStore);\n\n    this.currentNode = null;\n    this.currentNodeKey = null;\n\n    for (var option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option];\n      }\n    }\n\n    this.nodesMap = {};\n  }\n\n  _createClass(TreeStore, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this = this;\n\n      this.root = new Node({\n        data: this.data,\n        store: this\n      });\n      this.root.initialize();\n\n      if (this.lazy && this.load) {\n        var loadFn = this.load;\n        loadFn(this.root, function (data) {\n          _this.root.doCreateChildren(data);\n\n          _this._initDefaultCheckedNodes();\n        });\n      } else {\n        this._initDefaultCheckedNodes();\n      }\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(value) {\n      var filterNodeMethod = this.filterNodeMethod;\n      var lazy = this.lazy;\n\n      var traverse = function traverse(node) {\n        var childNodes = node.root ? node.root.childNodes : node.childNodes;\n        childNodes.forEach(function (child) {\n          child.visible = filterNodeMethod.call(child, value, child.data, child);\n          traverse(child);\n        });\n\n        if (!node.visible && childNodes.length) {\n          var allHidden = true;\n          allHidden = !childNodes.some(function (child) {\n            return child.visible;\n          });\n\n          if (node.root) {\n            ;\n            node.root.visible = allHidden === false;\n          } else {\n            ;\n            node.visible = allHidden === false;\n          }\n        }\n\n        if (!value) return;\n        if (node.visible && !node.isLeaf && !lazy) node.expand();\n      };\n\n      traverse(this);\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(newVal) {\n      var instanceChanged = newVal !== this.root.data;\n\n      if (instanceChanged) {\n        this.root.setData(newVal);\n\n        this._initDefaultCheckedNodes();\n      } else {\n        this.root.updateChildren();\n      }\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(data) {\n      if (data instanceof Node) return data;\n      var key = _typeof(data) !== \"object\" ? data : getNodeKey(this.key, data);\n      return this.nodesMap[key] || null;\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(data, refData) {\n      var refNode = this.getNode(refData);\n      refNode.parent.insertBefore({\n        data: data\n      }, refNode);\n    }\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(data, refData) {\n      var refNode = this.getNode(refData);\n      refNode.parent.insertAfter({\n        data: data\n      }, refNode);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(data) {\n      var node = this.getNode(data);\n\n      if (node && node.parent) {\n        if (node === this.currentNode) {\n          this.currentNode = null;\n        }\n\n        node.parent.removeChild(node);\n      }\n    }\n  }, {\n    key: \"append\",\n    value: function append(data, parentData) {\n      var parentNode = parentData ? this.getNode(parentData) : this.root;\n\n      if (parentNode) {\n        parentNode.insertChild({\n          data: data\n        });\n      }\n    }\n  }, {\n    key: \"_initDefaultCheckedNodes\",\n    value: function _initDefaultCheckedNodes() {\n      var _this2 = this;\n\n      var defaultCheckedKeys = this.defaultCheckedKeys || [];\n      var nodesMap = this.nodesMap;\n      defaultCheckedKeys.forEach(function (checkedKey) {\n        var node = nodesMap[checkedKey];\n\n        if (node) {\n          node.setChecked(true, !_this2.checkStrictly);\n        }\n      });\n    }\n  }, {\n    key: \"_initDefaultCheckedNode\",\n    value: function _initDefaultCheckedNode(node) {\n      var defaultCheckedKeys = this.defaultCheckedKeys || [];\n\n      if (defaultCheckedKeys.indexOf(node.key) !== -1) {\n        node.setChecked(true, !this.checkStrictly);\n      }\n    }\n  }, {\n    key: \"setDefaultCheckedKey\",\n    value: function setDefaultCheckedKey(newVal) {\n      if (newVal !== this.defaultCheckedKeys) {\n        this.defaultCheckedKeys = newVal;\n\n        this._initDefaultCheckedNodes();\n      }\n    }\n  }, {\n    key: \"registerNode\",\n    value: function registerNode(node) {\n      var key = this.key;\n      if (!node || !node.data) return;\n\n      if (!key) {\n        this.nodesMap[node.id] = node;\n      } else {\n        var nodeKey = node.key;\n        if (nodeKey !== void 0) this.nodesMap[node.key] = node;\n      }\n    }\n  }, {\n    key: \"deregisterNode\",\n    value: function deregisterNode(node) {\n      var _this3 = this;\n\n      var key = this.key;\n      if (!key || !node || !node.data) return;\n      node.childNodes.forEach(function (child) {\n        _this3.deregisterNode(child);\n      });\n      delete this.nodesMap[node.key];\n    }\n  }, {\n    key: \"getCheckedNodes\",\n    value: function getCheckedNodes() {\n      var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var includeHalfChecked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var checkedNodes = [];\n\n      var traverse = function traverse(node) {\n        var childNodes = node.root ? node.root.childNodes : node.childNodes;\n        childNodes.forEach(function (child) {\n          if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {\n            checkedNodes.push(child.data);\n          }\n\n          traverse(child);\n        });\n      };\n\n      traverse(this);\n      return checkedNodes;\n    }\n  }, {\n    key: \"getCheckedKeys\",\n    value: function getCheckedKeys() {\n      var _this4 = this;\n\n      var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this.getCheckedNodes(leafOnly).map(function (data) {\n        return (data || {})[_this4.key];\n      });\n    }\n  }, {\n    key: \"getHalfCheckedNodes\",\n    value: function getHalfCheckedNodes() {\n      var nodes = [];\n\n      var traverse = function traverse(node) {\n        var childNodes = node.root ? node.root.childNodes : node.childNodes;\n        childNodes.forEach(function (child) {\n          if (child.indeterminate) {\n            nodes.push(child.data);\n          }\n\n          traverse(child);\n        });\n      };\n\n      traverse(this);\n      return nodes;\n    }\n  }, {\n    key: \"getHalfCheckedKeys\",\n    value: function getHalfCheckedKeys() {\n      var _this5 = this;\n\n      return this.getHalfCheckedNodes().map(function (data) {\n        return (data || {})[_this5.key];\n      });\n    }\n  }, {\n    key: \"_getAllNodes\",\n    value: function _getAllNodes() {\n      var allNodes = [];\n      var nodesMap = this.nodesMap;\n\n      for (var nodeKey in nodesMap) {\n        if (hasOwn(nodesMap, nodeKey)) {\n          allNodes.push(nodesMap[nodeKey]);\n        }\n      }\n\n      return allNodes;\n    }\n  }, {\n    key: \"updateChildren\",\n    value: function updateChildren(key, data) {\n      var node = this.nodesMap[key];\n      if (!node) return;\n      var childNodes = node.childNodes;\n\n      for (var i = childNodes.length - 1; i >= 0; i--) {\n        var child = childNodes[i];\n        this.remove(child.data);\n      }\n\n      for (var _i = 0, j = data.length; _i < j; _i++) {\n        var _child = data[_i];\n        this.append(_child, node.data);\n      }\n    }\n  }, {\n    key: \"_setCheckedKeys\",\n    value: function _setCheckedKeys(key) {\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var checkedKeys = arguments.length > 2 ? arguments[2] : undefined;\n\n      var allNodes = this._getAllNodes().sort(function (a, b) {\n        return b.level - a.level;\n      });\n\n      var cache = Object.create(null);\n      var keys = Object.keys(checkedKeys);\n      allNodes.forEach(function (node) {\n        return node.setChecked(false, false);\n      });\n\n      for (var i = 0, j = allNodes.length; i < j; i++) {\n        var node = allNodes[i];\n        var nodeKey = node.data[key].toString();\n        var checked = keys.indexOf(nodeKey) > -1;\n\n        if (!checked) {\n          if (node.checked && !cache[nodeKey]) {\n            node.setChecked(false, false);\n          }\n\n          continue;\n        }\n\n        var parent = node.parent;\n\n        while (parent && parent.level > 0) {\n          cache[parent.data[key]] = true;\n          parent = parent.parent;\n        }\n\n        if (node.isLeaf || this.checkStrictly) {\n          node.setChecked(true, false);\n          continue;\n        }\n\n        node.setChecked(true, true);\n\n        if (leafOnly) {\n          (function () {\n            node.setChecked(false, false);\n\n            var traverse = function traverse(node2) {\n              var childNodes = node2.childNodes;\n              childNodes.forEach(function (child) {\n                if (!child.isLeaf) {\n                  child.setChecked(false, false);\n                }\n\n                traverse(child);\n              });\n            };\n\n            traverse(node);\n          })();\n        }\n      }\n    }\n  }, {\n    key: \"setCheckedNodes\",\n    value: function setCheckedNodes(array) {\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var key = this.key;\n      var checkedKeys = {};\n      array.forEach(function (item) {\n        checkedKeys[(item || {})[key]] = true;\n      });\n\n      this._setCheckedKeys(key, leafOnly, checkedKeys);\n    }\n  }, {\n    key: \"setCheckedKeys\",\n    value: function setCheckedKeys(keys) {\n      var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.defaultCheckedKeys = keys;\n      var key = this.key;\n      var checkedKeys = {};\n      keys.forEach(function (key2) {\n        checkedKeys[key2] = true;\n      });\n\n      this._setCheckedKeys(key, leafOnly, checkedKeys);\n    }\n  }, {\n    key: \"setDefaultExpandedKeys\",\n    value: function setDefaultExpandedKeys(keys) {\n      var _this6 = this;\n\n      keys = keys || [];\n      this.defaultExpandedKeys = keys;\n      keys.forEach(function (key) {\n        var node = _this6.getNode(key);\n\n        if (node) node.expand(null, _this6.autoExpandParent);\n      });\n    }\n  }, {\n    key: \"setChecked\",\n    value: function setChecked(data, checked, deep) {\n      var node = this.getNode(data);\n\n      if (node) {\n        node.setChecked(!!checked, deep);\n      }\n    }\n  }, {\n    key: \"getCurrentNode\",\n    value: function getCurrentNode() {\n      return this.currentNode;\n    }\n  }, {\n    key: \"setCurrentNode\",\n    value: function setCurrentNode(currentNode) {\n      var prevCurrentNode = this.currentNode;\n\n      if (prevCurrentNode) {\n        prevCurrentNode.isCurrent = false;\n      }\n\n      this.currentNode = currentNode;\n      this.currentNode.isCurrent = true;\n    }\n  }, {\n    key: \"setUserCurrentNode\",\n    value: function setUserCurrentNode(node) {\n      var shouldAutoExpandParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var key = node[this.key];\n      var currNode = this.nodesMap[key];\n      this.setCurrentNode(currNode);\n\n      if (shouldAutoExpandParent && this.currentNode.level > 1) {\n        this.currentNode.parent.expand(null, true);\n      }\n    }\n  }, {\n    key: \"setCurrentNodeKey\",\n    value: function setCurrentNodeKey(key) {\n      var shouldAutoExpandParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (key === null || key === void 0) {\n        this.currentNode && (this.currentNode.isCurrent = false);\n        this.currentNode = null;\n        return;\n      }\n\n      var node = this.getNode(key);\n\n      if (node) {\n        this.setCurrentNode(node);\n\n        if (shouldAutoExpandParent && this.currentNode.level > 1) {\n          this.currentNode.parent.expand(null, true);\n        }\n      }\n    }\n  }]);\n\n  return TreeStore;\n}();\n\nexport { TreeStore as default };","map":null,"metadata":{},"sourceType":"module"}