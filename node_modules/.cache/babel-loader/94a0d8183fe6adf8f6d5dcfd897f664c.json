{"ast":null,"code":"import { defineComponent, ref, inject, watch, nextTick, onMounted, onUpdated, onBeforeUnmount, h, Fragment } from 'vue';\nimport { addResizeListener, removeResizeListener } from '../../../utils/resize-event.mjs';\nimport '../../../tokens/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nvar LabelWrap = defineComponent({\n  name: \"ElLabelWrap\",\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    var el = ref(null);\n    var elForm = inject(elFormKey);\n    var elFormItem = inject(elFormItemKey);\n    var computedWidth = ref(0);\n    watch(computedWidth, function (val, oldVal) {\n      if (props.updateAll) {\n        elForm.registerLabelWidth(val, oldVal);\n        elFormItem.updateComputedLabelWidth(val);\n      }\n    });\n\n    var getLabelWidth = function getLabelWidth() {\n      var _a;\n\n      if ((_a = el.value) == null ? void 0 : _a.firstElementChild) {\n        var width = window.getComputedStyle(el.value.firstElementChild).width;\n        return Math.ceil(parseFloat(width));\n      } else {\n        return 0;\n      }\n    };\n\n    var updateLabelWidth = function updateLabelWidth() {\n      var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"update\";\n      nextTick(function () {\n        if (slots[\"default\"] && props.isAutoWidth) {\n          if (action === \"update\") {\n            computedWidth.value = getLabelWidth();\n          } else if (action === \"remove\") {\n            elForm.deregisterLabelWidth(computedWidth.value);\n          }\n        }\n      });\n    };\n\n    var updateLabelWidthFn = function updateLabelWidthFn() {\n      return updateLabelWidth(\"update\");\n    };\n\n    onMounted(function () {\n      addResizeListener(el.value.firstElementChild, updateLabelWidthFn);\n      updateLabelWidthFn();\n    });\n    onUpdated(updateLabelWidthFn);\n    onBeforeUnmount(function () {\n      var _a;\n\n      updateLabelWidth(\"remove\");\n      removeResizeListener((_a = el.value) == null ? void 0 : _a.firstElementChild, updateLabelWidthFn);\n    });\n\n    function render() {\n      var _a, _b;\n\n      if (!slots) return null;\n\n      if (props.isAutoWidth) {\n        var autoLabelWidth = elForm.autoLabelWidth;\n        var style = {};\n\n        if (autoLabelWidth && autoLabelWidth !== \"auto\") {\n          var marginWidth = Math.max(0, parseInt(autoLabelWidth, 10) - computedWidth.value);\n          var marginPosition = elForm.labelPosition === \"left\" ? \"marginRight\" : \"marginLeft\";\n\n          if (marginWidth) {\n            style[marginPosition] = \"\".concat(marginWidth, \"px\");\n          }\n        }\n\n        return h(\"div\", {\n          ref: el,\n          \"class\": [\"el-form-item__label-wrap\"],\n          style: style\n        }, (_a = slots[\"default\"]) == null ? void 0 : _a.call(slots));\n      } else {\n        return h(Fragment, {\n          ref: el\n        }, (_b = slots[\"default\"]) == null ? void 0 : _b.call(slots));\n      }\n    }\n\n    return render;\n  }\n});\nexport { LabelWrap as default };","map":null,"metadata":{},"sourceType":"module"}