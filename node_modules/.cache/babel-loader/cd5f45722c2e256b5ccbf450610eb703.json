{"ast":null,"code":"import { defineComponent, ref, computed, watch } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { avatarProps, avatarEmits } from './avatar.mjs';\nvar script = defineComponent({\n  name: \"ElAvatar\",\n  components: {\n    ElIcon: ElIcon\n  },\n  props: avatarProps,\n  emits: avatarEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var hasLoadError = ref(false);\n    var avatarClass = computed(function () {\n      var size = props.size,\n          icon = props.icon,\n          shape = props.shape;\n      var classList = [\"el-avatar\"];\n      if (size && typeof size === \"string\") classList.push(\"el-avatar--\".concat(size));\n      if (icon) classList.push(\"el-avatar--icon\");\n      if (shape) classList.push(\"el-avatar--\".concat(shape));\n      return classList;\n    });\n    var sizeStyle = computed(function () {\n      var size = props.size;\n      return typeof size === \"number\" ? {\n        height: \"\".concat(size, \"px\"),\n        width: \"\".concat(size, \"px\"),\n        lineHeight: \"\".concat(size, \"px\")\n      } : {};\n    });\n    var fitStyle = computed(function () {\n      return {\n        objectFit: props.fit\n      };\n    });\n    watch(function () {\n      return props.src;\n    }, function () {\n      return hasLoadError.value = false;\n    });\n\n    function handleError(e) {\n      hasLoadError.value = true;\n      emit(\"error\", e);\n    }\n\n    return {\n      hasLoadError: hasLoadError,\n      avatarClass: avatarClass,\n      sizeStyle: sizeStyle,\n      fitStyle: fitStyle,\n      handleError: handleError\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}