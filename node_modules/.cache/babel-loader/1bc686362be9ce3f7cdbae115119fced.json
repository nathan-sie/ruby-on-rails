{"ast":null,"code":"import { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../utils/constants.mjs';\n\nvar useMove = function useMove(props, checkedState, propsKey, emit) {\n  var _emit = function _emit(value, type, checked) {\n    emit(UPDATE_MODEL_EVENT, value);\n    emit(CHANGE_EVENT, value, type, checked);\n  };\n\n  var addToLeft = function addToLeft() {\n    var currentValue = props.modelValue.slice();\n    checkedState.rightChecked.forEach(function (item) {\n      var index = currentValue.indexOf(item);\n\n      if (index > -1) {\n        currentValue.splice(index, 1);\n      }\n    });\n\n    _emit(currentValue, \"left\", checkedState.rightChecked);\n  };\n\n  var addToRight = function addToRight() {\n    var currentValue = props.modelValue.slice();\n    var itemsToBeMoved = props.data.filter(function (item) {\n      var itemKey = item[propsKey.value];\n      return checkedState.leftChecked.includes(itemKey) && !props.modelValue.includes(itemKey);\n    }).map(function (item) {\n      return item[propsKey.value];\n    });\n    currentValue = props.targetOrder === \"unshift\" ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);\n\n    if (props.targetOrder === \"original\") {\n      currentValue = props.data.filter(function (item) {\n        return currentValue.includes(item[propsKey.value]);\n      }).map(function (item) {\n        return item[propsKey.value];\n      });\n    }\n\n    _emit(currentValue, \"right\", checkedState.leftChecked);\n  };\n\n  return {\n    addToLeft: addToLeft,\n    addToRight: addToRight\n  };\n};\n\nexport { useMove };","map":null,"metadata":{},"sourceType":"module"}