{"ast":null,"code":"var _radioEmits;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ref, inject, computed } from 'vue';\nimport { buildProps } from '../../../utils/props.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport { isNumber, isBool } from '../../../utils/util.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useFormItemProps, useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { isString } from '@vue/shared';\nimport { radioGroupKey } from '../../../tokens/radio.mjs';\nvar radioPropsBase = buildProps(_objectSpread(_objectSpread({}, useFormItemProps), {}, {\n  label: {\n    type: [String, Number, Boolean],\n    \"default\": \"\"\n  }\n}));\nvar radioProps = buildProps(_objectSpread(_objectSpread({}, radioPropsBase), {}, {\n  modelValue: {\n    type: [String, Number, Boolean],\n    \"default\": \"\"\n  },\n  name: {\n    type: String,\n    \"default\": \"\"\n  },\n  border: Boolean\n}));\nvar radioEmits = (_radioEmits = {}, _defineProperty(_radioEmits, UPDATE_MODEL_EVENT, function (val) {\n  return isString(val) || isNumber(val) || isBool(val);\n}), _defineProperty(_radioEmits, \"change\", function change(val) {\n  return isString(val) || isNumber(val) || isBool(val);\n}), _radioEmits);\n\nvar useRadio = function useRadio(props, emit) {\n  var radioRef = ref();\n  var radioGroup = inject(radioGroupKey, void 0);\n  var isGroup = computed(function () {\n    return !!radioGroup;\n  });\n  var modelValue = computed({\n    get: function get() {\n      return isGroup.value ? radioGroup.modelValue : props.modelValue;\n    },\n    set: function set(val) {\n      if (isGroup.value) {\n        radioGroup.changeEvent(val);\n      } else {\n        emit(UPDATE_MODEL_EVENT, val);\n      }\n\n      radioRef.value.checked = props.modelValue === props.label;\n    }\n  });\n\n  var _useFormItem = useFormItem({\n    size: computed(function () {\n      return radioGroup == null ? void 0 : radioGroup.size;\n    }),\n    disabled: computed(function () {\n      return radioGroup == null ? void 0 : radioGroup.disabled;\n    })\n  }),\n      size = _useFormItem.size,\n      disabled = _useFormItem.disabled;\n\n  var focus = ref(false);\n  var tabIndex = computed(function () {\n    return disabled.value || isGroup.value && modelValue.value !== props.label ? -1 : 0;\n  });\n  return {\n    radioRef: radioRef,\n    isGroup: isGroup,\n    radioGroup: radioGroup,\n    focus: focus,\n    size: size,\n    disabled: disabled,\n    tabIndex: tabIndex,\n    modelValue: modelValue\n  };\n};\n\nexport { radioEmits, radioProps, radioPropsBase, useRadio };","map":null,"metadata":{},"sourceType":"module"}