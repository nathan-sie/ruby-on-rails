{"ast":null,"code":"import { defineComponent, computed, ref, inject } from 'vue';\nimport dayjs from 'dayjs';\nimport union from 'lodash/union';\nimport '../../../../hooks/index.mjs';\nimport { EVENT_CODE } from '../../../../utils/aria.mjs';\nimport './basic-time-spinner.mjs';\nimport { useOldValue, getAvailableArrs } from './useTimePicker.mjs';\nimport script$1 from './basic-time-spinner.vue_vue&type=script&lang.mjs';\nimport { useLocaleInject } from '../../../../hooks/use-locale/index.mjs';\n\nvar makeSelectRange = function makeSelectRange(start, end) {\n  var result = [];\n\n  for (var i = start; i <= end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\n\nvar script = defineComponent({\n  components: {\n    TimeSpinner: script$1\n  },\n  props: {\n    visible: Boolean,\n    actualVisible: Boolean,\n    parsedValue: {\n      type: [Array]\n    },\n    format: {\n      type: String,\n      \"default\": \"\"\n    }\n  },\n  emits: [\"pick\", \"select-range\", \"set-picker-option\"],\n  setup: function setup(props, ctx) {\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t,\n        lang = _useLocaleInject.lang;\n\n    var minDate = computed(function () {\n      return props.parsedValue[0];\n    });\n    var maxDate = computed(function () {\n      return props.parsedValue[1];\n    });\n    var oldValue = useOldValue(props);\n\n    var handleCancel = function handleCancel() {\n      ctx.emit(\"pick\", oldValue.value, null);\n    };\n\n    var showSeconds = computed(function () {\n      return props.format.includes(\"ss\");\n    });\n    var amPmMode = computed(function () {\n      if (props.format.includes(\"A\")) return \"A\";\n      if (props.format.includes(\"a\")) return \"a\";\n      return \"\";\n    });\n    var minSelectableRange = ref([]);\n    var maxSelectableRange = ref([]);\n\n    var handleConfirm = function handleConfirm() {\n      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      ctx.emit(\"pick\", [minDate.value, maxDate.value], visible);\n    };\n\n    var handleMinChange = function handleMinChange(date) {\n      handleChange(date.millisecond(0), maxDate.value);\n    };\n\n    var handleMaxChange = function handleMaxChange(date) {\n      handleChange(minDate.value, date.millisecond(0));\n    };\n\n    var isValidValue = function isValidValue(_date) {\n      var parsedDate = _date.map(function (_) {\n        return dayjs(_).locale(lang.value);\n      });\n\n      var result = getRangeAvailableTime(parsedDate);\n      return parsedDate[0].isSame(result[0]) && parsedDate[1].isSame(result[1]);\n    };\n\n    var handleChange = function handleChange(_minDate, _maxDate) {\n      ctx.emit(\"pick\", [_minDate, _maxDate], true);\n    };\n\n    var btnConfirmDisabled = computed(function () {\n      return minDate.value > maxDate.value;\n    });\n    var selectionRange = ref([0, 2]);\n\n    var setMinSelectionRange = function setMinSelectionRange(start, end) {\n      ctx.emit(\"select-range\", start, end, \"min\");\n      selectionRange.value = [start, end];\n    };\n\n    var offset = computed(function () {\n      return showSeconds.value ? 11 : 8;\n    });\n\n    var setMaxSelectionRange = function setMaxSelectionRange(start, end) {\n      ctx.emit(\"select-range\", start, end, \"max\");\n      selectionRange.value = [start + offset.value, end + offset.value];\n    };\n\n    var changeSelectionRange = function changeSelectionRange(step) {\n      var list = showSeconds.value ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11];\n      var mapping = [\"hours\", \"minutes\"].concat(showSeconds.value ? [\"seconds\"] : []);\n      var index = list.indexOf(selectionRange.value[0]);\n      var next = (index + step + list.length) % list.length;\n      var half = list.length / 2;\n\n      if (next < half) {\n        timePickerOptions[\"start_emitSelectRange\"](mapping[next]);\n      } else {\n        timePickerOptions[\"end_emitSelectRange\"](mapping[next - half]);\n      }\n    };\n\n    var handleKeydown = function handleKeydown(event) {\n      var code = event.code;\n\n      if (code === EVENT_CODE.left || code === EVENT_CODE.right) {\n        var step = code === EVENT_CODE.left ? -1 : 1;\n        changeSelectionRange(step);\n        event.preventDefault();\n        return;\n      }\n\n      if (code === EVENT_CODE.up || code === EVENT_CODE.down) {\n        var _step = code === EVENT_CODE.up ? -1 : 1;\n\n        var role = selectionRange.value[0] < offset.value ? \"start\" : \"end\";\n        timePickerOptions[\"\".concat(role, \"_scrollDown\")](_step);\n        event.preventDefault();\n        return;\n      }\n    };\n\n    var disabledHours_ = function disabledHours_(role, compare) {\n      var defaultDisable = disabledHours ? disabledHours(role) : [];\n      var isStart = role === \"start\";\n      var compareDate = compare || (isStart ? maxDate.value : minDate.value);\n      var compareHour = compareDate.hour();\n      var nextDisable = isStart ? makeSelectRange(compareHour + 1, 23) : makeSelectRange(0, compareHour - 1);\n      return union(defaultDisable, nextDisable);\n    };\n\n    var disabledMinutes_ = function disabledMinutes_(hour, role, compare) {\n      var defaultDisable = disabledMinutes ? disabledMinutes(hour, role) : [];\n      var isStart = role === \"start\";\n      var compareDate = compare || (isStart ? maxDate.value : minDate.value);\n      var compareHour = compareDate.hour();\n\n      if (hour !== compareHour) {\n        return defaultDisable;\n      }\n\n      var compareMinute = compareDate.minute();\n      var nextDisable = isStart ? makeSelectRange(compareMinute + 1, 59) : makeSelectRange(0, compareMinute - 1);\n      return union(defaultDisable, nextDisable);\n    };\n\n    var disabledSeconds_ = function disabledSeconds_(hour, minute, role, compare) {\n      var defaultDisable = disabledSeconds ? disabledSeconds(hour, minute, role) : [];\n      var isStart = role === \"start\";\n      var compareDate = compare || (isStart ? maxDate.value : minDate.value);\n      var compareHour = compareDate.hour();\n      var compareMinute = compareDate.minute();\n\n      if (hour !== compareHour || minute !== compareMinute) {\n        return defaultDisable;\n      }\n\n      var compareSecond = compareDate.second();\n      var nextDisable = isStart ? makeSelectRange(compareSecond + 1, 59) : makeSelectRange(0, compareSecond - 1);\n      return union(defaultDisable, nextDisable);\n    };\n\n    var getRangeAvailableTime = function getRangeAvailableTime(dates) {\n      return dates.map(function (_, index) {\n        return getRangeAvailableTimeEach(dates[0], dates[1], index === 0 ? \"start\" : \"end\");\n      });\n    };\n\n    var _getAvailableArrs = getAvailableArrs(disabledHours_, disabledMinutes_, disabledSeconds_),\n        getAvailableHours = _getAvailableArrs.getAvailableHours,\n        getAvailableMinutes = _getAvailableArrs.getAvailableMinutes,\n        getAvailableSeconds = _getAvailableArrs.getAvailableSeconds;\n\n    var getRangeAvailableTimeEach = function getRangeAvailableTimeEach(startDate, endDate, role) {\n      var availableMap = {\n        hour: getAvailableHours,\n        minute: getAvailableMinutes,\n        second: getAvailableSeconds\n      };\n      var isStart = role === \"start\";\n      var result = isStart ? startDate : endDate;\n      var compareDate = isStart ? endDate : startDate;\n      [\"hour\", \"minute\", \"second\"].forEach(function (_) {\n        if (availableMap[_]) {\n          var availableArr;\n          var method = availableMap[_];\n\n          if (_ === \"minute\") {\n            availableArr = method(result.hour(), role, compareDate);\n          } else if (_ === \"second\") {\n            availableArr = method(result.hour(), result.minute(), role, compareDate);\n          } else {\n            availableArr = method(role, compareDate);\n          }\n\n          if (availableArr && availableArr.length && !availableArr.includes(result[_]())) {\n            var pos = isStart ? 0 : availableArr.length - 1;\n            result = result[_](availableArr[pos]);\n          }\n        }\n      });\n      return result;\n    };\n\n    var parseUserInput = function parseUserInput(value) {\n      if (!value) return null;\n\n      if (Array.isArray(value)) {\n        return value.map(function (_) {\n          return dayjs(_, props.format).locale(lang.value);\n        });\n      }\n\n      return dayjs(value, props.format).locale(lang.value);\n    };\n\n    var formatToString = function formatToString(value) {\n      if (!value) return null;\n\n      if (Array.isArray(value)) {\n        return value.map(function (_) {\n          return _.format(props.format);\n        });\n      }\n\n      return value.format(props.format);\n    };\n\n    var getDefaultValue = function getDefaultValue() {\n      if (Array.isArray(defaultValue)) {\n        return defaultValue.map(function (_) {\n          return dayjs(_).locale(lang.value);\n        });\n      }\n\n      var defaultDay = dayjs(defaultValue).locale(lang.value);\n      return [defaultDay, defaultDay.add(60, \"m\")];\n    };\n\n    ctx.emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    ctx.emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    ctx.emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    ctx.emit(\"set-picker-option\", [\"handleKeydown\", handleKeydown]);\n    ctx.emit(\"set-picker-option\", [\"getDefaultValue\", getDefaultValue]);\n    ctx.emit(\"set-picker-option\", [\"getRangeAvailableTime\", getRangeAvailableTime]);\n    var timePickerOptions = {};\n\n    var onSetOption = function onSetOption(e) {\n      timePickerOptions[e[0]] = e[1];\n    };\n\n    var pickerBase = inject(\"EP_PICKER_BASE\");\n    var _pickerBase$props = pickerBase.props,\n        arrowControl = _pickerBase$props.arrowControl,\n        disabledHours = _pickerBase$props.disabledHours,\n        disabledMinutes = _pickerBase$props.disabledMinutes,\n        disabledSeconds = _pickerBase$props.disabledSeconds,\n        defaultValue = _pickerBase$props.defaultValue;\n    return {\n      arrowControl: arrowControl,\n      onSetOption: onSetOption,\n      setMaxSelectionRange: setMaxSelectionRange,\n      setMinSelectionRange: setMinSelectionRange,\n      btnConfirmDisabled: btnConfirmDisabled,\n      handleCancel: handleCancel,\n      handleConfirm: handleConfirm,\n      t: t,\n      showSeconds: showSeconds,\n      minDate: minDate,\n      maxDate: maxDate,\n      amPmMode: amPmMode,\n      handleMinChange: handleMinChange,\n      handleMaxChange: handleMaxChange,\n      minSelectableRange: minSelectableRange,\n      maxSelectableRange: maxSelectableRange,\n      disabledHours_: disabledHours_,\n      disabledMinutes_: disabledMinutes_,\n      disabledSeconds_: disabledSeconds_\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}