{"ast":null,"code":"import { defineComponent, inject, getCurrentInstance, ref, watch, nextTick } from 'vue';\nimport { capitalize } from '@vue/shared';\nimport '../../../directives/index.mjs';\nimport Resize from '../../../directives/resize/index.mjs';\nvar script = defineComponent({\n  name: \"ElTabBar\",\n  directives: {\n    Resize: Resize\n  },\n  props: {\n    tabs: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  setup: function setup(props) {\n    var rootTabs = inject(\"rootTabs\");\n\n    if (!rootTabs) {\n      throw new Error(\"ElTabBar must use with ElTabs\");\n    }\n\n    var instance = getCurrentInstance();\n\n    var getBarStyle = function getBarStyle() {\n      var style = {};\n      var offset = 0;\n      var tabSize = 0;\n      var sizeName = [\"top\", \"bottom\"].includes(rootTabs.props.tabPosition) ? \"width\" : \"height\";\n      var sizeDir = sizeName === \"width\" ? \"x\" : \"y\";\n      props.tabs.every(function (tab) {\n        var _a;\n\n        var $el = (_a = instance.parent.refs) == null ? void 0 : _a[\"tab-\".concat(tab.paneName)];\n\n        if (!$el) {\n          return false;\n        }\n\n        if (!tab.active) {\n          return true;\n        } else {\n          tabSize = $el[\"client\".concat(capitalize(sizeName))];\n          var position = sizeDir === \"x\" ? \"left\" : \"top\";\n          offset = $el.getBoundingClientRect()[position] - $el.parentElement.getBoundingClientRect()[position];\n          var tabStyles = window.getComputedStyle($el);\n\n          if (sizeName === \"width\") {\n            if (props.tabs.length > 1) {\n              tabSize -= parseFloat(tabStyles.paddingLeft) + parseFloat(tabStyles.paddingRight);\n            }\n\n            offset += parseFloat(tabStyles.paddingLeft);\n          }\n\n          return false;\n        }\n      });\n      var transform = \"translate\".concat(capitalize(sizeDir), \"(\").concat(offset, \"px)\");\n      style[sizeName] = \"\".concat(tabSize, \"px\");\n      style.transform = transform;\n      style.msTransform = transform;\n      style.webkitTransform = transform;\n      return style;\n    };\n\n    var barStyle = ref(getBarStyle());\n\n    var update = function update() {\n      barStyle.value = getBarStyle();\n    };\n\n    watch(function () {\n      return props.tabs;\n    }, function () {\n      nextTick(function () {\n        update();\n      });\n    });\n    return {\n      rootTabs: rootTabs,\n      barStyle: barStyle,\n      update: update\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}