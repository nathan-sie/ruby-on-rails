{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { h, render, watch, isVNode } from 'vue';\nimport { hasOwn, isString } from '@vue/shared';\nimport isServer from '../../../utils/isServer.mjs';\nimport '../../../utils/util.mjs';\nimport './index.mjs';\nimport script from './index.vue_vue&type=script&lang.mjs';\nvar messageInstance = new Map();\n\nvar initInstance = function initInstance(props, container) {\n  var vnode = h(script, props);\n  render(vnode, container);\n  document.body.appendChild(container.firstElementChild);\n  return vnode.component;\n};\n\nvar genContainer = function genContainer() {\n  return document.createElement(\"div\");\n};\n\nvar showMessage = function showMessage(options) {\n  var container = genContainer();\n\n  options.onVanish = function () {\n    render(null, container);\n    messageInstance[\"delete\"](vm);\n  };\n\n  options.onAction = function (action) {\n    var currentMsg = messageInstance.get(vm);\n    var resolve;\n\n    if (options.showInput) {\n      resolve = {\n        value: vm.inputValue,\n        action: action\n      };\n    } else {\n      resolve = action;\n    }\n\n    if (options.callback) {\n      options.callback(resolve, instance.proxy);\n    } else {\n      if (action === \"cancel\" || action === \"close\") {\n        if (options.distinguishCancelAndClose && action !== \"cancel\") {\n          currentMsg.reject(\"close\");\n        } else {\n          currentMsg.reject(\"cancel\");\n        }\n      } else {\n        currentMsg.resolve(resolve);\n      }\n    }\n  };\n\n  var instance = initInstance(options, container);\n  var vm = instance.proxy;\n\n  for (var prop in options) {\n    if (hasOwn(options, prop) && !hasOwn(vm.$props, prop)) {\n      vm[prop] = options[prop];\n    }\n  }\n\n  watch(function () {\n    return vm.message;\n  }, function (newVal, oldVal) {\n    if (isVNode(newVal)) {\n      instance.slots[\"default\"] = function () {\n        return [newVal];\n      };\n    } else if (isVNode(oldVal) && !isVNode(newVal)) {\n      delete instance.slots[\"default\"];\n    }\n  }, {\n    immediate: true\n  });\n  vm.visible = true;\n  return vm;\n};\n\nfunction MessageBox(options) {\n  if (isServer) return;\n  var callback;\n\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options\n    };\n  } else {\n    callback = options.callback;\n  }\n\n  return new Promise(function (resolve, reject) {\n    var vm = showMessage(options);\n    messageInstance.set(vm, {\n      options: options,\n      callback: callback,\n      resolve: resolve,\n      reject: reject\n    });\n  });\n}\n\nMessageBox.alert = function (message, title, options) {\n  if (_typeof(title) === \"object\") {\n    options = title;\n    title = \"\";\n  } else if (title === void 0) {\n    title = \"\";\n  }\n\n  return MessageBox(Object.assign({\n    title: title,\n    message: message,\n    type: \"\",\n    closeOnPressEscape: false,\n    closeOnClickModal: false\n  }, options, {\n    boxType: \"alert\"\n  }));\n};\n\nMessageBox.confirm = function (message, title, options) {\n  if (_typeof(title) === \"object\") {\n    options = title;\n    title = \"\";\n  } else if (title === void 0) {\n    title = \"\";\n  }\n\n  return MessageBox(Object.assign({\n    title: title,\n    message: message,\n    type: \"\",\n    showCancelButton: true\n  }, options, {\n    boxType: \"confirm\"\n  }));\n};\n\nMessageBox.prompt = function (message, title, options) {\n  if (_typeof(title) === \"object\") {\n    options = title;\n    title = \"\";\n  } else if (title === void 0) {\n    title = \"\";\n  }\n\n  return MessageBox(Object.assign({\n    title: title,\n    message: message,\n    showCancelButton: true,\n    showInput: true,\n    type: \"\"\n  }, options, {\n    boxType: \"prompt\"\n  }));\n};\n\nMessageBox.close = function () {\n  messageInstance.forEach(function (_, vm) {\n    vm.doClose();\n  });\n  messageInstance.clear();\n};\n\nexport { MessageBox as default };","map":null,"metadata":{},"sourceType":"module"}