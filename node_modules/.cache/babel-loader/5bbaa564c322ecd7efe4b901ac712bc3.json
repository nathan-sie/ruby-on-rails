{"ast":null,"code":"function calcColorChannels(c) {\n  var rawColor = c.replace(\"#\", \"\");\n\n  if (/^[0-9a-fA-F]{3}$/.test(rawColor)) {\n    rawColor = rawColor[0].repeat(2) + rawColor[1].repeat(2) + rawColor[2].repeat(2);\n  }\n\n  if (/^[0-9a-fA-F]{6}$/.test(rawColor)) {\n    return {\n      red: parseInt(rawColor.slice(0, 2), 16),\n      green: parseInt(rawColor.slice(2, 4), 16),\n      blue: parseInt(rawColor.slice(4, 6), 16)\n    };\n  }\n\n  return {\n    red: 255,\n    green: 255,\n    blue: 255\n  };\n}\n\nfunction mixColor(color) {\n  var percent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.2;\n\n  var _calcColorChannels = calcColorChannels(color),\n      red = _calcColorChannels.red,\n      green = _calcColorChannels.green,\n      blue = _calcColorChannels.blue;\n\n  if (percent > 0) {\n    red *= 1 - percent;\n    green *= 1 - percent;\n    blue *= 1 - percent;\n  } else {\n    var value = Math.abs(percent);\n    red += (255 - red) * Math.abs(percent);\n    green += (255 - green) * value;\n    blue += (255 - blue) * value;\n  }\n\n  return \"rgb(\".concat(Math.round(red), \", \").concat(Math.round(green), \", \").concat(Math.round(blue), \")\");\n}\n\nfunction lighten(color) {\n  var percent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.2;\n  return mixColor(color, -percent);\n}\n\nfunction darken(color) {\n  var percent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.2;\n  return mixColor(color, percent);\n}\n\nexport { calcColorChannels, darken, lighten, mixColor };","map":null,"metadata":{},"sourceType":"module"}