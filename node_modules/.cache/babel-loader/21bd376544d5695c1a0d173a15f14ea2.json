{"ast":null,"code":"import { defineComponent, ref, watch, provide } from 'vue';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../utils/constants.mjs';\nvar script = defineComponent({\n  name: \"ElCollapse\",\n  props: {\n    accordion: Boolean,\n    modelValue: {\n      type: [Array, String, Number],\n      \"default\": function _default() {\n        return [];\n      }\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var activeNames = ref([].concat(props.modelValue));\n\n    var setActiveNames = function setActiveNames(_activeNames) {\n      activeNames.value = [].concat(_activeNames);\n      var value = props.accordion ? activeNames.value[0] : activeNames.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(CHANGE_EVENT, value);\n    };\n\n    var handleItemClick = function handleItemClick(name) {\n      if (props.accordion) {\n        setActiveNames((activeNames.value[0] || activeNames.value[0] === 0) && activeNames.value[0] === name ? \"\" : name);\n      } else {\n        var _activeNames = activeNames.value.slice(0);\n\n        var index = _activeNames.indexOf(name);\n\n        if (index > -1) {\n          _activeNames.splice(index, 1);\n        } else {\n          _activeNames.push(name);\n        }\n\n        setActiveNames(_activeNames);\n      }\n    };\n\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      activeNames.value = [].concat(props.modelValue);\n    });\n    provide(\"collapse\", {\n      activeNames: activeNames,\n      handleItemClick: handleItemClick\n    });\n    return {\n      activeNames: activeNames,\n      setActiveNames: setActiveNames,\n      handleItemClick: handleItemClick\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}