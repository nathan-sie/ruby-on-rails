{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, ref, computed } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/icon.mjs';\nimport { alertProps, alertEmits } from './alert.mjs';\nvar script = defineComponent({\n  name: \"ElAlert\",\n  components: _objectSpread({\n    ElIcon: ElIcon\n  }, TypeComponents),\n  props: alertProps,\n  emits: alertEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n    var visible = ref(true);\n    var typeClass = computed(function () {\n      return \"el-alert--\".concat(props.type);\n    });\n    var iconComponent = computed(function () {\n      return TypeComponentsMap[props.type] || TypeComponentsMap[\"info\"];\n    });\n    var isBigIcon = computed(function () {\n      return props.description || slots[\"default\"] ? \"is-big\" : \"\";\n    });\n    var isBoldTitle = computed(function () {\n      return props.description || slots[\"default\"] ? \"is-bold\" : \"\";\n    });\n\n    var close = function close(evt) {\n      visible.value = false;\n      emit(\"close\", evt);\n    };\n\n    return {\n      visible: visible,\n      typeClass: typeClass,\n      iconComponent: iconComponent,\n      isBigIcon: isBigIcon,\n      isBoldTitle: isBoldTitle,\n      close: close\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}