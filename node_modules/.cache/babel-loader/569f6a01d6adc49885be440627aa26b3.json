{"ast":null,"code":"import { defineComponent, ref, computed, nextTick, watch, onMounted, onUpdated } from 'vue';\nimport { NOOP, isArray } from '@vue/shared';\nimport debounce from 'lodash/debounce';\nimport '../../../hooks/index.mjs';\nimport '../../../directives/index.mjs';\nimport { generateId } from '../../../utils/util.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport _Scrollbar from '../../scrollbar/index.mjs';\nimport _Popper from '../../popper/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Loading } from '@element-plus/icons';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport useAttrs from '../../../hooks/use-attrs/index.mjs';\nimport { Effect } from '../../popper/src/use-popper/defaults.mjs';\nvar script = defineComponent({\n  name: \"ElAutocomplete\",\n  components: {\n    ElPopper: _Popper,\n    ElInput: ElInput,\n    ElScrollbar: _Scrollbar,\n    ElIcon: ElIcon,\n    Loading: Loading\n  },\n  directives: {\n    clickoutside: ClickOutside\n  },\n  inheritAttrs: false,\n  props: {\n    valueKey: {\n      type: String,\n      \"default\": \"value\"\n    },\n    modelValue: {\n      type: [String, Number],\n      \"default\": \"\"\n    },\n    debounce: {\n      type: Number,\n      \"default\": 300\n    },\n    placement: {\n      type: String,\n      validator: function validator(val) {\n        return [\"top\", \"top-start\", \"top-end\", \"bottom\", \"bottom-start\", \"bottom-end\"].includes(val);\n      },\n      \"default\": \"bottom-start\"\n    },\n    fetchSuggestions: {\n      type: Function,\n      \"default\": NOOP\n    },\n    popperClass: {\n      type: String,\n      \"default\": \"\"\n    },\n    triggerOnFocus: {\n      type: Boolean,\n      \"default\": true\n    },\n    selectWhenUnmatched: {\n      type: Boolean,\n      \"default\": false\n    },\n    hideLoading: {\n      type: Boolean,\n      \"default\": false\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      \"default\": true\n    },\n    highlightFirstItem: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, \"input\", \"change\", \"focus\", \"blur\", \"clear\", \"select\"],\n  setup: function setup(props, ctx) {\n    var attrs = useAttrs();\n    var suggestions = ref([]);\n    var highlightedIndex = ref(-1);\n    var dropdownWidth = ref(\"\");\n    var activated = ref(false);\n    var suggestionDisabled = ref(false);\n    var loading = ref(false);\n    var inputRef = ref(null);\n    var regionRef = ref(null);\n    var popper = ref(null);\n    var id = computed(function () {\n      return \"el-autocomplete-\".concat(generateId());\n    });\n    var suggestionVisible = computed(function () {\n      var isValidData = isArray(suggestions.value) && suggestions.value.length > 0;\n      return (isValidData || loading.value) && activated.value;\n    });\n    var suggestionLoading = computed(function () {\n      return !props.hideLoading && loading.value;\n    });\n\n    var updatePopperPosition = function updatePopperPosition() {\n      nextTick(popper.value.update);\n    };\n\n    watch(suggestionVisible, function () {\n      dropdownWidth.value = \"\".concat(inputRef.value.$el.offsetWidth, \"px\");\n    });\n    onMounted(function () {\n      inputRef.value.inputOrTextarea.setAttribute(\"role\", \"textbox\");\n      inputRef.value.inputOrTextarea.setAttribute(\"aria-autocomplete\", \"list\");\n      inputRef.value.inputOrTextarea.setAttribute(\"aria-controls\", \"id\");\n      inputRef.value.inputOrTextarea.setAttribute(\"aria-activedescendant\", \"\".concat(id.value, \"-item-\").concat(highlightedIndex.value));\n      var $ul = regionRef.value.querySelector(\".el-autocomplete-suggestion__list\");\n      $ul.setAttribute(\"role\", \"listbox\");\n      $ul.setAttribute(\"id\", id.value);\n    });\n    onUpdated(updatePopperPosition);\n\n    var getData = function getData(queryString) {\n      if (suggestionDisabled.value) {\n        return;\n      }\n\n      loading.value = true;\n      updatePopperPosition();\n      props.fetchSuggestions(queryString, function (suggestionsArg) {\n        loading.value = false;\n\n        if (suggestionDisabled.value) {\n          return;\n        }\n\n        if (isArray(suggestionsArg)) {\n          suggestions.value = suggestionsArg;\n          highlightedIndex.value = props.highlightFirstItem ? 0 : -1;\n        } else {\n          throwError(\"ElAutocomplete\", \"autocomplete suggestions must be an array\");\n        }\n      });\n    };\n\n    var debouncedGetData = debounce(getData, props.debounce);\n\n    var handleInput = function handleInput(value) {\n      ctx.emit(\"input\", value);\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      suggestionDisabled.value = false;\n\n      if (!props.triggerOnFocus && !value) {\n        suggestionDisabled.value = true;\n        suggestions.value = [];\n        return;\n      }\n\n      debouncedGetData(value);\n    };\n\n    var handleChange = function handleChange(value) {\n      ctx.emit(\"change\", value);\n    };\n\n    var handleFocus = function handleFocus(e) {\n      activated.value = true;\n      ctx.emit(\"focus\", e);\n\n      if (props.triggerOnFocus) {\n        debouncedGetData(props.modelValue);\n      }\n    };\n\n    var handleBlur = function handleBlur(e) {\n      ctx.emit(\"blur\", e);\n    };\n\n    var handleClear = function handleClear() {\n      activated.value = false;\n      ctx.emit(UPDATE_MODEL_EVENT, \"\");\n      ctx.emit(\"clear\");\n    };\n\n    var handleKeyEnter = function handleKeyEnter() {\n      if (suggestionVisible.value && highlightedIndex.value >= 0 && highlightedIndex.value < suggestions.value.length) {\n        select(suggestions.value[highlightedIndex.value]);\n      } else if (props.selectWhenUnmatched) {\n        ctx.emit(\"select\", {\n          value: props.modelValue\n        });\n        nextTick(function () {\n          suggestions.value = [];\n          highlightedIndex.value = -1;\n        });\n      }\n    };\n\n    var close = function close() {\n      activated.value = false;\n    };\n\n    var focus = function focus() {\n      inputRef.value.focus();\n    };\n\n    var select = function select(item) {\n      ctx.emit(\"input\", item[props.valueKey]);\n      ctx.emit(UPDATE_MODEL_EVENT, item[props.valueKey]);\n      ctx.emit(\"select\", item);\n      nextTick(function () {\n        suggestions.value = [];\n        highlightedIndex.value = -1;\n      });\n    };\n\n    var highlight = function highlight(index) {\n      if (!suggestionVisible.value || loading.value) {\n        return;\n      }\n\n      if (index < 0) {\n        highlightedIndex.value = -1;\n        return;\n      }\n\n      if (index >= suggestions.value.length) {\n        index = suggestions.value.length - 1;\n      }\n\n      var suggestion = regionRef.value.querySelector(\".el-autocomplete-suggestion__wrap\");\n      var suggestionList = suggestion.querySelectorAll(\".el-autocomplete-suggestion__list li\");\n      var highlightItem = suggestionList[index];\n      var scrollTop = suggestion.scrollTop;\n      var offsetTop = highlightItem.offsetTop,\n          scrollHeight = highlightItem.scrollHeight;\n\n      if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {\n        suggestion.scrollTop += scrollHeight;\n      }\n\n      if (offsetTop < scrollTop) {\n        suggestion.scrollTop -= scrollHeight;\n      }\n\n      highlightedIndex.value = index;\n      inputRef.value.inputOrTextarea.setAttribute(\"aria-activedescendant\", \"\".concat(id.value, \"-item-\").concat(highlightedIndex.value));\n    };\n\n    return {\n      Effect: Effect,\n      attrs: attrs,\n      suggestions: suggestions,\n      highlightedIndex: highlightedIndex,\n      dropdownWidth: dropdownWidth,\n      activated: activated,\n      suggestionDisabled: suggestionDisabled,\n      loading: loading,\n      inputRef: inputRef,\n      regionRef: regionRef,\n      popper: popper,\n      id: id,\n      suggestionVisible: suggestionVisible,\n      suggestionLoading: suggestionLoading,\n      getData: getData,\n      handleInput: handleInput,\n      handleChange: handleChange,\n      handleFocus: handleFocus,\n      handleBlur: handleBlur,\n      handleClear: handleClear,\n      handleKeyEnter: handleKeyEnter,\n      close: close,\n      focus: focus,\n      select: select,\n      highlight: highlight\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}