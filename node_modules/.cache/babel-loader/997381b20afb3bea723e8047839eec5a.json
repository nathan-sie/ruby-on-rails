{"ast":null,"code":"function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, inject, ref, computed, nextTick, watch, onMounted, onBeforeUnmount } from 'vue';\nimport { isPromise } from '@vue/shared';\nimport debounce from 'lodash/debounce';\nimport _CascaderPanel from '../../cascader-panel/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport _Popper from '../../popper/index.mjs';\nimport _Scrollbar from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { EVENT_CODE, focusNode, getSibling } from '../../../utils/aria.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../utils/constants.mjs';\nimport isServer from '../../../utils/isServer.mjs';\nimport { useGlobalConfig } from '../../../utils/util.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../utils/resize-event.mjs';\nimport { isValidComponentSize } from '../../../utils/validators.mjs';\nimport { isKorean } from '../../../utils/isDef.mjs';\nimport { CircleClose, Check, ArrowDown } from '@element-plus/icons';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { CommonProps } from '../../cascader-panel/src/config.mjs';\nimport { useLocaleInject } from '../../../hooks/use-locale/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nimport { Effect } from '../../popper/src/use-popper/defaults.mjs';\nvar DEFAULT_INPUT_HEIGHT = 40;\nvar INPUT_HEIGHT_MAP = {\n  medium: 36,\n  small: 32,\n  mini: 28\n};\nvar popperOptions = {\n  modifiers: [{\n    name: \"arrowPosition\",\n    enabled: true,\n    phase: \"main\",\n    fn: function fn(_ref) {\n      var state = _ref.state;\n      var modifiersData = state.modifiersData,\n          placement = state.placement;\n      if ([\"right\", \"left\"].includes(placement)) return;\n      modifiersData.arrow.x = 35;\n    },\n    requires: [\"arrow\"]\n  }]\n};\nvar script = defineComponent({\n  name: \"ElCascader\",\n  components: {\n    ElCascaderPanel: _CascaderPanel,\n    ElInput: ElInput,\n    ElPopper: _Popper,\n    ElScrollbar: _Scrollbar,\n    ElTag: ElTag,\n    ElIcon: ElIcon,\n    CircleClose: CircleClose,\n    Check: Check,\n    ArrowDown: ArrowDown\n  },\n  directives: {\n    Clickoutside: ClickOutside\n  },\n  props: _objectSpread(_objectSpread({}, CommonProps), {}, {\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    placeholder: {\n      type: String\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    filterMethod: {\n      type: Function,\n      \"default\": function _default(node, keyword) {\n        return node.text.includes(keyword);\n      }\n    },\n    separator: {\n      type: String,\n      \"default\": \" / \"\n    },\n    showAllLevels: {\n      type: Boolean,\n      \"default\": true\n    },\n    collapseTags: Boolean,\n    debounce: {\n      type: Number,\n      \"default\": 300\n    },\n    beforeFilter: {\n      type: Function,\n      \"default\": function _default() {\n        return true;\n      }\n    },\n    popperClass: {\n      type: String,\n      \"default\": \"\"\n    },\n    popperAppendToBody: {\n      type: Boolean,\n      \"default\": true\n    }\n  }),\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"focus\", \"blur\", \"visible-change\", \"expand-change\", \"remove-tag\"],\n  setup: function setup(props, _ref2) {\n    var emit = _ref2.emit;\n    var inputInitialHeight = 0;\n    var pressDeleteCount = 0;\n\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t;\n\n    var $ELEMENT = useGlobalConfig();\n    var elForm = inject(elFormKey, {});\n    var elFormItem = inject(elFormItemKey, {});\n    var popper = ref(null);\n    var input = ref(null);\n    var tagWrapper = ref(null);\n    var panel = ref(null);\n    var suggestionPanel = ref(null);\n    var popperVisible = ref(false);\n    var inputHover = ref(false);\n    var filtering = ref(false);\n    var inputValue = ref(\"\");\n    var searchInputValue = ref(\"\");\n    var presentTags = ref([]);\n    var suggestions = ref([]);\n    var isOnComposition = ref(false);\n    var isDisabled = computed(function () {\n      return props.disabled || elForm.disabled;\n    });\n    var inputPlaceholder = computed(function () {\n      return props.placeholder || t(\"el.cascader.placeholder\");\n    });\n    var realSize = computed(function () {\n      return props.size || elFormItem.size || $ELEMENT.size;\n    });\n    var tagSize = computed(function () {\n      return [\"small\", \"mini\"].includes(realSize.value) ? \"mini\" : \"small\";\n    });\n    var multiple = computed(function () {\n      return !!props.props.multiple;\n    });\n    var readonly = computed(function () {\n      return !props.filterable || multiple.value;\n    });\n    var searchKeyword = computed(function () {\n      return multiple.value ? searchInputValue.value : inputValue.value;\n    });\n    var checkedNodes = computed(function () {\n      var _a;\n\n      return ((_a = panel.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    var clearBtnVisible = computed(function () {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value) return false;\n      return !!checkedNodes.value.length;\n    });\n    var presentText = computed(function () {\n      var showAllLevels = props.showAllLevels,\n          separator = props.separator;\n      var nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \" \" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    var checkedValue = computed({\n      get: function get() {\n        return props.modelValue;\n      },\n      set: function set(val) {\n        var _a;\n\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n      }\n    });\n    var popperPaneRef = computed(function () {\n      var _a;\n\n      return (_a = popper.value) == null ? void 0 : _a.popperRef;\n    });\n\n    var togglePopperVisible = function togglePopperVisible(visible) {\n      var _a, _b, _c;\n\n      if (isDisabled.value) return;\n      visible = visible != null ? visible : !popperVisible.value;\n\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", \"\".concat(visible));\n\n        if (visible) {\n          updatePopperPosition();\n          nextTick((_c = panel.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          var value = presentText.value;\n          inputValue.value = value;\n          searchInputValue.value = value;\n        }\n\n        emit(\"visible-change\", visible);\n      }\n    };\n\n    var updatePopperPosition = function updatePopperPosition() {\n      var _a;\n\n      nextTick((_a = popper.value) == null ? void 0 : _a.update);\n    };\n\n    var hideSuggestionPanel = function hideSuggestionPanel() {\n      filtering.value = false;\n    };\n\n    var genTag = function genTag(node) {\n      var showAllLevels = props.showAllLevels,\n          separator = props.separator;\n      return {\n        node: node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled\n      };\n    };\n\n    var deleteTag = function deleteTag(tag) {\n      var _a;\n\n      var node = tag.node;\n      node.doCheck(false);\n      (_a = panel.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"remove-tag\", node.valueByOption);\n    };\n\n    var calculatePresentTags = function calculatePresentTags() {\n      if (!multiple.value) return;\n      var nodes = checkedNodes.value;\n      var tags = [];\n\n      if (nodes.length) {\n        var _nodes = _toArray(nodes),\n            first = _nodes[0],\n            rest = _nodes.slice(1);\n\n        var restCount = rest.length;\n        tags.push(genTag(first));\n\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: \"+ \".concat(restCount),\n              closable: false\n            });\n          } else {\n            rest.forEach(function (node) {\n              return tags.push(genTag(node));\n            });\n          }\n        }\n      }\n\n      presentTags.value = tags;\n    };\n\n    var calculateSuggestions = function calculateSuggestions() {\n      var _a, _b;\n\n      var filterMethod = props.filterMethod,\n          showAllLevels = props.showAllLevels,\n          separator = props.separator;\n      var res = (_b = (_a = panel.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter(function (node) {\n        if (node.isDisabled) return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n\n      if (multiple.value) {\n        presentTags.value.forEach(function (tag) {\n          tag.hitState = false;\n        });\n      }\n\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n\n    var focusFirstNode = function focusFirstNode() {\n      var _a;\n\n      var firstNode;\n\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(\".el-cascader__suggestion-item\");\n      } else {\n        firstNode = (_a = panel.value) == null ? void 0 : _a.$el.querySelector('.el-cascader-node[tabindex=\"-1\"]');\n      }\n\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n\n    var updateStyle = function updateStyle() {\n      var _a, _b;\n\n      var inputInner = (_a = input.value) == null ? void 0 : _a.input;\n      var tagWrapperEl = tagWrapper.value;\n      var suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (isServer || !inputInner) return;\n\n      if (suggestionPanelEl) {\n        var suggestionList = suggestionPanelEl.querySelector(\".el-cascader__suggestion-list\");\n        suggestionList.style.minWidth = \"\".concat(inputInner.offsetWidth, \"px\");\n      }\n\n      if (tagWrapperEl) {\n        var offsetHeight = tagWrapperEl.offsetHeight;\n        var height = presentTags.value.length > 0 ? \"\".concat(Math.max(offsetHeight + 6, inputInitialHeight), \"px\") : \"\".concat(inputInitialHeight, \"px\");\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n\n    var getCheckedNodes = function getCheckedNodes(leafOnly) {\n      var _a;\n\n      return (_a = panel.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n\n    var handleExpandChange = function handleExpandChange(value) {\n      updatePopperPosition();\n      emit(\"expand-change\", value);\n    };\n\n    var handleComposition = function handleComposition(event) {\n      var _a;\n\n      var text = (_a = event.target) == null ? void 0 : _a.value;\n\n      if (event.type === \"compositionend\") {\n        isOnComposition.value = false;\n        nextTick(function () {\n          return handleInput(text);\n        });\n      } else {\n        var lastCharacter = text[text.length - 1] || \"\";\n        isOnComposition.value = !isKorean(lastCharacter);\n      }\n    };\n\n    var handleKeyDown = function handleKeyDown(e) {\n      if (isOnComposition.value) return;\n\n      switch (e.code) {\n        case EVENT_CODE.enter:\n          togglePopperVisible();\n          break;\n\n        case EVENT_CODE.down:\n          togglePopperVisible(true);\n          nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n\n    var handleClear = function handleClear() {\n      var _a;\n\n      (_a = panel.value) == null ? void 0 : _a.clearCheckedNodes();\n      togglePopperVisible(false);\n    };\n\n    var handleSuggestionClick = function handleSuggestionClick(node) {\n      var _a, _b;\n\n      var checked = node.checked;\n\n      if (multiple.value) {\n        (_a = panel.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = panel.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n\n    var handleSuggestionKeyDown = function handleSuggestionKeyDown(e) {\n      var target = e.target;\n      var code = e.code;\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            var distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, '.el-cascader__suggestion-item[tabindex=\"-1\"]'));\n            break;\n          }\n\n        case EVENT_CODE.enter:\n          target.click();\n          break;\n\n        case EVENT_CODE.esc:\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n\n    var handleDelete = function handleDelete() {\n      var tags = presentTags.value;\n      var lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount) return;\n\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n\n    var handleFilter = debounce(function () {\n      var value = searchKeyword.value;\n      if (!value) return;\n      var passed = props.beforeFilter(value);\n\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions)[\"catch\"](function () {});\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n\n    var handleInput = function handleInput(val, e) {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing) return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n\n    watch(filtering, updatePopperPosition);\n    watch([checkedNodes, isDisabled], calculatePresentTags);\n    watch(presentTags, function () {\n      nextTick(function () {\n        return updateStyle();\n      });\n    });\n    watch(presentText, function (val) {\n      return inputValue.value = val;\n    }, {\n      immediate: true\n    });\n    onMounted(function () {\n      var _a;\n\n      var inputEl = (_a = input.value) == null ? void 0 : _a.$el;\n      inputInitialHeight = (inputEl == null ? void 0 : inputEl.offsetHeight) || INPUT_HEIGHT_MAP[realSize.value] || DEFAULT_INPUT_HEIGHT;\n      addResizeListener(inputEl, updateStyle);\n    });\n    onBeforeUnmount(function () {\n      var _a;\n\n      removeResizeListener((_a = input.value) == null ? void 0 : _a.$el, updateStyle);\n    });\n    return {\n      Effect: Effect,\n      popperOptions: popperOptions,\n      popper: popper,\n      popperPaneRef: popperPaneRef,\n      input: input,\n      tagWrapper: tagWrapper,\n      panel: panel,\n      suggestionPanel: suggestionPanel,\n      popperVisible: popperVisible,\n      inputHover: inputHover,\n      inputPlaceholder: inputPlaceholder,\n      filtering: filtering,\n      presentText: presentText,\n      checkedValue: checkedValue,\n      inputValue: inputValue,\n      searchInputValue: searchInputValue,\n      presentTags: presentTags,\n      suggestions: suggestions,\n      isDisabled: isDisabled,\n      isOnComposition: isOnComposition,\n      realSize: realSize,\n      tagSize: tagSize,\n      multiple: multiple,\n      readonly: readonly,\n      clearBtnVisible: clearBtnVisible,\n      t: t,\n      togglePopperVisible: togglePopperVisible,\n      hideSuggestionPanel: hideSuggestionPanel,\n      deleteTag: deleteTag,\n      focusFirstNode: focusFirstNode,\n      getCheckedNodes: getCheckedNodes,\n      handleExpandChange: handleExpandChange,\n      handleKeyDown: handleKeyDown,\n      handleComposition: handleComposition,\n      handleClear: handleClear,\n      handleSuggestionClick: handleSuggestionClick,\n      handleSuggestionKeyDown: handleSuggestionKeyDown,\n      handleDelete: handleDelete,\n      handleInput: handleInput\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}