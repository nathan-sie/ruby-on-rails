{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ref, reactive, toRefs, h, Transition, withCtx, withDirectives, createVNode, vShow, render } from 'vue';\nimport { removeClass } from '../../../utils/dom.mjs';\n\nfunction createLoadingComponent(_ref) {\n  var options = _ref.options,\n      globalLoadingOption = _ref.globalLoadingOption;\n  var vm = null;\n  var afterLeaveTimer = null;\n  var afterLeaveFlag = ref(false);\n  var data = reactive(_objectSpread(_objectSpread({}, options), {}, {\n    originalPosition: \"\",\n    originalOverflow: \"\",\n    visible: false\n  }));\n\n  function setText(text) {\n    data.text = text;\n  }\n\n  function destroySelf() {\n    var target = data.parent;\n\n    if (!target.vLoadingAddClassList) {\n      var loadingNumber = target.getAttribute(\"loading-number\");\n      loadingNumber = Number.parseInt(loadingNumber) - 1;\n\n      if (!loadingNumber) {\n        removeClass(target, \"el-loading-parent--relative\");\n        target.removeAttribute(\"loading-number\");\n      } else {\n        target.setAttribute(\"loading-number\", loadingNumber.toString());\n      }\n\n      removeClass(target, \"el-loading-parent--hidden\");\n    }\n\n    if (vm.el && vm.el.parentNode) {\n      vm.el.parentNode.removeChild(vm.el);\n    }\n  }\n\n  function close() {\n    var target = data.parent;\n    target.vLoadingAddClassList = null;\n\n    if (data.fullscreen) {\n      globalLoadingOption.fullscreenLoading = void 0;\n    }\n\n    afterLeaveFlag.value = true;\n    clearTimeout(afterLeaveTimer);\n    afterLeaveTimer = window.setTimeout(function () {\n      if (afterLeaveFlag.value) {\n        afterLeaveFlag.value = false;\n        destroySelf();\n      }\n    }, 400);\n    data.visible = false;\n  }\n\n  function handleAfterLeave() {\n    if (!afterLeaveFlag.value) return;\n    afterLeaveFlag.value = false;\n    destroySelf();\n  }\n\n  var componentSetupConfig = _objectSpread(_objectSpread({}, toRefs(data)), {}, {\n    setText: setText,\n    close: close,\n    handleAfterLeave: handleAfterLeave\n  });\n\n  var elLoadingComponent = {\n    name: \"ElLoading\",\n    setup: function setup() {\n      return componentSetupConfig;\n    },\n    render: function render() {\n      var _this = this;\n\n      var svg = this.spinner || this.svg;\n      var spinner = h(\"svg\", _objectSpread({\n        \"class\": \"circular\",\n        viewBox: this.svgViewBox ? this.svgViewBox : \"25 25 50 50\"\n      }, svg ? {\n        innerHTML: svg\n      } : {}), [h(\"circle\", {\n        \"class\": \"path\",\n        cx: \"50\",\n        cy: \"50\",\n        r: \"20\",\n        fill: \"none\"\n      })]);\n      var spinnerText = h(\"p\", {\n        \"class\": \"el-loading-text\"\n      }, [this.text]);\n      return h(Transition, {\n        name: \"el-loading-fade\",\n        onAfterLeave: this.handleAfterLeave\n      }, {\n        \"default\": withCtx(function () {\n          return [withDirectives(createVNode(\"div\", {\n            style: {\n              backgroundColor: _this.background || \"\"\n            },\n            \"class\": [\"el-loading-mask\", _this.customClass, _this.fullscreen ? \"is-fullscreen\" : \"\"]\n          }, [h(\"div\", {\n            \"class\": \"el-loading-spinner\"\n          }, [spinner, _this.text ? spinnerText : null])]), [[vShow, _this.visible]])];\n        })\n      });\n    }\n  };\n  vm = createVNode(elLoadingComponent);\n  render(vm, document.createElement(\"div\"));\n  return _objectSpread(_objectSpread({}, componentSetupConfig), {}, {\n    vm: vm,\n\n    get $el() {\n      return vm.el;\n    }\n\n  });\n}\n\nexport { createLoadingComponent };","map":null,"metadata":{},"sourceType":"module"}