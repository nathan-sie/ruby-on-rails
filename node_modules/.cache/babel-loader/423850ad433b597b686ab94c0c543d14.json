{"ast":null,"code":"var EVENT_CODE = {\n  tab: \"Tab\",\n  enter: \"Enter\",\n  space: \"Space\",\n  left: \"ArrowLeft\",\n  up: \"ArrowUp\",\n  right: \"ArrowRight\",\n  down: \"ArrowDown\",\n  esc: \"Escape\",\n  \"delete\": \"Delete\",\n  backspace: \"Backspace\"\n};\nvar FOCUSABLE_ELEMENT_SELECTORS = \"a[href],button:not([disabled]),button:not([hidden]),:not([tabindex=\\\"-1\\\"]),input:not([disabled]),input:not([type=\\\"hidden\\\"]),select:not([disabled]),textarea:not([disabled])\";\n\nvar isVisible = function isVisible(element) {\n  if (process.env.NODE_ENV === \"test\") return true;\n  var computed = getComputedStyle(element);\n  return computed.position === \"fixed\" ? false : element.offsetParent !== null;\n};\n\nvar obtainAllFocusableElements = function obtainAllFocusableElements(element) {\n  return Array.from(element.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS)).filter(function (item) {\n    return isFocusable(item) && isVisible(item);\n  });\n};\n\nvar isFocusable = function isFocusable(element) {\n  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute(\"tabIndex\") !== null) {\n    return true;\n  }\n\n  if (element.disabled) {\n    return false;\n  }\n\n  switch (element.nodeName) {\n    case \"A\":\n      {\n        return !!element.href && element.rel !== \"ignore\";\n      }\n\n    case \"INPUT\":\n      {\n        return !(element.type === \"hidden\" || element.type === \"file\");\n      }\n\n    case \"BUTTON\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      {\n        return true;\n      }\n\n    default:\n      {\n        return false;\n      }\n  }\n};\n\nvar attemptFocus = function attemptFocus(element) {\n  var _a;\n\n  if (!isFocusable(element)) {\n    return false;\n  }\n\n  Utils.IgnoreUtilFocusChanges = true;\n  (_a = element.focus) == null ? void 0 : _a.call(element);\n  Utils.IgnoreUtilFocusChanges = false;\n  return document.activeElement === element;\n};\n\nvar triggerEvent = function triggerEvent(elm, name) {\n  var eventName;\n\n  if (name.includes(\"mouse\") || name.includes(\"click\")) {\n    eventName = \"MouseEvents\";\n  } else if (name.includes(\"key\")) {\n    eventName = \"KeyboardEvent\";\n  } else {\n    eventName = \"HTMLEvents\";\n  }\n\n  var evt = document.createEvent(eventName);\n\n  for (var _len = arguments.length, opts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    opts[_key - 2] = arguments[_key];\n  }\n\n  evt.initEvent.apply(evt, [name].concat(opts));\n  elm.dispatchEvent(evt);\n  return elm;\n};\n\nvar isLeaf = function isLeaf(el) {\n  return !el.getAttribute(\"aria-owns\");\n};\n\nvar getSibling = function getSibling(el, distance, elClass) {\n  var parentNode = el.parentNode;\n  if (!parentNode) return null;\n  var siblings = parentNode.querySelectorAll(elClass);\n  var index = Array.prototype.indexOf.call(siblings, el);\n  return siblings[index + distance] || null;\n};\n\nvar focusNode = function focusNode(el) {\n  if (!el) return;\n  el.focus();\n  !isLeaf(el) && el.click();\n};\n\nvar Utils = {\n  IgnoreUtilFocusChanges: false,\n  focusFirstDescendant: function focusFirstDescendant(element) {\n    for (var i = 0; i < element.childNodes.length; i++) {\n      var child = element.childNodes[i];\n\n      if (attemptFocus(child) || this.focusFirstDescendant(child)) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  focusLastDescendant: function focusLastDescendant(element) {\n    for (var i = element.childNodes.length - 1; i >= 0; i--) {\n      var child = element.childNodes[i];\n\n      if (attemptFocus(child) || this.focusLastDescendant(child)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n};\nexport { EVENT_CODE, attemptFocus, Utils as default, focusNode, getSibling, isFocusable, isLeaf, isVisible, obtainAllFocusableElements, triggerEvent };","map":null,"metadata":{},"sourceType":"module"}