{"ast":null,"code":"import { defineComponent, inject, computed } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElRadio } from '../../radio/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Check, Loading, ArrowRight } from '@element-plus/icons';\nimport NodeContent from './node-content.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nvar script = defineComponent({\n  name: \"ElCascaderNode\",\n  components: {\n    ElCheckbox: ElCheckbox,\n    ElRadio: ElRadio,\n    NodeContent: NodeContent,\n    ElIcon: ElIcon,\n    Check: Check,\n    Loading: Loading,\n    ArrowRight: ArrowRight\n  },\n  props: {\n    node: {\n      type: Object,\n      required: true\n    },\n    menuId: String\n  },\n  emits: [\"expand\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    var isHoverMenu = computed(function () {\n      return panel.isHoverMenu;\n    });\n    var multiple = computed(function () {\n      return panel.config.multiple;\n    });\n    var checkStrictly = computed(function () {\n      return panel.config.checkStrictly;\n    });\n    var checkedNodeId = computed(function () {\n      var _a;\n\n      return (_a = panel.checkedNodes[0]) == null ? void 0 : _a.uid;\n    });\n    var isDisabled = computed(function () {\n      return props.node.isDisabled;\n    });\n    var isLeaf = computed(function () {\n      return props.node.isLeaf;\n    });\n    var expandable = computed(function () {\n      return checkStrictly.value && !isLeaf.value || !isDisabled.value;\n    });\n    var inExpandingPath = computed(function () {\n      return isInPath(panel.expandingNode);\n    });\n    var inCheckedPath = computed(function () {\n      return checkStrictly.value && panel.checkedNodes.some(isInPath);\n    });\n\n    var isInPath = function isInPath(node) {\n      var _a;\n\n      var _props$node = props.node,\n          level = _props$node.level,\n          uid = _props$node.uid;\n      return ((_a = node == null ? void 0 : node.pathNodes[level - 1]) == null ? void 0 : _a.uid) === uid;\n    };\n\n    var doExpand = function doExpand() {\n      if (inExpandingPath.value) return;\n      panel.expandNode(props.node);\n    };\n\n    var doCheck = function doCheck(checked) {\n      var node = props.node;\n      if (checked === node.checked) return;\n      panel.handleCheckChange(node, checked);\n    };\n\n    var doLoad = function doLoad() {\n      panel.lazyLoad(props.node, function () {\n        if (!isLeaf.value) doExpand();\n      });\n    };\n\n    var handleHoverExpand = function handleHoverExpand(e) {\n      if (!isHoverMenu.value) return;\n      handleExpand();\n      !isLeaf.value && emit(\"expand\", e);\n    };\n\n    var handleExpand = function handleExpand() {\n      var node = props.node;\n      if (!expandable.value || node.loading) return;\n      node.loaded ? doExpand() : doLoad();\n    };\n\n    var handleClick = function handleClick() {\n      if (isHoverMenu.value && !isLeaf.value) return;\n\n      if (isLeaf.value && !isDisabled.value && !checkStrictly.value && !multiple.value) {\n        handleCheck(true);\n      } else {\n        handleExpand();\n      }\n    };\n\n    var handleCheck = function handleCheck(checked) {\n      if (!props.node.loaded) {\n        doLoad();\n      } else {\n        doCheck(checked);\n        !checkStrictly.value && doExpand();\n      }\n    };\n\n    return {\n      panel: panel,\n      isHoverMenu: isHoverMenu,\n      multiple: multiple,\n      checkStrictly: checkStrictly,\n      checkedNodeId: checkedNodeId,\n      isDisabled: isDisabled,\n      isLeaf: isLeaf,\n      expandable: expandable,\n      inExpandingPath: inExpandingPath,\n      inCheckedPath: inCheckedPath,\n      handleHoverExpand: handleHoverExpand,\n      handleExpand: handleExpand,\n      handleClick: handleClick,\n      handleCheck: handleCheck\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}