{"ast":null,"code":"import { ref, computed, watch, nextTick, onMounted } from 'vue';\nimport { useTimeoutFn } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport isServer from '../../../utils/isServer.mjs';\nimport PopupManager from '../../../utils/popup-manager.mjs';\nimport { isNumber } from '../../../utils/util.mjs';\nimport useLockScreen from '../../../hooks/use-lockscreen/index.mjs';\nimport useModal from '../../../hooks/use-modal/index.mjs';\nimport useRestoreActive from '../../../hooks/use-restore-active/index.mjs';\n\nvar useDialog = function useDialog(props, _ref, targetRef) {\n  var emit = _ref.emit;\n  var visible = ref(false);\n  var closed = ref(false);\n  var rendered = ref(false);\n  var zIndex = ref(props.zIndex || PopupManager.nextZIndex());\n  var openTimer = void 0;\n  var closeTimer = void 0;\n  var normalizeWidth = computed(function () {\n    return isNumber(props.width) ? \"\".concat(props.width, \"px\") : props.width;\n  });\n  var style = computed(function () {\n    var style2 = {};\n    var varPrefix = \"--el-dialog\";\n\n    if (!props.fullscreen) {\n      if (props.top) {\n        style2[\"\".concat(varPrefix, \"-margin-top\")] = props.top;\n      }\n\n      if (props.width) {\n        style2[\"\".concat(varPrefix, \"-width\")] = normalizeWidth.value;\n      }\n    }\n\n    return style2;\n  });\n\n  function afterEnter() {\n    emit(\"opened\");\n  }\n\n  function afterLeave() {\n    emit(\"closed\");\n    emit(UPDATE_MODEL_EVENT, false);\n\n    if (props.destroyOnClose) {\n      rendered.value = false;\n    }\n  }\n\n  function beforeLeave() {\n    emit(\"close\");\n  }\n\n  function open() {\n    closeTimer == null ? void 0 : closeTimer();\n    openTimer == null ? void 0 : openTimer();\n\n    if (props.openDelay && props.openDelay > 0) {\n      ;\n\n      var _useTimeoutFn = useTimeoutFn(function () {\n        return doOpen();\n      }, props.openDelay);\n\n      openTimer = _useTimeoutFn.stop;\n    } else {\n      doOpen();\n    }\n  }\n\n  function close() {\n    openTimer == null ? void 0 : openTimer();\n    closeTimer == null ? void 0 : closeTimer();\n\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;\n\n      var _useTimeoutFn2 = useTimeoutFn(function () {\n        return doClose();\n      }, props.closeDelay);\n\n      closeTimer = _useTimeoutFn2.stop;\n    } else {\n      doClose();\n    }\n  }\n\n  function hide(shouldCancel) {\n    if (shouldCancel) return;\n    closed.value = true;\n    visible.value = false;\n  }\n\n  function handleClose() {\n    if (props.beforeClose) {\n      props.beforeClose(hide);\n    } else {\n      close();\n    }\n  }\n\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose();\n    }\n  }\n\n  function doOpen() {\n    if (isServer) {\n      return;\n    }\n\n    visible.value = true;\n  }\n\n  function doClose() {\n    visible.value = false;\n  }\n\n  if (props.lockScroll) {\n    useLockScreen(visible);\n  }\n\n  if (props.closeOnPressEscape) {\n    useModal({\n      handleClose: handleClose\n    }, visible);\n  }\n\n  useRestoreActive(visible);\n  watch(function () {\n    return props.modelValue;\n  }, function (val) {\n    if (val) {\n      closed.value = false;\n      open();\n      rendered.value = true;\n      emit(\"open\");\n      zIndex.value = props.zIndex ? zIndex.value++ : PopupManager.nextZIndex();\n      nextTick(function () {\n        if (targetRef.value) {\n          targetRef.value.scrollTop = 0;\n        }\n      });\n    } else {\n      if (visible.value) {\n        close();\n      }\n    }\n  });\n  onMounted(function () {\n    if (props.modelValue) {\n      visible.value = true;\n      rendered.value = true;\n      open();\n    }\n  });\n  return {\n    afterEnter: afterEnter,\n    afterLeave: afterLeave,\n    beforeLeave: beforeLeave,\n    handleClose: handleClose,\n    onModalClick: onModalClick,\n    closed: closed,\n    style: style,\n    rendered: rendered,\n    visible: visible,\n    zIndex: zIndex\n  };\n};\n\nexport { useDialog };","map":null,"metadata":{},"sourceType":"module"}