{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { defineComponent, ref, computed } from 'vue';\nimport dayjs from 'dayjs';\nimport { ElButton } from '../../button/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport './date-table.mjs';\nimport script$1 from './date-table.vue_vue&type=script&lang.mjs';\nimport { useLocaleInject } from '../../../hooks/use-locale/index.mjs';\nvar ElButtonGroup = ElButton.ButtonGroup;\nvar script = defineComponent({\n  name: \"ElCalendar\",\n  components: {\n    DateTable: script$1,\n    ElButton: ElButton,\n    ElButtonGroup: ElButtonGroup\n  },\n  props: {\n    modelValue: {\n      type: Date\n    },\n    range: {\n      type: Array,\n      validator: function validator(range) {\n        if (Array.isArray(range)) {\n          return range.length === 2 && range.every(function (item) {\n            return item instanceof Date;\n          });\n        }\n\n        return false;\n      }\n    }\n  },\n  emits: [\"input\", \"update:modelValue\"],\n  setup: function setup(props, ctx) {\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t,\n        lang = _useLocaleInject.lang;\n\n    var selectedDay = ref(null);\n    var now = dayjs().locale(lang.value);\n    var prevMonthDayjs = computed(function () {\n      return date.value.subtract(1, \"month\");\n    });\n    var curMonthDatePrefix = computed(function () {\n      return dayjs(date.value).locale(lang.value).format(\"YYYY-MM\");\n    });\n    var nextMonthDayjs = computed(function () {\n      return date.value.add(1, \"month\");\n    });\n    var prevYearDayjs = computed(function () {\n      return date.value.subtract(1, \"year\");\n    });\n    var nextYearDayjs = computed(function () {\n      return date.value.add(1, \"year\");\n    });\n    var i18nDate = computed(function () {\n      var pickedMonth = \"el.datepicker.month\".concat(date.value.format(\"M\"));\n      return \"\".concat(date.value.year(), \" \").concat(t(\"el.datepicker.year\"), \" \").concat(t(pickedMonth));\n    });\n    var realSelectedDay = computed({\n      get: function get() {\n        if (!props.modelValue) return selectedDay.value;\n        return date.value;\n      },\n      set: function set(val) {\n        selectedDay.value = val;\n        var result = val.toDate();\n        ctx.emit(\"input\", result);\n        ctx.emit(\"update:modelValue\", result);\n      }\n    });\n    var date = computed(function () {\n      if (!props.modelValue) {\n        if (realSelectedDay.value) {\n          return realSelectedDay.value;\n        } else if (validatedRange.value.length) {\n          return validatedRange.value[0][0];\n        }\n\n        return now;\n      } else {\n        return dayjs(props.modelValue).locale(lang.value);\n      }\n    });\n\n    var calculateValidatedDateRange = function calculateValidatedDateRange(startDayjs, endDayjs) {\n      var firstDay = startDayjs.startOf(\"week\");\n      var lastDay = endDayjs.endOf(\"week\");\n      var firstMonth = firstDay.get(\"month\");\n      var lastMonth = lastDay.get(\"month\");\n\n      if (firstMonth === lastMonth) {\n        return [[firstDay, lastDay]];\n      } else if (firstMonth + 1 === lastMonth) {\n        var firstMonthLastDay = firstDay.endOf(\"month\");\n        var lastMonthFirstDay = lastDay.startOf(\"month\");\n        var isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, \"week\");\n        var lastMonthStartDay = isSameWeek ? lastMonthFirstDay.add(1, \"week\") : lastMonthFirstDay;\n        return [[firstDay, firstMonthLastDay], [lastMonthStartDay.startOf(\"week\"), lastDay]];\n      } else if (firstMonth + 2 === lastMonth) {\n        var _firstMonthLastDay = firstDay.endOf(\"month\");\n\n        var secondMonthFirstDay = firstDay.add(1, \"month\").startOf(\"month\");\n        var secondMonthStartDay = _firstMonthLastDay.isSame(secondMonthFirstDay, \"week\") ? secondMonthFirstDay.add(1, \"week\") : secondMonthFirstDay;\n        var secondMonthLastDay = secondMonthStartDay.endOf(\"month\");\n\n        var _lastMonthFirstDay = lastDay.startOf(\"month\");\n\n        var _lastMonthStartDay = secondMonthLastDay.isSame(_lastMonthFirstDay, \"week\") ? _lastMonthFirstDay.add(1, \"week\") : _lastMonthFirstDay;\n\n        return [[firstDay, _firstMonthLastDay], [secondMonthStartDay.startOf(\"week\"), secondMonthLastDay], [_lastMonthStartDay.startOf(\"week\"), lastDay]];\n      } else {\n        debugWarn(\"ElCalendar\", \"start time and end time interval must not exceed two months\");\n        return [];\n      }\n    };\n\n    var validatedRange = computed(function () {\n      if (!props.range) return [];\n      var rangeArrDayjs = props.range.map(function (_) {\n        return dayjs(_).locale(lang.value);\n      });\n\n      var _rangeArrDayjs = _slicedToArray(rangeArrDayjs, 2),\n          startDayjs = _rangeArrDayjs[0],\n          endDayjs = _rangeArrDayjs[1];\n\n      if (startDayjs.isAfter(endDayjs)) {\n        debugWarn(\"ElCalendar\", \"end time should be greater than start time\");\n        return [];\n      }\n\n      if (startDayjs.isSame(endDayjs, \"month\")) {\n        return calculateValidatedDateRange(startDayjs, endDayjs);\n      } else {\n        if (startDayjs.add(1, \"month\").month() !== endDayjs.month()) {\n          debugWarn(\"ElCalendar\", \"start time and end time interval must not exceed two months\");\n          return [];\n        }\n\n        return calculateValidatedDateRange(startDayjs, endDayjs);\n      }\n    });\n\n    var pickDay = function pickDay(day) {\n      realSelectedDay.value = day;\n    };\n\n    var selectDate = function selectDate(type) {\n      var day;\n\n      if (type === \"prev-month\") {\n        day = prevMonthDayjs.value;\n      } else if (type === \"next-month\") {\n        day = nextMonthDayjs.value;\n      } else if (type === \"prev-year\") {\n        day = prevYearDayjs.value;\n      } else if (type === \"next-year\") {\n        day = nextYearDayjs.value;\n      } else {\n        day = now;\n      }\n\n      if (day.isSame(date.value, \"day\")) return;\n      pickDay(day);\n    };\n\n    return {\n      selectedDay: selectedDay,\n      curMonthDatePrefix: curMonthDatePrefix,\n      i18nDate: i18nDate,\n      realSelectedDay: realSelectedDay,\n      date: date,\n      validatedRange: validatedRange,\n      pickDay: pickDay,\n      selectDate: selectDate,\n      t: t\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}