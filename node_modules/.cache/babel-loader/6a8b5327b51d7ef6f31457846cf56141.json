{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getCurrentInstance, computed, h } from 'vue';\nimport { getRowIdentity } from '../util.mjs';\nimport useEvents from './events-helper.mjs';\nimport useStyles from './styles-helper.mjs';\n\nfunction useRender(props) {\n  var instance = getCurrentInstance();\n  var parent = instance.parent;\n\n  var _useEvents = useEvents(props),\n      handleDoubleClick = _useEvents.handleDoubleClick,\n      handleClick = _useEvents.handleClick,\n      handleContextMenu = _useEvents.handleContextMenu,\n      handleMouseEnter = _useEvents.handleMouseEnter,\n      handleMouseLeave = _useEvents.handleMouseLeave,\n      handleCellMouseEnter = _useEvents.handleCellMouseEnter,\n      handleCellMouseLeave = _useEvents.handleCellMouseLeave,\n      tooltipContent = _useEvents.tooltipContent,\n      tooltipTrigger = _useEvents.tooltipTrigger;\n\n  var _useStyles = useStyles(props),\n      getRowStyle = _useStyles.getRowStyle,\n      getRowClass = _useStyles.getRowClass,\n      getCellStyle = _useStyles.getCellStyle,\n      getCellClass = _useStyles.getCellClass,\n      getSpan = _useStyles.getSpan,\n      getColspanRealWidth = _useStyles.getColspanRealWidth;\n\n  var firstDefaultColumnIndex = computed(function () {\n    return props.store.states.columns.value.findIndex(function (_ref) {\n      var type = _ref.type;\n      return type === \"default\";\n    });\n  });\n\n  var getKeyOfRow = function getKeyOfRow(row, index) {\n    var rowKey = parent.props.rowKey;\n\n    if (rowKey) {\n      return getRowIdentity(row, rowKey);\n    }\n\n    return index;\n  };\n\n  var rowRender = function rowRender(row, $index, treeRowData) {\n    var tooltipEffect = props.tooltipEffect,\n        store = props.store;\n    var _store$states = store.states,\n        indent = _store$states.indent,\n        columns = _store$states.columns;\n    var rowClasses = getRowClass(row, $index);\n    var display = true;\n\n    if (treeRowData) {\n      rowClasses.push(\"el-table__row--level-\".concat(treeRowData.level));\n      display = treeRowData.display;\n    }\n\n    var displayStyle = display ? null : {\n      display: \"none\"\n    };\n    return h(\"tr\", {\n      style: [displayStyle, getRowStyle(row, $index)],\n      \"class\": rowClasses,\n      key: getKeyOfRow(row, $index),\n      onDblclick: function onDblclick($event) {\n        return handleDoubleClick($event, row);\n      },\n      onClick: function onClick($event) {\n        return handleClick($event, row);\n      },\n      onContextmenu: function onContextmenu($event) {\n        return handleContextMenu($event, row);\n      },\n      onMouseenter: function onMouseenter() {\n        return handleMouseEnter($index);\n      },\n      onMouseleave: handleMouseLeave\n    }, columns.value.map(function (column, cellIndex) {\n      var _getSpan = getSpan(row, column, $index, cellIndex),\n          rowspan = _getSpan.rowspan,\n          colspan = _getSpan.colspan;\n\n      if (!rowspan || !colspan) {\n        return null;\n      }\n\n      var columnData = _objectSpread({}, column);\n\n      columnData.realWidth = getColspanRealWidth(columns.value, colspan, cellIndex);\n      var data = {\n        store: props.store,\n        _self: props.context || parent,\n        column: columnData,\n        row: row,\n        $index: $index\n      };\n\n      if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n        data.treeNode = {\n          indent: treeRowData.level * indent.value,\n          level: treeRowData.level\n        };\n\n        if (typeof treeRowData.expanded === \"boolean\") {\n          data.treeNode.expanded = treeRowData.expanded;\n\n          if (\"loading\" in treeRowData) {\n            data.treeNode.loading = treeRowData.loading;\n          }\n\n          if (\"noLazyChildren\" in treeRowData) {\n            data.treeNode.noLazyChildren = treeRowData.noLazyChildren;\n          }\n        }\n      }\n\n      var baseKey = \"\".concat($index, \",\").concat(cellIndex);\n      var patchKey = columnData.columnKey || columnData.rawColumnKey || \"\";\n      var tdChildren = cellChildren(cellIndex, column, data);\n      return h(\"td\", {\n        style: getCellStyle($index, cellIndex, row, column),\n        \"class\": getCellClass($index, cellIndex, row, column),\n        key: \"\".concat(patchKey).concat(baseKey),\n        rowspan: rowspan,\n        colspan: colspan,\n        onMouseenter: function onMouseenter($event) {\n          return handleCellMouseEnter($event, _objectSpread(_objectSpread({}, row), {}, {\n            tooltipEffect: tooltipEffect\n          }));\n        },\n        onMouseleave: handleCellMouseLeave\n      }, [tdChildren]);\n    }));\n  };\n\n  var cellChildren = function cellChildren(cellIndex, column, data) {\n    return column.renderCell(data);\n  };\n\n  var wrappedRowRender = function wrappedRowRender(row, $index) {\n    var store = props.store;\n    var isRowExpanded = store.isRowExpanded,\n        assertRowKey = store.assertRowKey;\n    var _store$states2 = store.states,\n        treeData = _store$states2.treeData,\n        lazyTreeNodeMap = _store$states2.lazyTreeNodeMap,\n        childrenColumnName = _store$states2.childrenColumnName,\n        rowKey = _store$states2.rowKey;\n    var hasExpandColumn = store.states.columns.value.some(function (_ref2) {\n      var type = _ref2.type;\n      return type === \"expand\";\n    });\n\n    if (hasExpandColumn && isRowExpanded(row)) {\n      var renderExpanded = parent.renderExpanded;\n      var tr = rowRender(row, $index, void 0);\n\n      if (!renderExpanded) {\n        console.error(\"[Element Error]renderExpanded is required.\");\n        return tr;\n      }\n\n      return [[tr, h(\"tr\", {\n        key: \"expanded-row__\".concat(tr.key)\n      }, [h(\"td\", {\n        colspan: store.states.columns.value.length,\n        \"class\": \"el-table__cell el-table__expanded-cell\"\n      }, [renderExpanded({\n        row: row,\n        $index: $index,\n        store: store\n      })])])]];\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey();\n      var key = getRowIdentity(row, rowKey.value);\n      var cur = treeData.value[key];\n      var treeRowData = null;\n\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true\n        };\n\n        if (typeof cur.lazy === \"boolean\") {\n          if (typeof cur.loaded === \"boolean\" && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length);\n          }\n\n          treeRowData.loading = cur.loading;\n        }\n      }\n\n      var tmp = [rowRender(row, $index, treeRowData)];\n\n      if (cur) {\n        var i = 0;\n\n        var traverse = function traverse(children, parent2) {\n          if (!(children && children.length && parent2)) return;\n          children.forEach(function (node) {\n            var innerTreeRowData = {\n              display: parent2.display && parent2.expanded,\n              level: parent2.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false\n            };\n            var childKey = getRowIdentity(node, rowKey.value);\n\n            if (childKey === void 0 || childKey === null) {\n              throw new Error(\"For nested data item, row-key is required.\");\n            }\n\n            cur = _objectSpread({}, treeData.value[childKey]);\n\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded;\n              cur.level = cur.level || innerTreeRowData.level;\n              cur.display = !!(cur.expanded && innerTreeRowData.display);\n\n              if (typeof cur.lazy === \"boolean\") {\n                if (typeof cur.loaded === \"boolean\" && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);\n                }\n\n                innerTreeRowData.loading = cur.loading;\n              }\n            }\n\n            i++;\n            tmp.push(rowRender(node, $index + i, innerTreeRowData));\n\n            if (cur) {\n              var nodes2 = lazyTreeNodeMap.value[childKey] || node[childrenColumnName.value];\n              traverse(nodes2, cur);\n            }\n          });\n        };\n\n        cur.display = true;\n        var nodes = lazyTreeNodeMap.value[key] || row[childrenColumnName.value];\n        traverse(nodes, cur);\n      }\n\n      return tmp;\n    } else {\n      return rowRender(row, $index, void 0);\n    }\n  };\n\n  return {\n    wrappedRowRender: wrappedRowRender,\n    tooltipContent: tooltipContent,\n    tooltipTrigger: tooltipTrigger\n  };\n}\n\nexport { useRender as default };","map":null,"metadata":{},"sourceType":"module"}