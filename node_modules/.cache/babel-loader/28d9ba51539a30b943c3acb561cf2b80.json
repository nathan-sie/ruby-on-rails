{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { getCurrentInstance } from 'vue';\n\nfunction useStyles(props) {\n  var instance = getCurrentInstance();\n  var parent = instance.parent;\n\n  var isColumnHidden = function isColumnHidden(index) {\n    if (props.fixed === \"left\") {\n      return index >= props.store.states.fixedLeafColumnsLength.value;\n    } else if (props.fixed === \"right\") {\n      return index < props.store.states.columns.value.length - props.store.states.rightFixedLeafColumnsLength.value;\n    } else {\n      return index < props.store.states.fixedLeafColumnsLength.value || index >= props.store.states.columns.value.length - props.store.states.rightFixedLeafColumnsLength.value;\n    }\n  };\n\n  var getRowStyle = function getRowStyle(row, rowIndex) {\n    var rowStyle = parent.props.rowStyle;\n\n    if (typeof rowStyle === \"function\") {\n      return rowStyle.call(null, {\n        row: row,\n        rowIndex: rowIndex\n      });\n    }\n\n    return rowStyle || null;\n  };\n\n  var getRowClass = function getRowClass(row, rowIndex) {\n    var classes = [\"el-table__row\"];\n\n    if (parent.props.highlightCurrentRow && row === props.store.states.currentRow.value) {\n      classes.push(\"current-row\");\n    }\n\n    if (props.stripe && rowIndex % 2 === 1) {\n      classes.push(\"el-table__row--striped\");\n    }\n\n    var rowClassName = parent.props.rowClassName;\n\n    if (typeof rowClassName === \"string\") {\n      classes.push(rowClassName);\n    } else if (typeof rowClassName === \"function\") {\n      classes.push(rowClassName.call(null, {\n        row: row,\n        rowIndex: rowIndex\n      }));\n    }\n\n    if (props.store.states.expandRows.value.indexOf(row) > -1) {\n      classes.push(\"expanded\");\n    }\n\n    return classes;\n  };\n\n  var getCellStyle = function getCellStyle(rowIndex, columnIndex, row, column) {\n    var cellStyle = parent.props.cellStyle;\n\n    if (typeof cellStyle === \"function\") {\n      return cellStyle.call(null, {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        row: row,\n        column: column\n      });\n    }\n\n    return cellStyle;\n  };\n\n  var getCellClass = function getCellClass(rowIndex, columnIndex, row, column) {\n    var classes = [column.id, column.align, column.className];\n\n    if (isColumnHidden(columnIndex)) {\n      classes.push(\"is-hidden\");\n    }\n\n    var cellClassName = parent.props.cellClassName;\n\n    if (typeof cellClassName === \"string\") {\n      classes.push(cellClassName);\n    } else if (typeof cellClassName === \"function\") {\n      classes.push(cellClassName.call(null, {\n        rowIndex: rowIndex,\n        columnIndex: columnIndex,\n        row: row,\n        column: column\n      }));\n    }\n\n    classes.push(\"el-table__cell\");\n    return classes.join(\" \");\n  };\n\n  var getSpan = function getSpan(row, column, rowIndex, columnIndex) {\n    var rowspan = 1;\n    var colspan = 1;\n    var fn = parent.props.spanMethod;\n\n    if (typeof fn === \"function\") {\n      var result = fn({\n        row: row,\n        column: column,\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      });\n\n      if (Array.isArray(result)) {\n        rowspan = result[0];\n        colspan = result[1];\n      } else if (_typeof(result) === \"object\") {\n        rowspan = result.rowspan;\n        colspan = result.colspan;\n      }\n    }\n\n    return {\n      rowspan: rowspan,\n      colspan: colspan\n    };\n  };\n\n  var getColspanRealWidth = function getColspanRealWidth(columns, colspan, index) {\n    if (colspan < 1) {\n      return columns[index].realWidth;\n    }\n\n    var widthArr = columns.map(function (_ref) {\n      var realWidth = _ref.realWidth,\n          width = _ref.width;\n      return realWidth || width;\n    }).slice(index, index + colspan);\n    return Number(widthArr.reduce(function (acc, width) {\n      return Number(acc) + Number(width);\n    }, -1));\n  };\n\n  return {\n    getRowStyle: getRowStyle,\n    getRowClass: getRowClass,\n    getCellStyle: getCellStyle,\n    getCellClass: getCellClass,\n    getSpan: getSpan,\n    getColspanRealWidth: getColspanRealWidth,\n    isColumnHidden: isColumnHidden\n  };\n}\n\nexport { useStyles as default };","map":null,"metadata":{},"sourceType":"module"}