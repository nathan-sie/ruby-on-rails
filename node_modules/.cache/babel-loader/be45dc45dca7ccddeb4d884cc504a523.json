{"ast":null,"code":"import { getCurrentInstance, inject, computed, unref } from 'vue';\nimport '../../tokens/index.mjs';\nimport { buildProps } from '../../utils/props.mjs';\nimport { useGlobalConfig } from '../../utils/util.mjs';\nimport { elFormKey, elFormItemKey } from '../../tokens/form.mjs';\nvar sizes = [\"\", \"large\", \"medium\", \"small\", \"mini\"];\nvar useFormItemProps = buildProps({\n  size: {\n    type: String,\n    values: sizes,\n    \"default\": \"\"\n  },\n  disabled: Boolean\n});\n\nvar useFormItem = function useFormItem(_ref) {\n  var size = _ref.size,\n      disabled = _ref.disabled;\n\n  var _a;\n\n  var vm = getCurrentInstance();\n  var $ELEMENT = useGlobalConfig();\n  var props = (_a = vm.proxy) == null ? void 0 : _a.$props;\n  var form = inject(elFormKey, void 0);\n  var formItem = inject(elFormItemKey, void 0);\n  return {\n    size: computed(function () {\n      return props.size || unref(size) || (formItem == null ? void 0 : formItem.size) || (form == null ? void 0 : form.size) || $ELEMENT.size || \"\";\n    }),\n    disabled: computed(function () {\n      return props.disabled === true || unref(disabled) || (form == null ? void 0 : form.disabled) || false;\n    }),\n    form: form,\n    formItem: formItem\n  };\n};\n\nexport { useFormItem, useFormItemProps };","map":null,"metadata":{},"sourceType":"module"}