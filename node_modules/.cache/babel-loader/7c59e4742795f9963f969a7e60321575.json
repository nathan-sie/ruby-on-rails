{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar compilerDom = require('@vue/compiler-dom');\n\nvar runtimeDom = require('@vue/runtime-dom');\n\nvar shared = require('@vue/shared');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      n[k] = e[k];\n    });\n  }\n\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nvar runtimeDom__namespace = /*#__PURE__*/_interopNamespace(runtimeDom); // This entry is the \"full-build\" that includes both the runtime\n\n\nvar compileCache = Object.create(null);\n\nfunction compileToFunction(template, options) {\n  if (!shared.isString(template)) {\n    if (template.nodeType) {\n      template = template.innerHTML;\n    } else {\n      runtimeDom.warn(\"invalid template option: \", template);\n      return shared.NOOP;\n    }\n  }\n\n  var key = template;\n  var cached = compileCache[key];\n\n  if (cached) {\n    return cached;\n  }\n\n  if (template[0] === '#') {\n    var el = document.querySelector(template);\n\n    if (!el) {\n      runtimeDom.warn(\"Template element not found or is empty: \".concat(template));\n    } // __UNSAFE__\n    // Reason: potential execution of JS expressions in in-DOM template.\n    // The user must make sure the in-DOM template is trusted. If it's rendered\n    // by the server, the template should not contain any user data.\n\n\n    template = el ? el.innerHTML : \"\";\n  }\n\n  var _compilerDom$compile = compilerDom.compile(template, shared.extend({\n    hoistStatic: true,\n    onError: onError,\n    onWarn: function onWarn(e) {\n      return onError(e, true);\n    }\n  }, options)),\n      code = _compilerDom$compile.code;\n\n  function onError(err) {\n    var asWarning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var message = asWarning ? err.message : \"Template compilation error: \".concat(err.message);\n    var codeFrame = err.loc && shared.generateCodeFrame(template, err.loc.start.offset, err.loc.end.offset);\n    runtimeDom.warn(codeFrame ? \"\".concat(message, \"\\n\").concat(codeFrame) : message);\n  } // The wildcard import results in a huge object with every export\n  // with keys that cannot be mangled, and can be quite heavy size-wise.\n  // In the global build we know `Vue` is available globally so we can avoid\n  // the wildcard object.\n\n\n  var render = new Function('Vue', code)(runtimeDom__namespace);\n  render._rc = true;\n  return compileCache[key] = render;\n}\n\nruntimeDom.registerRuntimeCompiler(compileToFunction);\nObject.keys(runtimeDom).forEach(function (k) {\n  if (k !== 'default') exports[k] = runtimeDom[k];\n});\nexports.compile = compileToFunction;","map":null,"metadata":{},"sourceType":"module"}