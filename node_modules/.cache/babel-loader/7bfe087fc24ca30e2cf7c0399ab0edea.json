{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, computed } from 'vue';\nimport _Scrollbar from '../../scrollbar/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { generateId } from '../../../utils/util.mjs';\nimport './node2.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport script$1 from './node.vue_vue&type=script&lang.mjs';\nimport { useLocaleInject } from '../../../hooks/use-locale/index.mjs';\nvar script = defineComponent({\n  name: \"ElCascaderMenu\",\n  components: {\n    ElScrollbar: _Scrollbar,\n    ElCascaderNode: script$1\n  },\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t;\n\n    var id = generateId();\n    var activeNode = null;\n    var hoverTimer = null;\n    var panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    var hoverZone = ref(null);\n    var isEmpty = computed(function () {\n      return !props.nodes.length;\n    });\n    var menuId = computed(function () {\n      return \"cascader-menu-\".concat(id, \"-\").concat(props.index);\n    });\n\n    var handleExpand = function handleExpand(e) {\n      activeNode = e.target;\n    };\n\n    var handleMouseMove = function handleMouseMove(e) {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        var el = instance.vnode.el;\n\n        var _el$getBoundingClient = el.getBoundingClientRect(),\n            left = _el$getBoundingClient.left;\n\n        var offsetWidth = el.offsetWidth,\n            offsetHeight = el.offsetHeight;\n        var startX = e.clientX - left;\n        var top = activeNode.offsetTop;\n        var bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = \"\\n          <path style=\\\"pointer-events: auto;\\\" fill=\\\"transparent\\\" d=\\\"M\".concat(startX, \" \").concat(top, \" L\").concat(offsetWidth, \" 0 V\").concat(top, \" Z\\\" />\\n          <path style=\\\"pointer-events: auto;\\\" fill=\\\"transparent\\\" d=\\\"M\").concat(startX, \" \").concat(bottom, \" L\").concat(offsetWidth, \" \").concat(offsetHeight, \" V\").concat(bottom, \" Z\\\" />\\n        \");\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n\n    var clearHoverTimer = function clearHoverTimer() {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = null;\n    };\n\n    var clearHoverZone = function clearHoverZone() {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n\n    return {\n      panel: panel,\n      hoverZone: hoverZone,\n      isEmpty: isEmpty,\n      menuId: menuId,\n      t: t,\n      handleExpand: handleExpand,\n      handleMouseMove: handleMouseMove,\n      clearHoverZone: clearHoverZone\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}