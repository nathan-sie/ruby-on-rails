{"ast":null,"code":"import { defineComponent, inject, ref, reactive, computed, watch, nextTick, onMounted, provide } from 'vue';\nimport debounce from 'lodash/debounce';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport _Popper from '../../popper/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport { useGlobalConfig } from '../../../utils/util.mjs';\nimport { isValidComponentSize } from '../../../utils/validators.mjs';\nimport { Close, ArrowDown } from '@element-plus/icons';\nimport './components/alpha-slider.mjs';\nimport './components/hue-slider.mjs';\nimport './components/predefine.mjs';\nimport './components/sv-panel.mjs';\nimport Color from './color.mjs';\nimport { OPTIONS_KEY } from './useOption.mjs';\nimport script$1 from './components/sv-panel.vue_vue&type=script&lang.mjs';\nimport script$2 from './components/hue-slider.vue_vue&type=script&lang.mjs';\nimport script$3 from './components/alpha-slider.vue_vue&type=script&lang.mjs';\nimport script$4 from './components/predefine.vue_vue&type=script&lang.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { useLocaleInject } from '../../../hooks/use-locale/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nimport { Effect } from '../../popper/src/use-popper/defaults.mjs';\nvar script = defineComponent({\n  name: \"ElColorPicker\",\n  components: {\n    ElButton: ElButton,\n    ElPopper: _Popper,\n    ElInput: ElInput,\n    ElIcon: ElIcon,\n    Close: Close,\n    ArrowDown: ArrowDown,\n    SvPanel: script$1,\n    HueSlider: script$2,\n    AlphaSlider: script$3,\n    Predefine: script$4\n  },\n  directives: {\n    ClickOutside: ClickOutside\n  },\n  props: {\n    modelValue: String,\n    showAlpha: Boolean,\n    colorFormat: String,\n    disabled: Boolean,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    popperClass: String,\n    predefine: Array\n  },\n  emits: [\"change\", \"active-change\", UPDATE_MODEL_EVENT],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var ELEMENT = useGlobalConfig();\n\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t;\n\n    var elForm = inject(elFormKey, {});\n    var elFormItem = inject(elFormItemKey, {});\n    var hue = ref(null);\n    var svPanel = ref(null);\n    var alpha = ref(null);\n    var popper = ref(null);\n    var color = reactive(new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat\n    }));\n    var showPicker = ref(false);\n    var showPanelColor = ref(false);\n    var customInput = ref(\"\");\n    var displayedColor = computed(function () {\n      if (!props.modelValue && !showPanelColor.value) {\n        return \"transparent\";\n      }\n\n      return displayedRgb(color, props.showAlpha);\n    });\n    var colorSize = computed(function () {\n      return props.size || elFormItem.size || ELEMENT.size;\n    });\n    var colorDisabled = computed(function () {\n      return props.disabled || elForm.disabled;\n    });\n    var currentColor = computed(function () {\n      return !props.modelValue && !showPanelColor.value ? \"\" : color.value;\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function (newVal) {\n      if (!newVal) {\n        showPanelColor.value = false;\n      } else if (newVal && newVal !== color.value) {\n        color.fromString(newVal);\n      }\n    });\n    watch(function () {\n      return currentColor.value;\n    }, function (val) {\n      customInput.value = val;\n      emit(\"active-change\", val);\n    });\n    watch(function () {\n      return color.value;\n    }, function () {\n      if (!props.modelValue && !showPanelColor.value) {\n        showPanelColor.value = true;\n      }\n    });\n\n    function displayedRgb(color2, showAlpha) {\n      if (!(color2 instanceof Color)) {\n        throw Error(\"color should be instance of _color Class\");\n      }\n\n      var _color2$toRgb = color2.toRgb(),\n          r = _color2$toRgb.r,\n          g = _color2$toRgb.g,\n          b = _color2$toRgb.b;\n\n      return showAlpha ? \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(color2.get(\"alpha\") / 100, \")\") : \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n    }\n\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n\n    var debounceSetShowPicker = debounce(setShowPicker, 100);\n\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n\n    function resetColor() {\n      nextTick(function () {\n        if (props.modelValue) {\n          color.fromString(props.modelValue);\n        } else {\n          showPanelColor.value = false;\n        }\n      });\n    }\n\n    function handleTrigger() {\n      if (colorDisabled.value) return;\n      debounceSetShowPicker(!showPicker.value);\n    }\n\n    function handleConfirm() {\n      color.fromString(customInput.value);\n    }\n\n    function confirmValue() {\n      var _a;\n\n      var value = color.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"change\", value);\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n      debounceSetShowPicker(false);\n      nextTick(function () {\n        var newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat\n        });\n        newColor.fromString(props.modelValue);\n\n        if (!color.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n\n    function clear() {\n      var _a;\n\n      debounceSetShowPicker(false);\n      emit(UPDATE_MODEL_EVENT, null);\n      emit(\"change\", null);\n\n      if (props.modelValue !== null) {\n        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n      }\n\n      resetColor();\n    }\n\n    onMounted(function () {\n      if (props.modelValue) {\n        color.fromString(props.modelValue);\n        customInput.value = currentColor.value;\n      }\n    });\n    watch(function () {\n      return showPicker.value;\n    }, function () {\n      nextTick(function () {\n        var _a, _b, _c;\n\n        (_a = hue.value) == null ? void 0 : _a.update();\n        (_b = svPanel.value) == null ? void 0 : _b.update();\n        (_c = alpha.value) == null ? void 0 : _c.update();\n      });\n    });\n    provide(OPTIONS_KEY, {\n      currentColor: currentColor\n    });\n    return {\n      Effect: Effect,\n      color: color,\n      colorDisabled: colorDisabled,\n      colorSize: colorSize,\n      displayedColor: displayedColor,\n      showPanelColor: showPanelColor,\n      showPicker: showPicker,\n      customInput: customInput,\n      handleConfirm: handleConfirm,\n      hide: hide,\n      handleTrigger: handleTrigger,\n      clear: clear,\n      confirmValue: confirmValue,\n      t: t,\n      hue: hue,\n      svPanel: svPanel,\n      alpha: alpha,\n      popper: popper\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}