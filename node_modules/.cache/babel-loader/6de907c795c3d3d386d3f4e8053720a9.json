{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, ref, getCurrentInstance, provide, watch, nextTick, Fragment, onUpdated, onMounted, h } from 'vue';\nimport { isPromise } from '@vue/shared';\nimport { EVENT_CODE } from '../../../utils/aria.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Plus } from '@element-plus/icons';\nimport './tab-nav.mjs';\nimport script from './tab-nav.vue_vue&type=script&lang.mjs';\nvar Tabs = defineComponent({\n  name: \"ElTabs\",\n  components: {\n    TabNav: script\n  },\n  props: {\n    type: {\n      type: String,\n      \"default\": \"\"\n    },\n    activeName: {\n      type: String,\n      \"default\": \"\"\n    },\n    closable: Boolean,\n    addable: Boolean,\n    modelValue: {\n      type: String,\n      \"default\": \"\"\n    },\n    editable: Boolean,\n    tabPosition: {\n      type: String,\n      \"default\": \"top\"\n    },\n    beforeLeave: {\n      type: Function,\n      \"default\": null\n    },\n    stretch: Boolean\n  },\n  emits: [\"tab-click\", \"edit\", \"tab-remove\", \"tab-add\", \"input\", \"update:modelValue\"],\n  setup: function setup(props, ctx) {\n    var nav$ = ref(null);\n    var currentName = ref(props.modelValue || props.activeName || \"0\");\n    var panes = ref([]);\n    var instance = getCurrentInstance();\n    var paneStatesMap = {};\n    provide(\"rootTabs\", {\n      props: props,\n      currentName: currentName\n    });\n    provide(\"updatePaneState\", function (pane) {\n      paneStatesMap[pane.uid] = pane;\n    });\n    watch(function () {\n      return props.activeName;\n    }, function (modelValue) {\n      setCurrentName(modelValue);\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function (modelValue) {\n      setCurrentName(modelValue);\n    });\n    watch(currentName, function () {\n      nextTick(function () {\n        nav$.value && nav$.value.$nextTick(function () {\n          nav$.value && nav$.value.scrollToActiveTab();\n        });\n      });\n      setPaneInstances(true);\n    });\n\n    var getPaneInstanceFromSlot = function getPaneInstanceFromSlot(vnode) {\n      var paneInstanceList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      Array.from(vnode.children || []).forEach(function (node) {\n        var type = node.type;\n        type = type.name || type;\n\n        if (type === \"ElTabPane\" && node.component) {\n          paneInstanceList.push(node.component);\n        } else if (type === Fragment || type === \"template\") {\n          getPaneInstanceFromSlot(node, paneInstanceList);\n        }\n      });\n      return paneInstanceList;\n    };\n\n    var setPaneInstances = function setPaneInstances() {\n      var isForceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (ctx.slots[\"default\"]) {\n        var children = instance.subTree.children;\n        var content = Array.from(children).find(function (_ref) {\n          var props2 = _ref.props;\n          return props2[\"class\"] === \"el-tabs__content\";\n        });\n        if (!content) return;\n        var paneInstanceList = getPaneInstanceFromSlot(content).map(function (paneComponent) {\n          return paneStatesMap[paneComponent.uid];\n        });\n        var panesChanged = !(paneInstanceList.length === panes.value.length && paneInstanceList.every(function (pane, index) {\n          return pane.uid === panes.value[index].uid;\n        }));\n\n        if (isForceUpdate || panesChanged) {\n          panes.value = paneInstanceList;\n        }\n      } else if (panes.value.length !== 0) {\n        panes.value = [];\n      }\n    };\n\n    var changeCurrentName = function changeCurrentName(value) {\n      currentName.value = value;\n      ctx.emit(\"input\", value);\n      ctx.emit(\"update:modelValue\", value);\n    };\n\n    var setCurrentName = function setCurrentName(value) {\n      if (currentName.value === value) return;\n      var beforeLeave = props.beforeLeave;\n      var before = beforeLeave && beforeLeave(value, currentName.value);\n\n      if (before && isPromise(before)) {\n        before.then(function () {\n          var _a, _b;\n\n          changeCurrentName(value);\n          (_b = (_a = nav$.value).removeFocus) == null ? void 0 : _b.call(_a);\n        }, function () {});\n      } else if (before !== false) {\n        changeCurrentName(value);\n      }\n    };\n\n    var handleTabClick = function handleTabClick(tab, tabName, event) {\n      if (tab.props.disabled) return;\n      setCurrentName(tabName);\n      ctx.emit(\"tab-click\", tab, event);\n    };\n\n    var handleTabRemove = function handleTabRemove(pane, ev) {\n      if (pane.props.disabled) return;\n      ev.stopPropagation();\n      ctx.emit(\"edit\", pane.props.name, \"remove\");\n      ctx.emit(\"tab-remove\", pane.props.name);\n    };\n\n    var handleTabAdd = function handleTabAdd() {\n      ctx.emit(\"edit\", null, \"add\");\n      ctx.emit(\"tab-add\");\n    };\n\n    onUpdated(function () {\n      setPaneInstances();\n    });\n    onMounted(function () {\n      setPaneInstances();\n    });\n    return {\n      nav$: nav$,\n      handleTabClick: handleTabClick,\n      handleTabRemove: handleTabRemove,\n      handleTabAdd: handleTabAdd,\n      currentName: currentName,\n      panes: panes\n    };\n  },\n  render: function render() {\n    var _class;\n\n    var _a;\n\n    var type = this.type,\n        handleTabClick = this.handleTabClick,\n        handleTabRemove = this.handleTabRemove,\n        handleTabAdd = this.handleTabAdd,\n        currentName = this.currentName,\n        panes = this.panes,\n        editable = this.editable,\n        addable = this.addable,\n        tabPosition = this.tabPosition,\n        stretch = this.stretch;\n    var newButton = editable || addable ? h(\"span\", {\n      \"class\": \"el-tabs__new-tab\",\n      tabindex: \"0\",\n      onClick: handleTabAdd,\n      onKeydown: function onKeydown(ev) {\n        if (ev.code === EVENT_CODE.enter) {\n          handleTabAdd();\n        }\n      }\n    }, [h(ElIcon, {\n      \"class\": \"is-icon-plus\"\n    }, {\n      \"default\": function _default() {\n        return h(Plus);\n      }\n    })]) : null;\n    var header = h(\"div\", {\n      \"class\": [\"el-tabs__header\", \"is-\".concat(tabPosition)]\n    }, [newButton, h(script, {\n      currentName: currentName,\n      editable: editable,\n      type: type,\n      panes: panes,\n      stretch: stretch,\n      ref: \"nav$\",\n      onTabClick: handleTabClick,\n      onTabRemove: handleTabRemove\n    })]);\n    var panels = h(\"div\", {\n      \"class\": \"el-tabs__content\"\n    }, (_a = this.$slots) == null ? void 0 : _a[\"default\"]());\n    return h(\"div\", {\n      \"class\": (_class = {\n        \"el-tabs\": true,\n        \"el-tabs--card\": type === \"card\"\n      }, _defineProperty(_class, \"el-tabs--\".concat(tabPosition), true), _defineProperty(_class, \"el-tabs--border-card\", type === \"border-card\"), _class)\n    }, tabPosition !== \"bottom\" ? [header, panels] : [panels, header]);\n  }\n});\nexport { Tabs as default };","map":null,"metadata":{},"sourceType":"module"}