{"ast":null,"code":"import { getCurrentInstance, computed, watch } from 'vue';\nvar CHECKED_CHANGE_EVENT = \"checked-change\";\nvar useCheckProps = {\n  data: {\n    type: Array,\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  optionRender: Function,\n  placeholder: String,\n  title: String,\n  filterable: Boolean,\n  format: Object,\n  filterMethod: Function,\n  defaultChecked: Array,\n  props: Object\n};\n\nvar useCheck = function useCheck(props, panelState) {\n  var _getCurrentInstance = getCurrentInstance(),\n      emit = _getCurrentInstance.emit;\n\n  var labelProp = computed(function () {\n    return props.props.label || \"label\";\n  });\n  var keyProp = computed(function () {\n    return props.props.key || \"key\";\n  });\n  var disabledProp = computed(function () {\n    return props.props.disabled || \"disabled\";\n  });\n  var filteredData = computed(function () {\n    return props.data.filter(function (item) {\n      if (typeof props.filterMethod === \"function\") {\n        return props.filterMethod(panelState.query, item);\n      } else {\n        var label = item[labelProp.value] || item[keyProp.value].toString();\n        return label.toLowerCase().includes(panelState.query.toLowerCase());\n      }\n    });\n  });\n  var checkableData = computed(function () {\n    return filteredData.value.filter(function (item) {\n      return !item[disabledProp.value];\n    });\n  });\n  var checkedSummary = computed(function () {\n    var checkedLength = panelState.checked.length;\n    var dataLength = props.data.length;\n    var _props$format = props.format,\n        noChecked = _props$format.noChecked,\n        hasChecked = _props$format.hasChecked;\n\n    if (noChecked && hasChecked) {\n      return checkedLength > 0 ? hasChecked.replace(/\\${checked}/g, checkedLength.toString()).replace(/\\${total}/g, dataLength.toString()) : noChecked.replace(/\\${total}/g, dataLength.toString());\n    } else {\n      return \"\".concat(checkedLength, \"/\").concat(dataLength);\n    }\n  });\n  var isIndeterminate = computed(function () {\n    var checkedLength = panelState.checked.length;\n    return checkedLength > 0 && checkedLength < checkableData.value.length;\n  });\n\n  var updateAllChecked = function updateAllChecked() {\n    var checkableDataKeys = checkableData.value.map(function (item) {\n      return item[keyProp.value];\n    });\n    panelState.allChecked = checkableDataKeys.length > 0 && checkableDataKeys.every(function (item) {\n      return panelState.checked.includes(item);\n    });\n  };\n\n  var handleAllCheckedChange = function handleAllCheckedChange(value) {\n    panelState.checked = value ? checkableData.value.map(function (item) {\n      return item[keyProp.value];\n    }) : [];\n  };\n\n  watch(function () {\n    return panelState.checked;\n  }, function (val, oldVal) {\n    updateAllChecked();\n\n    if (panelState.checkChangeByUser) {\n      var movedKeys = val.concat(oldVal).filter(function (v) {\n        return !val.includes(v) || !oldVal.includes(v);\n      });\n      emit(CHECKED_CHANGE_EVENT, val, movedKeys);\n    } else {\n      emit(CHECKED_CHANGE_EVENT, val);\n      panelState.checkChangeByUser = true;\n    }\n  });\n  watch(checkableData, function () {\n    updateAllChecked();\n  });\n  watch(function () {\n    return props.data;\n  }, function () {\n    var checked = [];\n    var filteredDataKeys = filteredData.value.map(function (item) {\n      return item[keyProp.value];\n    });\n    panelState.checked.forEach(function (item) {\n      if (filteredDataKeys.includes(item)) {\n        checked.push(item);\n      }\n    });\n    panelState.checkChangeByUser = false;\n    panelState.checked = checked;\n  });\n  watch(function () {\n    return props.defaultChecked;\n  }, function (val, oldVal) {\n    if (oldVal && val.length === oldVal.length && val.every(function (item) {\n      return oldVal.includes(item);\n    })) return;\n    var checked = [];\n    var checkableDataKeys = checkableData.value.map(function (item) {\n      return item[keyProp.value];\n    });\n    val.forEach(function (item) {\n      if (checkableDataKeys.includes(item)) {\n        checked.push(item);\n      }\n    });\n    panelState.checkChangeByUser = false;\n    panelState.checked = checked;\n  }, {\n    immediate: true\n  });\n  return {\n    labelProp: labelProp,\n    keyProp: keyProp,\n    disabledProp: disabledProp,\n    filteredData: filteredData,\n    checkableData: checkableData,\n    checkedSummary: checkedSummary,\n    isIndeterminate: isIndeterminate,\n    updateAllChecked: updateAllChecked,\n    handleAllCheckedChange: handleAllCheckedChange\n  };\n};\n\nexport { CHECKED_CHANGE_EVENT, useCheck, useCheckProps };","map":null,"metadata":{},"sourceType":"module"}