{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getCurrentInstance, unref, nextTick } from 'vue';\nimport useWatcher from './watcher.mjs';\n\nfunction replaceColumn(array, column) {\n  return array.map(function (item) {\n    var _a;\n\n    if (item.id === column.id) {\n      return column;\n    } else if ((_a = item.children) == null ? void 0 : _a.length) {\n      item.children = replaceColumn(item.children, column);\n    }\n\n    return item;\n  });\n}\n\nfunction sortColumn(array) {\n  array.forEach(function (item) {\n    var _a, _b;\n\n    item.no = (_a = item.getColumnIndex) == null ? void 0 : _a.call(item);\n\n    if ((_b = item.children) == null ? void 0 : _b.length) {\n      sortColumn(item.children);\n    }\n  });\n  array.sort(function (cur, pre) {\n    return cur.no - pre.no;\n  });\n}\n\nfunction useStore() {\n  var instance = getCurrentInstance();\n  var watcher = useWatcher();\n  var mutations = {\n    setData: function setData(states, data) {\n      var dataInstanceChanged = unref(states.data) !== data;\n      states.data.value = data;\n      states._data.value = data;\n      instance.store.execQuery();\n      instance.store.updateCurrentRowData();\n      instance.store.updateExpandRows();\n      instance.store.updateTreeData(instance.store.states.defaultExpandAll.value);\n\n      if (unref(states.reserveSelection)) {\n        instance.store.assertRowKey();\n        instance.store.updateSelectionByRowKey();\n      } else {\n        if (dataInstanceChanged) {\n          instance.store.clearSelection();\n        } else {\n          instance.store.cleanSelection();\n        }\n      }\n\n      instance.store.updateAllSelected();\n\n      if (instance.$ready) {\n        instance.store.scheduleLayout();\n      }\n    },\n    insertColumn: function insertColumn(states, column, parent) {\n      var array = unref(states._columns);\n      var newColumns = [];\n\n      if (!parent) {\n        array.push(column);\n        newColumns = array;\n      } else {\n        if (parent && !parent.children) {\n          parent.children = [];\n        }\n\n        parent.children.push(column);\n        newColumns = replaceColumn(array, parent);\n      }\n\n      sortColumn(newColumns);\n      states._columns.value = newColumns;\n\n      if (column.type === \"selection\") {\n        states.selectable.value = column.selectable;\n        states.reserveSelection.value = column.reserveSelection;\n      }\n\n      if (instance.$ready) {\n        instance.store.updateColumns();\n        instance.store.scheduleLayout();\n      }\n    },\n    removeColumn: function removeColumn(states, column, parent) {\n      var array = unref(states._columns) || [];\n\n      if (parent) {\n        parent.children.splice(parent.children.findIndex(function (item) {\n          return item.id === column.id;\n        }), 1);\n\n        if (parent.children.length === 0) {\n          delete parent.children;\n        }\n\n        states._columns.value = replaceColumn(array, parent);\n      } else {\n        var index = array.indexOf(column);\n\n        if (index > -1) {\n          array.splice(index, 1);\n          states._columns.value = array;\n        }\n      }\n\n      if (instance.$ready) {\n        instance.store.updateColumns();\n        instance.store.scheduleLayout();\n      }\n    },\n    sort: function sort(states, options) {\n      var prop = options.prop,\n          order = options.order,\n          init = options.init;\n\n      if (prop) {\n        var column = unref(states.columns).find(function (column2) {\n          return column2.property === prop;\n        });\n\n        if (column) {\n          column.order = order;\n          instance.store.updateSort(column, prop, order);\n          instance.store.commit(\"changeSortCondition\", {\n            init: init\n          });\n        }\n      }\n    },\n    changeSortCondition: function changeSortCondition(states, options) {\n      var column = states.sortingColumn,\n          prop = states.sortProp,\n          order = states.sortOrder;\n\n      if (unref(order) === null) {\n        states.sortingColumn.value = null;\n        states.sortProp.value = null;\n      }\n\n      var ingore = {\n        filter: true\n      };\n      instance.store.execQuery(ingore);\n\n      if (!options || !(options.silent || options.init)) {\n        instance.emit(\"sort-change\", {\n          column: unref(column),\n          prop: unref(prop),\n          order: unref(order)\n        });\n      }\n\n      instance.store.updateTableScrollY();\n    },\n    filterChange: function filterChange(_states, options) {\n      var column = options.column,\n          values = options.values,\n          silent = options.silent;\n      var newFilters = instance.store.updateFilters(column, values);\n      instance.store.execQuery();\n\n      if (!silent) {\n        instance.emit(\"filter-change\", newFilters);\n      }\n\n      instance.store.updateTableScrollY();\n    },\n    toggleAllSelection: function toggleAllSelection() {\n      instance.store.toggleAllSelection();\n    },\n    rowSelectedChanged: function rowSelectedChanged(_states, row) {\n      instance.store.toggleRowSelection(row);\n      instance.store.updateAllSelected();\n    },\n    setHoverRow: function setHoverRow(states, row) {\n      states.hoverRow.value = row;\n    },\n    setCurrentRow: function setCurrentRow(_states, row) {\n      instance.store.updateCurrentRow(row);\n    }\n  };\n\n  var commit = function commit(name) {\n    var mutations2 = instance.store.mutations;\n\n    if (mutations2[name]) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      mutations2[name].apply(instance, [instance.store.states].concat(args));\n    } else {\n      throw new Error(\"Action not found: \".concat(name));\n    }\n  };\n\n  var updateTableScrollY = function updateTableScrollY() {\n    nextTick(function () {\n      return instance.layout.updateScrollY.apply(instance.layout);\n    });\n  };\n\n  return _objectSpread(_objectSpread({}, watcher), {}, {\n    mutations: mutations,\n    commit: commit,\n    updateTableScrollY: updateTableScrollY\n  });\n}\n\nvar HelperStore = function HelperStore() {\n  _classCallCheck(this, HelperStore);\n\n  this.Return = useStore();\n};\n\nexport { useStore as default };","map":null,"metadata":{},"sourceType":"module"}