{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { isFunction, capitalize } from '@vue/shared';\nimport { isEmpty, isUndefined } from '../../../utils/util.mjs';\nvar ExpandTrigger;\n\n(function (ExpandTrigger2) {\n  ExpandTrigger2[\"CLICK\"] = \"click\";\n  ExpandTrigger2[\"HOVER\"] = \"hover\";\n})(ExpandTrigger || (ExpandTrigger = {}));\n\nvar uid = 0;\n\nvar calculatePathNodes = function calculatePathNodes(node) {\n  var nodes = [node];\n  var parent = node.parent;\n\n  while (parent) {\n    nodes.unshift(parent);\n    parent = parent.parent;\n  }\n\n  return nodes;\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node(data, config, parent) {\n    var _this = this;\n\n    var root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    _classCallCheck(this, Node);\n\n    this.data = data;\n    this.config = config;\n    this.parent = parent;\n    this.root = root;\n    this.uid = uid++;\n    this.checked = false;\n    this.indeterminate = false;\n    this.loading = false;\n    var valueKey = config.value,\n        labelKey = config.label,\n        childrenKey = config.children;\n    var childrenData = data[childrenKey];\n    var pathNodes = calculatePathNodes(this);\n    this.level = root ? 0 : parent ? parent.level + 1 : 1;\n    this.value = data[valueKey];\n    this.label = data[labelKey];\n    this.pathNodes = pathNodes;\n    this.pathValues = pathNodes.map(function (node) {\n      return node.value;\n    });\n    this.pathLabels = pathNodes.map(function (node) {\n      return node.label;\n    });\n    this.childrenData = childrenData;\n    this.children = (childrenData || []).map(function (child) {\n      return new Node(child, config, _this);\n    });\n    this.loaded = !config.lazy || this.isLeaf || !isEmpty(childrenData);\n  }\n\n  _createClass(Node, [{\n    key: \"isDisabled\",\n    get: function get() {\n      var data = this.data,\n          parent = this.parent,\n          config = this.config;\n      var disabled = config.disabled,\n          checkStrictly = config.checkStrictly;\n      var isDisabled = isFunction(disabled) ? disabled(data, this) : !!data[disabled];\n      return isDisabled || !checkStrictly && (parent == null ? void 0 : parent.isDisabled);\n    }\n  }, {\n    key: \"isLeaf\",\n    get: function get() {\n      var data = this.data,\n          config = this.config,\n          childrenData = this.childrenData,\n          loaded = this.loaded;\n      var lazy = config.lazy,\n          leaf = config.leaf;\n      var isLeaf = isFunction(leaf) ? leaf(data, this) : data[leaf];\n      return isUndefined(isLeaf) ? lazy && !loaded ? false : !(Array.isArray(childrenData) && childrenData.length) : !!isLeaf;\n    }\n  }, {\n    key: \"valueByOption\",\n    get: function get() {\n      return this.config.emitPath ? this.pathValues : this.value;\n    }\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(childData) {\n      var childrenData = this.childrenData,\n          children = this.children;\n      var node = new Node(childData, this.config, this);\n\n      if (Array.isArray(childrenData)) {\n        childrenData.push(childData);\n      } else {\n        this.childrenData = [childData];\n      }\n\n      children.push(node);\n      return node;\n    }\n  }, {\n    key: \"calcText\",\n    value: function calcText(allLevels, separator) {\n      var text = allLevels ? this.pathLabels.join(separator) : this.label;\n      this.text = text;\n      return text;\n    }\n  }, {\n    key: \"broadcast\",\n    value: function broadcast(event) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var handlerName = \"onParent\".concat(capitalize(event));\n      this.children.forEach(function (child) {\n        if (child) {\n          child.broadcast.apply(child, [event].concat(args));\n          child[handlerName] && child[handlerName].apply(child, args);\n        }\n      });\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      var parent = this.parent;\n      var handlerName = \"onChild\".concat(capitalize(event));\n\n      if (parent) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        parent[handlerName] && parent[handlerName].apply(parent, args);\n        parent.emit.apply(parent, [event].concat(args));\n      }\n    }\n  }, {\n    key: \"onParentCheck\",\n    value: function onParentCheck(checked) {\n      if (!this.isDisabled) {\n        this.setCheckState(checked);\n      }\n    }\n  }, {\n    key: \"onChildCheck\",\n    value: function onChildCheck() {\n      var children = this.children;\n      var validChildren = children.filter(function (child) {\n        return !child.isDisabled;\n      });\n      var checked = validChildren.length ? validChildren.every(function (child) {\n        return child.checked;\n      }) : false;\n      this.setCheckState(checked);\n    }\n  }, {\n    key: \"setCheckState\",\n    value: function setCheckState(checked) {\n      var totalNum = this.children.length;\n      var checkedNum = this.children.reduce(function (c, p) {\n        var num = p.checked ? 1 : p.indeterminate ? 0.5 : 0;\n        return c + num;\n      }, 0);\n      this.checked = this.loaded && this.children.every(function (child) {\n        return child.loaded && child.checked;\n      }) && checked;\n      this.indeterminate = this.loaded && checkedNum !== totalNum && checkedNum > 0;\n    }\n  }, {\n    key: \"doCheck\",\n    value: function doCheck(checked) {\n      if (this.checked === checked) return;\n      var _this$config = this.config,\n          checkStrictly = _this$config.checkStrictly,\n          multiple = _this$config.multiple;\n\n      if (checkStrictly || !multiple) {\n        this.checked = checked;\n      } else {\n        this.broadcast(\"check\", checked);\n        this.setCheckState(checked);\n        this.emit(\"check\");\n      }\n    }\n  }]);\n\n  return Node;\n}();\n\nexport { ExpandTrigger, Node as default };","map":null,"metadata":{},"sourceType":"module"}