{"ast":null,"code":"import { defineComponent, reactive, ref, computed, watch, onMounted, nextTick, onBeforeUnmount, provide } from 'vue';\nimport throttle from 'lodash/throttle';\nimport { addResizeListener, removeResizeListener } from '../../../utils/resize-event.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowLeft, ArrowRight } from '@element-plus/icons';\nimport { debugWarn } from '../../../utils/error.mjs';\nvar script = defineComponent({\n  name: \"ElCarousel\",\n  components: {\n    ElIcon: ElIcon,\n    ArrowLeft: ArrowLeft,\n    ArrowRight: ArrowRight\n  },\n  props: {\n    initialIndex: {\n      type: Number,\n      \"default\": 0\n    },\n    height: {\n      type: String,\n      \"default\": \"\"\n    },\n    trigger: {\n      type: String,\n      \"default\": \"hover\"\n    },\n    autoplay: {\n      type: Boolean,\n      \"default\": true\n    },\n    interval: {\n      type: Number,\n      \"default\": 3e3\n    },\n    indicatorPosition: {\n      type: String,\n      \"default\": \"\"\n    },\n    indicator: {\n      type: Boolean,\n      \"default\": true\n    },\n    arrow: {\n      type: String,\n      \"default\": \"hover\"\n    },\n    type: {\n      type: String,\n      \"default\": \"\"\n    },\n    loop: {\n      type: Boolean,\n      \"default\": true\n    },\n    direction: {\n      type: String,\n      \"default\": \"horizontal\",\n      validator: function validator(val) {\n        return [\"horizontal\", \"vertical\"].includes(val);\n      }\n    },\n    pauseOnHover: {\n      type: Boolean,\n      \"default\": true\n    }\n  },\n  emits: [\"change\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var data = reactive({\n      activeIndex: -1,\n      containerWidth: 0,\n      timer: null,\n      hover: false\n    });\n    var root = ref(null);\n    var items = ref([]);\n    var arrowDisplay = computed(function () {\n      return props.arrow !== \"never\" && props.direction !== \"vertical\";\n    });\n    var hasLabel = computed(function () {\n      return items.value.some(function (item) {\n        return item.label.toString().length > 0;\n      });\n    });\n    var carouselClasses = computed(function () {\n      var classes = [\"el-carousel\", \"el-carousel--\".concat(props.direction)];\n\n      if (props.type === \"card\") {\n        classes.push(\"el-carousel--card\");\n      }\n\n      return classes;\n    });\n    var indicatorsClasses = computed(function () {\n      var classes = [\"el-carousel__indicators\", \"el-carousel__indicators--\".concat(props.direction)];\n\n      if (hasLabel.value) {\n        classes.push(\"el-carousel__indicators--labels\");\n      }\n\n      if (props.indicatorPosition === \"outside\" || props.type === \"card\") {\n        classes.push(\"el-carousel__indicators--outside\");\n      }\n\n      return classes;\n    });\n    var throttledArrowClick = throttle(function (index) {\n      setActiveItem(index);\n    }, 300, {\n      trailing: true\n    });\n    var throttledIndicatorHover = throttle(function (index) {\n      handleIndicatorHover(index);\n    }, 300);\n\n    function pauseTimer() {\n      if (data.timer) {\n        clearInterval(data.timer);\n        data.timer = null;\n      }\n    }\n\n    function startTimer() {\n      if (props.interval <= 0 || !props.autoplay || data.timer) return;\n      data.timer = setInterval(function () {\n        return playSlides();\n      }, props.interval);\n    }\n\n    var playSlides = function playSlides() {\n      if (data.activeIndex < items.value.length - 1) {\n        data.activeIndex = data.activeIndex + 1;\n      } else if (props.loop) {\n        data.activeIndex = 0;\n      }\n    };\n\n    function setActiveItem(index) {\n      if (typeof index === \"string\") {\n        var filteredItems = items.value.filter(function (item) {\n          return item.name === index;\n        });\n\n        if (filteredItems.length > 0) {\n          index = items.value.indexOf(filteredItems[0]);\n        }\n      }\n\n      index = Number(index);\n\n      if (isNaN(index) || index !== Math.floor(index)) {\n        debugWarn(\"Carousel\", \"index must be an integer.\");\n        return;\n      }\n\n      var length = items.value.length;\n      var oldIndex = data.activeIndex;\n\n      if (index < 0) {\n        data.activeIndex = props.loop ? length - 1 : 0;\n      } else if (index >= length) {\n        data.activeIndex = props.loop ? 0 : length - 1;\n      } else {\n        data.activeIndex = index;\n      }\n\n      if (oldIndex === data.activeIndex) {\n        resetItemPosition(oldIndex);\n      }\n    }\n\n    function resetItemPosition(oldIndex) {\n      items.value.forEach(function (item, index) {\n        item.translateItem(index, data.activeIndex, oldIndex);\n      });\n    }\n\n    function addItem(item) {\n      items.value.push(item);\n    }\n\n    function removeItem(uid) {\n      var index = items.value.findIndex(function (item) {\n        return item.uid === uid;\n      });\n\n      if (index !== -1) {\n        items.value.splice(index, 1);\n        if (data.activeIndex === index) next();\n      }\n    }\n\n    function itemInStage(item, index) {\n      var length = items.value.length;\n\n      if (index === length - 1 && item.inStage && items.value[0].active || item.inStage && items.value[index + 1] && items.value[index + 1].active) {\n        return \"left\";\n      } else if (index === 0 && item.inStage && items.value[length - 1].active || item.inStage && items.value[index - 1] && items.value[index - 1].active) {\n        return \"right\";\n      }\n\n      return false;\n    }\n\n    function handleMouseEnter() {\n      data.hover = true;\n\n      if (props.pauseOnHover) {\n        pauseTimer();\n      }\n    }\n\n    function handleMouseLeave() {\n      data.hover = false;\n      startTimer();\n    }\n\n    function handleButtonEnter(arrow) {\n      if (props.direction === \"vertical\") return;\n      items.value.forEach(function (item, index) {\n        if (arrow === itemInStage(item, index)) {\n          item.hover = true;\n        }\n      });\n    }\n\n    function handleButtonLeave() {\n      if (props.direction === \"vertical\") return;\n      items.value.forEach(function (item) {\n        item.hover = false;\n      });\n    }\n\n    function handleIndicatorClick(index) {\n      data.activeIndex = index;\n    }\n\n    function handleIndicatorHover(index) {\n      if (props.trigger === \"hover\" && index !== data.activeIndex) {\n        data.activeIndex = index;\n      }\n    }\n\n    function prev() {\n      setActiveItem(data.activeIndex - 1);\n    }\n\n    function next() {\n      setActiveItem(data.activeIndex + 1);\n    }\n\n    watch(function () {\n      return data.activeIndex;\n    }, function (current, prev2) {\n      resetItemPosition(prev2);\n\n      if (prev2 > -1) {\n        emit(\"change\", current, prev2);\n      }\n    });\n    watch(function () {\n      return props.autoplay;\n    }, function (current) {\n      current ? startTimer() : pauseTimer();\n    });\n    watch(function () {\n      return props.loop;\n    }, function () {\n      setActiveItem(data.activeIndex);\n    });\n    onMounted(function () {\n      nextTick(function () {\n        addResizeListener(root.value, resetItemPosition);\n\n        if (props.initialIndex < items.value.length && props.initialIndex >= 0) {\n          data.activeIndex = props.initialIndex;\n        }\n\n        startTimer();\n      });\n    });\n    onBeforeUnmount(function () {\n      if (root.value) removeResizeListener(root.value, resetItemPosition);\n      pauseTimer();\n    });\n    provide(\"injectCarouselScope\", {\n      root: root,\n      direction: props.direction,\n      type: props.type,\n      items: items,\n      loop: props.loop,\n      addItem: addItem,\n      removeItem: removeItem,\n      setActiveItem: setActiveItem\n    });\n    return {\n      data: data,\n      props: props,\n      items: items,\n      arrowDisplay: arrowDisplay,\n      carouselClasses: carouselClasses,\n      indicatorsClasses: indicatorsClasses,\n      hasLabel: hasLabel,\n      handleMouseEnter: handleMouseEnter,\n      handleMouseLeave: handleMouseLeave,\n      handleIndicatorClick: handleIndicatorClick,\n      throttledArrowClick: throttledArrowClick,\n      throttledIndicatorHover: throttledIndicatorHover,\n      handleButtonEnter: handleButtonEnter,\n      handleButtonLeave: handleButtonLeave,\n      prev: prev,\n      next: next,\n      setActiveItem: setActiveItem,\n      root: root\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}