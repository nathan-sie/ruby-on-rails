{"ast":null,"code":"import { defineComponent, computed } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleCheck, CircleClose, Check, Close, WarningFilled } from '@element-plus/icons';\nvar script = defineComponent({\n  name: \"ElProgress\",\n  components: {\n    ElIcon: ElIcon,\n    CircleCheck: CircleCheck,\n    CircleClose: CircleClose,\n    Check: Check,\n    Close: Close,\n    WarningFilled: WarningFilled\n  },\n  props: {\n    type: {\n      type: String,\n      \"default\": \"line\",\n      validator: function validator(val) {\n        return [\"line\", \"circle\", \"dashboard\"].indexOf(val) > -1;\n      }\n    },\n    percentage: {\n      type: Number,\n      \"default\": 0,\n      validator: function validator(val) {\n        return val >= 0 && val <= 100;\n      }\n    },\n    status: {\n      type: String,\n      \"default\": \"\",\n      validator: function validator(val) {\n        return [\"\", \"success\", \"exception\", \"warning\"].indexOf(val) > -1;\n      }\n    },\n    indeterminate: {\n      type: Boolean,\n      \"default\": false\n    },\n    duration: {\n      type: Number,\n      \"default\": 3\n    },\n    strokeWidth: {\n      type: Number,\n      \"default\": 6\n    },\n    strokeLinecap: {\n      type: String,\n      \"default\": \"round\"\n    },\n    textInside: {\n      type: Boolean,\n      \"default\": false\n    },\n    width: {\n      type: Number,\n      \"default\": 126\n    },\n    showText: {\n      type: Boolean,\n      \"default\": true\n    },\n    color: {\n      type: [String, Array, Function],\n      \"default\": \"\"\n    },\n    format: {\n      type: Function,\n      \"default\": function _default(percentage) {\n        return \"\".concat(percentage, \"%\");\n      }\n    }\n  },\n  setup: function setup(props) {\n    var barStyle = computed(function () {\n      return {\n        width: \"\".concat(props.percentage, \"%\"),\n        animationDuration: \"\".concat(props.duration, \"s\"),\n        backgroundColor: getCurrentColor(props.percentage)\n      };\n    });\n    var relativeStrokeWidth = computed(function () {\n      return (props.strokeWidth / props.width * 100).toFixed(1);\n    });\n    var radius = computed(function () {\n      if (props.type === \"circle\" || props.type === \"dashboard\") {\n        return parseInt(\"\".concat(50 - parseFloat(relativeStrokeWidth.value) / 2), 10);\n      } else {\n        return 0;\n      }\n    });\n    var trackPath = computed(function () {\n      var r = radius.value;\n      var isDashboard = props.type === \"dashboard\";\n      return \"\\n          M 50 50\\n          m 0 \".concat(isDashboard ? \"\" : \"-\").concat(r, \"\\n          a \").concat(r, \" \").concat(r, \" 0 1 1 0 \").concat(isDashboard ? \"-\" : \"\").concat(r * 2, \"\\n          a \").concat(r, \" \").concat(r, \" 0 1 1 0 \").concat(isDashboard ? \"\" : \"-\").concat(r * 2, \"\\n          \");\n    });\n    var perimeter = computed(function () {\n      return 2 * Math.PI * radius.value;\n    });\n    var rate = computed(function () {\n      return props.type === \"dashboard\" ? 0.75 : 1;\n    });\n    var strokeDashoffset = computed(function () {\n      var offset = -1 * perimeter.value * (1 - rate.value) / 2;\n      return \"\".concat(offset, \"px\");\n    });\n    var trailPathStyle = computed(function () {\n      return {\n        strokeDasharray: \"\".concat(perimeter.value * rate.value, \"px, \").concat(perimeter.value, \"px\"),\n        strokeDashoffset: strokeDashoffset.value\n      };\n    });\n    var circlePathStyle = computed(function () {\n      return {\n        strokeDasharray: \"\".concat(perimeter.value * rate.value * (props.percentage / 100), \"px, \").concat(perimeter.value, \"px\"),\n        strokeDashoffset: strokeDashoffset.value,\n        transition: \"stroke-dasharray 0.6s ease 0s, stroke 0.6s ease\"\n      };\n    });\n    var stroke = computed(function () {\n      var ret;\n\n      if (props.color) {\n        ret = getCurrentColor(props.percentage);\n      } else {\n        switch (props.status) {\n          case \"success\":\n            ret = \"#13ce66\";\n            break;\n\n          case \"exception\":\n            ret = \"#ff4949\";\n            break;\n\n          case \"warning\":\n            ret = \"#e6a23c\";\n            break;\n\n          default:\n            ret = \"#20a0ff\";\n        }\n      }\n\n      return ret;\n    });\n    var statusIcon = computed(function () {\n      if (props.status === \"warning\") {\n        return WarningFilled;\n      }\n\n      if (props.type === \"line\") {\n        return props.status === \"success\" ? CircleCheck : CircleClose;\n      } else {\n        return props.status === \"success\" ? Check : Close;\n      }\n    });\n    var progressTextSize = computed(function () {\n      return props.type === \"line\" ? 12 + props.strokeWidth * 0.4 : props.width * 0.111111 + 2;\n    });\n    var content = computed(function () {\n      return props.format(props.percentage);\n    });\n\n    var getCurrentColor = function getCurrentColor(percentage) {\n      var _a;\n\n      var color = props.color;\n\n      if (typeof color === \"function\") {\n        return color(percentage);\n      } else if (typeof color === \"string\") {\n        return color;\n      } else {\n        var span = 100 / color.length;\n        var seriesColors = color.map(function (seriesColor, index) {\n          if (typeof seriesColor === \"string\") {\n            return {\n              color: seriesColor,\n              percentage: (index + 1) * span\n            };\n          }\n\n          return seriesColor;\n        });\n        var colorArray = seriesColors.sort(function (a, b) {\n          return a.percentage - b.percentage;\n        });\n\n        for (var i = 0; i < colorArray.length; i++) {\n          if (colorArray[i].percentage > percentage) {\n            return colorArray[i].color;\n          }\n        }\n\n        return (_a = colorArray[colorArray.length - 1]) == null ? void 0 : _a.color;\n      }\n    };\n\n    var slotData = computed(function () {\n      return {\n        percentage: props.percentage\n      };\n    });\n    return {\n      barStyle: barStyle,\n      relativeStrokeWidth: relativeStrokeWidth,\n      radius: radius,\n      trackPath: trackPath,\n      perimeter: perimeter,\n      rate: rate,\n      strokeDashoffset: strokeDashoffset,\n      trailPathStyle: trailPathStyle,\n      circlePathStyle: circlePathStyle,\n      stroke: stroke,\n      statusIcon: statusIcon,\n      progressTextSize: progressTextSize,\n      content: content,\n      getCurrentColor: getCurrentColor,\n      slotData: slotData\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}