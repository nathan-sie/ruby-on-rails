{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, ref, computed, onMounted } from 'vue';\nimport { useTimeoutFn, useEventListener } from '@vueuse/core';\nimport { EVENT_CODE } from '../../../utils/aria.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/icon.mjs';\nimport { notificationProps, notificationEmits } from './notification.mjs';\nvar script = defineComponent({\n  name: \"ElNotification\",\n  components: _objectSpread({\n    ElIcon: ElIcon\n  }, TypeComponents),\n  props: notificationProps,\n  emits: notificationEmits,\n  setup: function setup(props) {\n    var visible = ref(false);\n    var timer = void 0;\n    var typeClass = computed(function () {\n      var type = props.type;\n      return type && TypeComponentsMap[props.type] ? \"el-notification--\".concat(type) : \"\";\n    });\n    var iconComponent = computed(function () {\n      return TypeComponentsMap[props.type] || props.icon || \"\";\n    });\n    var horizontalClass = computed(function () {\n      return props.position.endsWith(\"right\") ? \"right\" : \"left\";\n    });\n    var verticalProperty = computed(function () {\n      return props.position.startsWith(\"top\") ? \"top\" : \"bottom\";\n    });\n    var positionStyle = computed(function () {\n      var _ref;\n\n      return _ref = {}, _defineProperty(_ref, verticalProperty.value, \"\".concat(props.offset, \"px\")), _defineProperty(_ref, \"zIndex\", props.zIndex), _ref;\n    });\n\n    function startTimer() {\n      if (props.duration > 0) {\n        ;\n\n        var _useTimeoutFn = useTimeoutFn(function () {\n          if (visible.value) close();\n        }, props.duration);\n\n        timer = _useTimeoutFn.stop;\n      }\n    }\n\n    function clearTimer() {\n      timer == null ? void 0 : timer();\n    }\n\n    function close() {\n      visible.value = false;\n    }\n\n    function onKeydown(_ref2) {\n      var code = _ref2.code;\n\n      if (code === EVENT_CODE[\"delete\"] || code === EVENT_CODE.backspace) {\n        clearTimer();\n      } else if (code === EVENT_CODE.esc) {\n        if (visible.value) {\n          close();\n        }\n      } else {\n        startTimer();\n      }\n    }\n\n    onMounted(function () {\n      startTimer();\n      visible.value = true;\n    });\n    useEventListener(document, \"keydown\", onKeydown);\n    return {\n      horizontalClass: horizontalClass,\n      typeClass: typeClass,\n      iconComponent: iconComponent,\n      positionStyle: positionStyle,\n      visible: visible,\n      close: close,\n      clearTimer: clearTimer,\n      startTimer: startTimer\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}