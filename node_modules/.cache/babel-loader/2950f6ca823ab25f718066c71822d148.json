{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { warn } from 'vue';\nimport { isObject } from '@vue/shared';\nimport fromPairs from 'lodash/fromPairs';\nvar wrapperKey = Symbol();\nvar propKey = Symbol();\n\nfunction buildProp(option, key) {\n  if (!isObject(option) || !!option[propKey]) return option;\n  var values = option.values,\n      required = option.required,\n      defaultValue = option[\"default\"],\n      type = option.type,\n      validator = option.validator;\n\n  var _validator = values || validator ? function (val) {\n    var valid = false;\n    var allowedValues = [];\n\n    if (values) {\n      allowedValues = [].concat(_toConsumableArray(values), [defaultValue]);\n      valid || (valid = allowedValues.includes(val));\n    }\n\n    if (validator) valid || (valid = validator(val));\n\n    if (!valid && allowedValues.length > 0) {\n      var allowValuesText = _toConsumableArray(new Set(allowedValues)).map(function (value) {\n        return JSON.stringify(value);\n      }).join(\", \");\n\n      warn(\"Invalid prop: validation failed\".concat(key ? \" for prop \\\"\".concat(key, \"\\\"\") : \"\", \". Expected one of [\").concat(allowValuesText, \"], got value \").concat(JSON.stringify(val), \".\"));\n    }\n\n    return valid;\n  } : void 0;\n\n  return _defineProperty({\n    type: _typeof(type) === \"object\" && Object.getOwnPropertySymbols(type).includes(wrapperKey) ? type[wrapperKey] : type,\n    required: !!required,\n    \"default\": defaultValue,\n    validator: _validator\n  }, propKey, true);\n}\n\nvar buildProps = function buildProps(props) {\n  return fromPairs(Object.entries(props).map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        option = _ref3[1];\n\n    return [key, buildProp(option, key)];\n  }));\n};\n\nvar definePropType = function definePropType(val) {\n  return _defineProperty({}, wrapperKey, val);\n};\n\nvar keyOf = function keyOf(arr) {\n  return Object.keys(arr);\n};\n\nvar mutable = function mutable(val) {\n  return val;\n};\n\nvar componentSize = [\"large\", \"medium\", \"small\", \"mini\"];\nexport { buildProp, buildProps, componentSize, definePropType, keyOf, mutable, propKey };","map":null,"metadata":{},"sourceType":"module"}