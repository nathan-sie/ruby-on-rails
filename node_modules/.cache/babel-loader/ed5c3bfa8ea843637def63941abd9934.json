{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ref, watch } from 'vue';\nimport { NOOP } from '@vue/shared';\nimport cloneDeep from 'lodash/cloneDeep';\n\nfunction getFile(rawFile, uploadFiles) {\n  return uploadFiles.find(function (file) {\n    return file.uid === rawFile.uid;\n  });\n}\n\nfunction genUid(seed) {\n  return Date.now() + seed;\n}\n\nvar useHandlers = function useHandlers(props) {\n  var uploadFiles = ref([]);\n  var uploadRef = ref(null);\n  var tempIndex = 1;\n\n  function abort(file) {\n    uploadRef.value.abort(file);\n  }\n\n  function clearFiles() {\n    var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [\"success\", \"fail\"];\n    uploadFiles.value = uploadFiles.value.filter(function (row) {\n      return status.indexOf(row.status) === -1;\n    });\n  }\n\n  function handleError(err, rawFile) {\n    var file = getFile(rawFile, uploadFiles.value);\n    file.status = \"fail\";\n    uploadFiles.value.splice(uploadFiles.value.indexOf(file), 1);\n    props.onError(err, file, uploadFiles.value);\n    props.onChange(file, uploadFiles.value);\n  }\n\n  function handleProgress(ev, rawFile) {\n    var file = getFile(rawFile, uploadFiles.value);\n    props.onProgress(ev, file, uploadFiles.value);\n    file.status = \"uploading\";\n    file.percentage = ev.percent || 0;\n  }\n\n  function handleSuccess(res, rawFile) {\n    var file = getFile(rawFile, uploadFiles.value);\n\n    if (file) {\n      file.status = \"success\";\n      file.response = res;\n      props.onSuccess(res, file, uploadFiles.value);\n      props.onChange(file, uploadFiles.value);\n    }\n  }\n\n  function handleStart(rawFile) {\n    var uid = genUid(tempIndex++);\n    rawFile.uid = uid;\n    var file = {\n      name: rawFile.name,\n      percentage: 0,\n      status: \"ready\",\n      size: rawFile.size,\n      raw: rawFile,\n      uid: uid\n    };\n\n    if (props.listType === \"picture-card\" || props.listType === \"picture\") {\n      try {\n        file.url = URL.createObjectURL(rawFile);\n      } catch (err) {\n        console.error(\"[Element Error][Upload]\", err);\n        props.onError(err, file, uploadFiles.value);\n      }\n    }\n\n    uploadFiles.value.push(file);\n    props.onChange(file, uploadFiles.value);\n  }\n\n  function handleRemove(file, raw) {\n    if (raw) {\n      file = getFile(raw, uploadFiles.value);\n    }\n\n    var revokeObjectURL = function revokeObjectURL() {\n      if (file.url && file.url.indexOf(\"blob:\") === 0) {\n        URL.revokeObjectURL(file.url);\n      }\n    };\n\n    var doRemove = function doRemove() {\n      abort(file);\n      var fileList = uploadFiles.value;\n      fileList.splice(fileList.indexOf(file), 1);\n      props.onRemove(file, fileList);\n      revokeObjectURL();\n    };\n\n    if (!props.beforeRemove) {\n      doRemove();\n    } else if (typeof props.beforeRemove === \"function\") {\n      var before = props.beforeRemove(file, uploadFiles.value);\n\n      if (before instanceof Promise) {\n        before.then(function () {\n          doRemove();\n        })[\"catch\"](NOOP);\n      } else if (before !== false) {\n        doRemove();\n      }\n    }\n  }\n\n  function submit() {\n    uploadFiles.value.filter(function (file) {\n      return file.status === \"ready\";\n    }).forEach(function (file) {\n      uploadRef.value.upload(file.raw);\n    });\n  }\n\n  watch(function () {\n    return props.listType;\n  }, function (val) {\n    if (val === \"picture-card\" || val === \"picture\") {\n      uploadFiles.value = uploadFiles.value.map(function (file) {\n        if (!file.url && file.raw) {\n          try {\n            file.url = URL.createObjectURL(file.raw);\n          } catch (err) {\n            props.onError(err, file, uploadFiles.value);\n          }\n        }\n\n        return file;\n      });\n    }\n  });\n  watch(function () {\n    return props.fileList;\n  }, function (fileList) {\n    uploadFiles.value = fileList.map(function (file) {\n      var cloneFile = cloneDeep(file);\n      return _objectSpread(_objectSpread({}, cloneFile), {}, {\n        uid: file.uid || genUid(tempIndex++),\n        status: file.status || \"success\"\n      });\n    });\n  }, {\n    immediate: true,\n    deep: true\n  });\n  return {\n    abort: abort,\n    clearFiles: clearFiles,\n    handleError: handleError,\n    handleProgress: handleProgress,\n    handleStart: handleStart,\n    handleSuccess: handleSuccess,\n    handleRemove: handleRemove,\n    submit: submit,\n    uploadFiles: uploadFiles,\n    uploadRef: uploadRef\n  };\n};\n\nexport { useHandlers as default };","map":null,"metadata":{},"sourceType":"module"}