{"ast":null,"code":"import { defineComponent, ref, computed, inject, watch } from 'vue';\nimport dayjs from 'dayjs';\nimport { ElButton } from '../../../button/index.mjs';\nimport '../../../../directives/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { ElInput } from '../../../input/index.mjs';\nimport '../../../time-picker/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport { isValidDatePickType } from '../../../../utils/validators.mjs';\nimport { DArrowLeft, ArrowLeft, DArrowRight, ArrowRight } from '@element-plus/icons';\nimport './basic-date-table.mjs';\nimport ClickOutside from '../../../../directives/click-outside/index.mjs';\nimport script$1 from '../../../time-picker/src/time-picker-com/panel-time-pick.vue_vue&type=script&lang.mjs';\nimport script$2 from './basic-date-table.vue_vue&type=script&lang.mjs';\nimport { useLocaleInject } from '../../../../hooks/use-locale/index.mjs';\nimport { extractTimeFormat, extractDateFormat } from '../../../time-picker/src/common/date-utils.mjs';\nvar script = defineComponent({\n  directives: {\n    clickoutside: ClickOutside\n  },\n  components: {\n    TimePickPanel: script$1,\n    DateTable: script$2,\n    ElInput: ElInput,\n    ElButton: ElButton,\n    ElIcon: ElIcon,\n    DArrowLeft: DArrowLeft,\n    ArrowLeft: ArrowLeft,\n    DArrowRight: DArrowRight,\n    ArrowRight: ArrowRight\n  },\n  props: {\n    unlinkPanels: Boolean,\n    parsedValue: {\n      type: Array\n    },\n    type: {\n      type: String,\n      required: true,\n      validator: isValidDatePickType\n    }\n  },\n  emits: [\"pick\", \"set-picker-option\", \"calendar-change\"],\n  setup: function setup(props, ctx) {\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t,\n        lang = _useLocaleInject.lang;\n\n    var leftDate = ref(dayjs().locale(lang.value));\n    var rightDate = ref(dayjs().locale(lang.value).add(1, \"month\"));\n    var minDate = ref(null);\n    var maxDate = ref(null);\n    var dateUserInput = ref({\n      min: null,\n      max: null\n    });\n    var timeUserInput = ref({\n      min: null,\n      max: null\n    });\n    var leftLabel = computed(function () {\n      return \"\".concat(leftDate.value.year(), \" \").concat(t(\"el.datepicker.year\"), \" \").concat(t(\"el.datepicker.month\".concat(leftDate.value.month() + 1)));\n    });\n    var rightLabel = computed(function () {\n      return \"\".concat(rightDate.value.year(), \" \").concat(t(\"el.datepicker.year\"), \" \").concat(t(\"el.datepicker.month\".concat(rightDate.value.month() + 1)));\n    });\n    var leftYear = computed(function () {\n      return leftDate.value.year();\n    });\n    var leftMonth = computed(function () {\n      return leftDate.value.month();\n    });\n    var rightYear = computed(function () {\n      return rightDate.value.year();\n    });\n    var rightMonth = computed(function () {\n      return rightDate.value.month();\n    });\n    var hasShortcuts = computed(function () {\n      return !!shortcuts.length;\n    });\n    var minVisibleDate = computed(function () {\n      if (dateUserInput.value.min !== null) return dateUserInput.value.min;\n      if (minDate.value) return minDate.value.format(dateFormat.value);\n      return \"\";\n    });\n    var maxVisibleDate = computed(function () {\n      if (dateUserInput.value.max !== null) return dateUserInput.value.max;\n      if (maxDate.value || minDate.value) return (maxDate.value || minDate.value).format(dateFormat.value);\n      return \"\";\n    });\n    var minVisibleTime = computed(function () {\n      if (timeUserInput.value.min !== null) return timeUserInput.value.min;\n      if (minDate.value) return minDate.value.format(timeFormat.value);\n      return \"\";\n    });\n    var maxVisibleTime = computed(function () {\n      if (timeUserInput.value.max !== null) return timeUserInput.value.max;\n      if (maxDate.value || minDate.value) return (maxDate.value || minDate.value).format(timeFormat.value);\n      return \"\";\n    });\n    var timeFormat = computed(function () {\n      return extractTimeFormat(format);\n    });\n    var dateFormat = computed(function () {\n      return extractDateFormat(format);\n    });\n\n    var leftPrevYear = function leftPrevYear() {\n      leftDate.value = leftDate.value.subtract(1, \"year\");\n\n      if (!props.unlinkPanels) {\n        rightDate.value = leftDate.value.add(1, \"month\");\n      }\n    };\n\n    var leftPrevMonth = function leftPrevMonth() {\n      leftDate.value = leftDate.value.subtract(1, \"month\");\n\n      if (!props.unlinkPanels) {\n        rightDate.value = leftDate.value.add(1, \"month\");\n      }\n    };\n\n    var rightNextYear = function rightNextYear() {\n      if (!props.unlinkPanels) {\n        leftDate.value = leftDate.value.add(1, \"year\");\n        rightDate.value = leftDate.value.add(1, \"month\");\n      } else {\n        rightDate.value = rightDate.value.add(1, \"year\");\n      }\n    };\n\n    var rightNextMonth = function rightNextMonth() {\n      if (!props.unlinkPanels) {\n        leftDate.value = leftDate.value.add(1, \"month\");\n        rightDate.value = leftDate.value.add(1, \"month\");\n      } else {\n        rightDate.value = rightDate.value.add(1, \"month\");\n      }\n    };\n\n    var leftNextYear = function leftNextYear() {\n      leftDate.value = leftDate.value.add(1, \"year\");\n    };\n\n    var leftNextMonth = function leftNextMonth() {\n      leftDate.value = leftDate.value.add(1, \"month\");\n    };\n\n    var rightPrevYear = function rightPrevYear() {\n      rightDate.value = rightDate.value.subtract(1, \"year\");\n    };\n\n    var rightPrevMonth = function rightPrevMonth() {\n      rightDate.value = rightDate.value.subtract(1, \"month\");\n    };\n\n    var enableMonthArrow = computed(function () {\n      var nextMonth = (leftMonth.value + 1) % 12;\n      var yearOffset = leftMonth.value + 1 >= 12 ? 1 : 0;\n      return props.unlinkPanels && new Date(leftYear.value + yearOffset, nextMonth) < new Date(rightYear.value, rightMonth.value);\n    });\n    var enableYearArrow = computed(function () {\n      return props.unlinkPanels && rightYear.value * 12 + rightMonth.value - (leftYear.value * 12 + leftMonth.value + 1) >= 12;\n    });\n\n    var isValidValue = function isValidValue(value) {\n      return Array.isArray(value) && value[0] && value[1] && value[0].valueOf() <= value[1].valueOf();\n    };\n\n    var rangeState = ref({\n      endDate: null,\n      selecting: false\n    });\n    var btnDisabled = computed(function () {\n      return !(minDate.value && maxDate.value && !rangeState.value.selecting && isValidValue([minDate.value, maxDate.value]));\n    });\n\n    var handleChangeRange = function handleChangeRange(val) {\n      rangeState.value = val;\n    };\n\n    var onSelect = function onSelect(selecting) {\n      rangeState.value.selecting = selecting;\n\n      if (!selecting) {\n        rangeState.value.endDate = null;\n      }\n    };\n\n    var showTime = computed(function () {\n      return props.type === \"datetime\" || props.type === \"datetimerange\";\n    });\n\n    var handleConfirm = function handleConfirm() {\n      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (isValidValue([minDate.value, maxDate.value])) {\n        ctx.emit(\"pick\", [minDate.value, maxDate.value], visible);\n      }\n    };\n\n    var formatEmit = function formatEmit(emitDayjs, index) {\n      if (!emitDayjs) return;\n\n      if (defaultTime) {\n        var defaultTimeD = dayjs(defaultTime[index] || defaultTime).locale(lang.value);\n        return defaultTimeD.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());\n      }\n\n      return emitDayjs;\n    };\n\n    var handleRangePick = function handleRangePick(val) {\n      var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var min_ = val.minDate;\n      var max_ = val.maxDate;\n      var minDate_ = formatEmit(min_, 0);\n      var maxDate_ = formatEmit(max_, 1);\n\n      if (maxDate.value === maxDate_ && minDate.value === minDate_) {\n        return;\n      }\n\n      ctx.emit(\"calendar-change\", [min_.toDate(), max_ && max_.toDate()]);\n      maxDate.value = maxDate_;\n      minDate.value = minDate_;\n      if (!close || showTime.value) return;\n      handleConfirm();\n    };\n\n    var handleShortcutClick = function handleShortcutClick(shortcut) {\n      var shortcutValues = typeof shortcut.value === \"function\" ? shortcut.value() : shortcut.value;\n\n      if (shortcutValues) {\n        ctx.emit(\"pick\", [dayjs(shortcutValues[0]).locale(lang.value), dayjs(shortcutValues[1]).locale(lang.value)]);\n        return;\n      }\n\n      if (shortcut.onClick) {\n        shortcut.onClick(ctx);\n      }\n    };\n\n    var minTimePickerVisible = ref(false);\n    var maxTimePickerVisible = ref(false);\n\n    var handleMinTimeClose = function handleMinTimeClose() {\n      minTimePickerVisible.value = false;\n    };\n\n    var handleMaxTimeClose = function handleMaxTimeClose() {\n      maxTimePickerVisible.value = false;\n    };\n\n    var handleDateInput = function handleDateInput(value, type) {\n      dateUserInput.value[type] = value;\n      var parsedValueD = dayjs(value, dateFormat.value).locale(lang.value);\n\n      if (parsedValueD.isValid()) {\n        if (disabledDate && disabledDate(parsedValueD.toDate())) {\n          return;\n        }\n\n        if (type === \"min\") {\n          leftDate.value = parsedValueD;\n          minDate.value = (minDate.value || leftDate.value).year(parsedValueD.year()).month(parsedValueD.month()).date(parsedValueD.date());\n\n          if (!props.unlinkPanels) {\n            rightDate.value = parsedValueD.add(1, \"month\");\n            maxDate.value = minDate.value.add(1, \"month\");\n          }\n        } else {\n          rightDate.value = parsedValueD;\n          maxDate.value = (maxDate.value || rightDate.value).year(parsedValueD.year()).month(parsedValueD.month()).date(parsedValueD.date());\n\n          if (!props.unlinkPanels) {\n            leftDate.value = parsedValueD.subtract(1, \"month\");\n            minDate.value = maxDate.value.subtract(1, \"month\");\n          }\n        }\n      }\n    };\n\n    var handleDateChange = function handleDateChange(_, type) {\n      dateUserInput.value[type] = null;\n    };\n\n    var handleTimeInput = function handleTimeInput(value, type) {\n      timeUserInput.value[type] = value;\n      var parsedValueD = dayjs(value, timeFormat.value).locale(lang.value);\n\n      if (parsedValueD.isValid()) {\n        if (type === \"min\") {\n          minTimePickerVisible.value = true;\n          minDate.value = (minDate.value || leftDate.value).hour(parsedValueD.hour()).minute(parsedValueD.minute()).second(parsedValueD.second());\n\n          if (!maxDate.value || maxDate.value.isBefore(minDate.value)) {\n            maxDate.value = minDate.value;\n          }\n        } else {\n          maxTimePickerVisible.value = true;\n          maxDate.value = (maxDate.value || rightDate.value).hour(parsedValueD.hour()).minute(parsedValueD.minute()).second(parsedValueD.second());\n          rightDate.value = maxDate.value;\n\n          if (maxDate.value && maxDate.value.isBefore(minDate.value)) {\n            minDate.value = maxDate.value;\n          }\n        }\n      }\n    };\n\n    var handleTimeChange = function handleTimeChange(value, type) {\n      timeUserInput.value[type] = null;\n\n      if (type === \"min\") {\n        leftDate.value = minDate.value;\n        minTimePickerVisible.value = false;\n      } else {\n        rightDate.value = maxDate.value;\n        maxTimePickerVisible.value = false;\n      }\n    };\n\n    var handleMinTimePick = function handleMinTimePick(value, visible, first) {\n      if (timeUserInput.value.min) return;\n\n      if (value) {\n        leftDate.value = value;\n        minDate.value = (minDate.value || leftDate.value).hour(value.hour()).minute(value.minute()).second(value.second());\n      }\n\n      if (!first) {\n        minTimePickerVisible.value = visible;\n      }\n\n      if (!maxDate.value || maxDate.value.isBefore(minDate.value)) {\n        maxDate.value = minDate.value;\n        rightDate.value = value;\n      }\n    };\n\n    var handleMaxTimePick = function handleMaxTimePick(value, visible, first) {\n      if (timeUserInput.value.max) return;\n\n      if (value) {\n        rightDate.value = value;\n        maxDate.value = (maxDate.value || rightDate.value).hour(value.hour()).minute(value.minute()).second(value.second());\n      }\n\n      if (!first) {\n        maxTimePickerVisible.value = visible;\n      }\n\n      if (maxDate.value && maxDate.value.isBefore(minDate.value)) {\n        minDate.value = maxDate.value;\n      }\n    };\n\n    var handleClear = function handleClear() {\n      leftDate.value = getDefaultValue()[0];\n      rightDate.value = leftDate.value.add(1, \"month\");\n      ctx.emit(\"pick\", null);\n    };\n\n    var formatToString = function formatToString(value) {\n      return Array.isArray(value) ? value.map(function (_) {\n        return _.format(format);\n      }) : value.format(format);\n    };\n\n    var parseUserInput = function parseUserInput(value) {\n      return Array.isArray(value) ? value.map(function (_) {\n        return dayjs(_, format).locale(lang.value);\n      }) : dayjs(value, format).locale(lang.value);\n    };\n\n    var getDefaultValue = function getDefaultValue() {\n      var start;\n\n      if (Array.isArray(defaultValue)) {\n        var left = dayjs(defaultValue[0]);\n        var right = dayjs(defaultValue[1]);\n\n        if (!props.unlinkPanels) {\n          right = left.add(1, \"month\");\n        }\n\n        return [left, right];\n      } else if (defaultValue) {\n        start = dayjs(defaultValue);\n      } else {\n        start = dayjs();\n      }\n\n      start = start.locale(lang.value);\n      return [start, start.add(1, \"month\")];\n    };\n\n    ctx.emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    ctx.emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    ctx.emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    ctx.emit(\"set-picker-option\", [\"handleClear\", handleClear]);\n    var pickerBase = inject(\"EP_PICKER_BASE\");\n    var _pickerBase$props = pickerBase.props,\n        shortcuts = _pickerBase$props.shortcuts,\n        disabledDate = _pickerBase$props.disabledDate,\n        cellClassName = _pickerBase$props.cellClassName,\n        format = _pickerBase$props.format,\n        defaultTime = _pickerBase$props.defaultTime,\n        defaultValue = _pickerBase$props.defaultValue,\n        arrowControl = _pickerBase$props.arrowControl,\n        clearable = _pickerBase$props.clearable;\n    watch(function () {\n      return props.parsedValue;\n    }, function (newVal) {\n      if (newVal && newVal.length === 2) {\n        minDate.value = newVal[0];\n        maxDate.value = newVal[1];\n        leftDate.value = minDate.value;\n\n        if (props.unlinkPanels && maxDate.value) {\n          var minDateYear = minDate.value.year();\n          var minDateMonth = minDate.value.month();\n          var maxDateYear = maxDate.value.year();\n          var maxDateMonth = maxDate.value.month();\n          rightDate.value = minDateYear === maxDateYear && minDateMonth === maxDateMonth ? maxDate.value.add(1, \"month\") : maxDate.value;\n        } else {\n          rightDate.value = leftDate.value.add(1, \"month\");\n\n          if (maxDate.value) {\n            rightDate.value = rightDate.value.hour(maxDate.value.hour()).minute(maxDate.value.minute()).second(maxDate.value.second());\n          }\n        }\n      } else {\n        var defaultArr = getDefaultValue();\n        minDate.value = null;\n        maxDate.value = null;\n        leftDate.value = defaultArr[0];\n        rightDate.value = defaultArr[1];\n      }\n    }, {\n      immediate: true\n    });\n    return {\n      shortcuts: shortcuts,\n      disabledDate: disabledDate,\n      cellClassName: cellClassName,\n      minTimePickerVisible: minTimePickerVisible,\n      maxTimePickerVisible: maxTimePickerVisible,\n      handleMinTimeClose: handleMinTimeClose,\n      handleMaxTimeClose: handleMaxTimeClose,\n      handleShortcutClick: handleShortcutClick,\n      rangeState: rangeState,\n      minDate: minDate,\n      maxDate: maxDate,\n      handleRangePick: handleRangePick,\n      onSelect: onSelect,\n      handleChangeRange: handleChangeRange,\n      btnDisabled: btnDisabled,\n      enableYearArrow: enableYearArrow,\n      enableMonthArrow: enableMonthArrow,\n      rightPrevMonth: rightPrevMonth,\n      rightPrevYear: rightPrevYear,\n      rightNextMonth: rightNextMonth,\n      rightNextYear: rightNextYear,\n      leftPrevMonth: leftPrevMonth,\n      leftPrevYear: leftPrevYear,\n      leftNextMonth: leftNextMonth,\n      leftNextYear: leftNextYear,\n      hasShortcuts: hasShortcuts,\n      leftLabel: leftLabel,\n      rightLabel: rightLabel,\n      leftDate: leftDate,\n      rightDate: rightDate,\n      showTime: showTime,\n      t: t,\n      minVisibleDate: minVisibleDate,\n      maxVisibleDate: maxVisibleDate,\n      minVisibleTime: minVisibleTime,\n      maxVisibleTime: maxVisibleTime,\n      arrowControl: arrowControl,\n      handleDateInput: handleDateInput,\n      handleDateChange: handleDateChange,\n      handleTimeInput: handleTimeInput,\n      handleTimeChange: handleTimeChange,\n      handleMinTimePick: handleMinTimePick,\n      handleMaxTimePick: handleMaxTimePick,\n      handleClear: handleClear,\n      handleConfirm: handleConfirm,\n      timeFormat: timeFormat,\n      clearable: clearable\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}