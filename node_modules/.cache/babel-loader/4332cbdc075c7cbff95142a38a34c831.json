{"ast":null,"code":"import { defineComponent, inject, ref } from 'vue';\nvar script = defineComponent({\n  name: \"ElUploadDrag\",\n  props: {\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  emits: [\"file\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var uploader = inject(\"uploader\", {});\n    var dragover = ref(false);\n\n    function onDrop(e) {\n      if (props.disabled || !uploader) return;\n      var accept = uploader.accept;\n      dragover.value = false;\n\n      if (!accept) {\n        emit(\"file\", e.dataTransfer.files);\n        return;\n      }\n\n      emit(\"file\", Array.from(e.dataTransfer.files).filter(function (file) {\n        var type = file.type,\n            name = file.name;\n        var extension = name.indexOf(\".\") > -1 ? \".\".concat(name.split(\".\").pop()) : \"\";\n        var baseType = type.replace(/\\/.*$/, \"\");\n        return accept.split(\",\").map(function (type2) {\n          return type2.trim();\n        }).filter(function (type2) {\n          return type2;\n        }).some(function (acceptedType) {\n          if (acceptedType.startsWith(\".\")) {\n            return extension === acceptedType;\n          }\n\n          if (/\\/\\*$/.test(acceptedType)) {\n            return baseType === acceptedType.replace(/\\/\\*$/, \"\");\n          }\n\n          if (/^[^/]+\\/[^/]+$/.test(acceptedType)) {\n            return type === acceptedType;\n          }\n\n          return false;\n        });\n      }));\n    }\n\n    function onDragover() {\n      if (!props.disabled) dragover.value = true;\n    }\n\n    return {\n      dragover: dragover,\n      onDrop: onDrop,\n      onDragover: onDragover\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}