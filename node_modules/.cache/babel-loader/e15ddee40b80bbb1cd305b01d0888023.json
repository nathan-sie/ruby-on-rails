{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, onMounted, onUpdated } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { isNumber } from '../../../utils/util.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { ArrowUp, ArrowDown, Plus, Minus } from '@element-plus/icons';\nimport { inputNumberProps, inputNumberEmits } from './input-number.mjs';\nimport RepeatClick from '../../../directives/repeat-click/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nvar script = defineComponent({\n  name: \"ElInputNumber\",\n  components: {\n    ElInput: ElInput,\n    ElIcon: ElIcon,\n    ArrowUp: ArrowUp,\n    ArrowDown: ArrowDown,\n    Plus: Plus,\n    Minus: Minus\n  },\n  directives: {\n    RepeatClick: RepeatClick\n  },\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var input = ref();\n    var data = reactive({\n      currentValue: props.modelValue,\n      userInput: null\n    });\n    var minDisabled = computed(function () {\n      return _decrease(props.modelValue) < props.min;\n    });\n    var maxDisabled = computed(function () {\n      return _increase(props.modelValue) > props.max;\n    });\n    var numPrecision = computed(function () {\n      var stepPrecision = getPrecision(props.step);\n\n      if (props.precision !== void 0) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\"InputNumber\", \"precision should not be less than the decimal places of step\");\n        }\n\n        return props.precision;\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision);\n      }\n    });\n    var controlsAtRight = computed(function () {\n      return props.controls && props.controlsPosition === \"right\";\n    });\n\n    var _useFormItem = useFormItem({}),\n        inputNumberSize = _useFormItem.size,\n        inputNumberDisabled = _useFormItem.disabled;\n\n    var displayValue = computed(function () {\n      if (data.userInput !== null) {\n        return data.userInput;\n      }\n\n      var currentValue = data.currentValue;\n\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return \"\";\n\n        if (props.precision !== void 0) {\n          currentValue = currentValue.toFixed(props.precision);\n        }\n      }\n\n      return currentValue;\n    });\n\n    var toPrecision = function toPrecision(num, pre) {\n      if (pre === void 0) pre = numPrecision.value;\n      return parseFloat(\"\".concat(Math.round(num * Math.pow(10, pre)) / Math.pow(10, pre)));\n    };\n\n    var getPrecision = function getPrecision(value) {\n      if (value === void 0) return 0;\n      var valueString = value.toString();\n      var dotPosition = valueString.indexOf(\".\");\n      var precision = 0;\n\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n\n      return precision;\n    };\n\n    var _increase = function _increase(val) {\n      if (!isNumber(val)) return data.currentValue;\n      var precisionFactor = Math.pow(10, numPrecision.value);\n      val = isNumber(val) ? val : NaN;\n      return toPrecision((precisionFactor * val + precisionFactor * props.step) / precisionFactor);\n    };\n\n    var _decrease = function _decrease(val) {\n      if (!isNumber(val)) return data.currentValue;\n      var precisionFactor = Math.pow(10, numPrecision.value);\n      val = isNumber(val) ? val : NaN;\n      return toPrecision((precisionFactor * val - precisionFactor * props.step) / precisionFactor);\n    };\n\n    var increase = function increase() {\n      if (inputNumberDisabled.value || maxDisabled.value) return;\n      var value = props.modelValue || 0;\n\n      var newVal = _increase(value);\n\n      setCurrentValue(newVal);\n    };\n\n    var decrease = function decrease() {\n      if (inputNumberDisabled.value || minDisabled.value) return;\n      var value = props.modelValue || 0;\n\n      var newVal = _decrease(value);\n\n      setCurrentValue(newVal);\n    };\n\n    var setCurrentValue = function setCurrentValue(newVal) {\n      var oldVal = data.currentValue;\n\n      if (typeof newVal === \"number\" && props.precision !== void 0) {\n        newVal = toPrecision(newVal, props.precision);\n      }\n\n      if (newVal !== void 0 && newVal >= props.max) newVal = props.max;\n      if (newVal !== void 0 && newVal <= props.min) newVal = props.min;\n      if (oldVal === newVal) return;\n\n      if (!isNumber(newVal)) {\n        newVal = NaN;\n      }\n\n      data.userInput = null;\n      emit(\"update:modelValue\", newVal);\n      emit(\"input\", newVal);\n      emit(\"change\", newVal, oldVal);\n      data.currentValue = newVal;\n    };\n\n    var handleInput = function handleInput(value) {\n      return data.userInput = value;\n    };\n\n    var handleInputChange = function handleInputChange(value) {\n      var newVal = Number(value);\n\n      if (isNumber(newVal) && !Number.isNaN(newVal) || value === \"\") {\n        setCurrentValue(newVal);\n      }\n\n      data.userInput = null;\n    };\n\n    var focus = function focus() {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n\n    var blur = function blur() {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n\n    watch(function () {\n      return props.modelValue;\n    }, function (value) {\n      var newVal = Number(value);\n\n      if (newVal !== void 0) {\n        if (isNaN(newVal)) return;\n\n        if (props.stepStrictly) {\n          var stepPrecision = getPrecision(props.step);\n          var precisionFactor = Math.pow(10, stepPrecision);\n          newVal = Math.round(newVal / props.step) * precisionFactor * props.step / precisionFactor;\n        }\n\n        if (props.precision !== void 0) {\n          newVal = toPrecision(newVal, props.precision);\n        }\n      }\n\n      if (newVal !== void 0 && newVal >= props.max) {\n        newVal = props.max;\n        emit(\"update:modelValue\", newVal);\n      }\n\n      if (newVal !== void 0 && newVal <= props.min) {\n        newVal = props.min;\n        emit(\"update:modelValue\", newVal);\n      }\n\n      data.currentValue = newVal;\n      data.userInput = null;\n    }, {\n      immediate: true\n    });\n    onMounted(function () {\n      var _a;\n\n      var innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput.setAttribute(\"role\", \"spinbutton\");\n      innerInput.setAttribute(\"aria-valuemax\", String(props.max));\n      innerInput.setAttribute(\"aria-valuemin\", String(props.min));\n      innerInput.setAttribute(\"aria-valuenow\", String(data.currentValue));\n      innerInput.setAttribute(\"aria-disabled\", String(inputNumberDisabled.value));\n\n      if (!isNumber(props.modelValue)) {\n        emit(\"update:modelValue\", Number(props.modelValue));\n      }\n    });\n    onUpdated(function () {\n      var _a;\n\n      var innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput.setAttribute(\"aria-valuenow\", data.currentValue);\n    });\n    return {\n      input: input,\n      displayValue: displayValue,\n      handleInput: handleInput,\n      handleInputChange: handleInputChange,\n      controlsAtRight: controlsAtRight,\n      decrease: decrease,\n      increase: increase,\n      inputNumberSize: inputNumberSize,\n      inputNumberDisabled: inputNumberDisabled,\n      maxDisabled: maxDisabled,\n      minDisabled: minDisabled,\n      focus: focus,\n      blur: blur\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}