{"ast":null,"code":"import { defineComponent, ref, computed, inject } from 'vue';\nimport dayjs from 'dayjs';\nimport { EVENT_CODE } from '../../../../utils/aria.mjs';\nimport '../../../../hooks/index.mjs';\nimport './basic-time-spinner.mjs';\nimport { useOldValue, getAvailableArrs } from './useTimePicker.mjs';\nimport script$1 from './basic-time-spinner.vue_vue&type=script&lang.mjs';\nimport { useLocaleInject } from '../../../../hooks/use-locale/index.mjs';\nvar script = defineComponent({\n  components: {\n    TimeSpinner: script$1\n  },\n  props: {\n    visible: Boolean,\n    actualVisible: {\n      type: Boolean,\n      \"default\": void 0\n    },\n    datetimeRole: {\n      type: String\n    },\n    parsedValue: {\n      type: [Object, String]\n    },\n    format: {\n      type: String,\n      \"default\": \"\"\n    }\n  },\n  emits: [\"pick\", \"select-range\", \"set-picker-option\"],\n  setup: function setup(props, ctx) {\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t,\n        lang = _useLocaleInject.lang;\n\n    var selectionRange = ref([0, 2]);\n    var oldValue = useOldValue(props);\n    var transitionName = computed(function () {\n      return props.actualVisible === void 0 ? \"el-zoom-in-top\" : \"\";\n    });\n    var showSeconds = computed(function () {\n      return props.format.includes(\"ss\");\n    });\n    var amPmMode = computed(function () {\n      if (props.format.includes(\"A\")) return \"A\";\n      if (props.format.includes(\"a\")) return \"a\";\n      return \"\";\n    });\n\n    var isValidValue = function isValidValue(_date) {\n      var parsedDate = dayjs(_date).locale(lang.value);\n      var result = getRangeAvailableTime(parsedDate);\n      return parsedDate.isSame(result);\n    };\n\n    var handleCancel = function handleCancel() {\n      ctx.emit(\"pick\", oldValue.value, false);\n    };\n\n    var handleConfirm = function handleConfirm() {\n      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var first = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (first) return;\n      ctx.emit(\"pick\", props.parsedValue, visible);\n    };\n\n    var handleChange = function handleChange(_date) {\n      if (!props.visible) {\n        return;\n      }\n\n      var result = getRangeAvailableTime(_date).millisecond(0);\n      ctx.emit(\"pick\", result, true);\n    };\n\n    var setSelectionRange = function setSelectionRange(start, end) {\n      ctx.emit(\"select-range\", start, end);\n      selectionRange.value = [start, end];\n    };\n\n    var changeSelectionRange = function changeSelectionRange(step) {\n      var list = [0, 3].concat(showSeconds.value ? [6] : []);\n      var mapping = [\"hours\", \"minutes\"].concat(showSeconds.value ? [\"seconds\"] : []);\n      var index = list.indexOf(selectionRange.value[0]);\n      var next = (index + step + list.length) % list.length;\n      timePickerOptions[\"start_emitSelectRange\"](mapping[next]);\n    };\n\n    var handleKeydown = function handleKeydown(event) {\n      var code = event.code;\n\n      if (code === EVENT_CODE.left || code === EVENT_CODE.right) {\n        var step = code === EVENT_CODE.left ? -1 : 1;\n        changeSelectionRange(step);\n        event.preventDefault();\n        return;\n      }\n\n      if (code === EVENT_CODE.up || code === EVENT_CODE.down) {\n        var _step = code === EVENT_CODE.up ? -1 : 1;\n\n        timePickerOptions[\"start_scrollDown\"](_step);\n        event.preventDefault();\n        return;\n      }\n    };\n\n    var getRangeAvailableTime = function getRangeAvailableTime(date) {\n      var availableMap = {\n        hour: getAvailableHours,\n        minute: getAvailableMinutes,\n        second: getAvailableSeconds\n      };\n      var result = date;\n      [\"hour\", \"minute\", \"second\"].forEach(function (_) {\n        if (availableMap[_]) {\n          var availableArr;\n          var method = availableMap[_];\n\n          if (_ === \"minute\") {\n            availableArr = method(result.hour(), props.datetimeRole);\n          } else if (_ === \"second\") {\n            availableArr = method(result.hour(), result.minute(), props.datetimeRole);\n          } else {\n            availableArr = method(props.datetimeRole);\n          }\n\n          if (availableArr && availableArr.length && !availableArr.includes(result[_]())) {\n            result = result[_](availableArr[0]);\n          }\n        }\n      });\n      return result;\n    };\n\n    var parseUserInput = function parseUserInput(value) {\n      if (!value) return null;\n      return dayjs(value, props.format).locale(lang.value);\n    };\n\n    var formatToString = function formatToString(value) {\n      if (!value) return null;\n      return value.format(props.format);\n    };\n\n    var getDefaultValue = function getDefaultValue() {\n      return dayjs(defaultValue).locale(lang.value);\n    };\n\n    ctx.emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    ctx.emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    ctx.emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    ctx.emit(\"set-picker-option\", [\"handleKeydown\", handleKeydown]);\n    ctx.emit(\"set-picker-option\", [\"getRangeAvailableTime\", getRangeAvailableTime]);\n    ctx.emit(\"set-picker-option\", [\"getDefaultValue\", getDefaultValue]);\n    var timePickerOptions = {};\n\n    var onSetOption = function onSetOption(e) {\n      timePickerOptions[e[0]] = e[1];\n    };\n\n    var pickerBase = inject(\"EP_PICKER_BASE\");\n    var _pickerBase$props = pickerBase.props,\n        arrowControl = _pickerBase$props.arrowControl,\n        disabledHours = _pickerBase$props.disabledHours,\n        disabledMinutes = _pickerBase$props.disabledMinutes,\n        disabledSeconds = _pickerBase$props.disabledSeconds,\n        defaultValue = _pickerBase$props.defaultValue;\n\n    var _getAvailableArrs = getAvailableArrs(disabledHours, disabledMinutes, disabledSeconds),\n        getAvailableHours = _getAvailableArrs.getAvailableHours,\n        getAvailableMinutes = _getAvailableArrs.getAvailableMinutes,\n        getAvailableSeconds = _getAvailableArrs.getAvailableSeconds;\n\n    return {\n      transitionName: transitionName,\n      arrowControl: arrowControl,\n      onSetOption: onSetOption,\n      t: t,\n      handleConfirm: handleConfirm,\n      handleChange: handleChange,\n      setSelectionRange: setSelectionRange,\n      amPmMode: amPmMode,\n      showSeconds: showSeconds,\n      handleCancel: handleCancel,\n      disabledHours: disabledHours,\n      disabledMinutes: disabledMinutes,\n      disabledSeconds: disabledSeconds\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}