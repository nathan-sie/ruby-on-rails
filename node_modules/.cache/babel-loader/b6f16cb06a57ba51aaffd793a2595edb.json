{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, ref, nextTick, onMounted, provide, reactive, toRefs, watch } from 'vue';\nimport { EVENT_CODE } from '../../../utils/aria.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { radioGroupProps, radioGroupEmits } from './radio-group.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { radioGroupKey } from '../../../tokens/radio.mjs';\nvar script = defineComponent({\n  name: \"ElRadioGroup\",\n  props: radioGroupProps,\n  emits: radioGroupEmits,\n  setup: function setup(props, ctx) {\n    var radioGroupRef = ref();\n\n    var _useFormItem = useFormItem({}),\n        size = _useFormItem.size,\n        disabled = _useFormItem.disabled,\n        formItem = _useFormItem.formItem;\n\n    var changeEvent = function changeEvent(value) {\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      nextTick(function () {\n        return ctx.emit(\"change\", value);\n      });\n    };\n\n    var handleKeydown = function handleKeydown(e) {\n      if (!radioGroupRef.value) return;\n      var target = e.target;\n      var className = target.nodeName === \"INPUT\" ? \"[type=radio]\" : \"[role=radio]\";\n      var radios = radioGroupRef.value.querySelectorAll(className);\n      var length = radios.length;\n      var index = Array.from(radios).indexOf(target);\n      var roleRadios = radioGroupRef.value.querySelectorAll(\"[role=radio]\");\n      var nextIndex = null;\n\n      switch (e.code) {\n        case EVENT_CODE.left:\n        case EVENT_CODE.up:\n          e.stopPropagation();\n          e.preventDefault();\n          nextIndex = index === 0 ? length - 1 : index - 1;\n          break;\n\n        case EVENT_CODE.right:\n        case EVENT_CODE.down:\n          e.stopPropagation();\n          e.preventDefault();\n          nextIndex = index === length - 1 ? 0 : index + 1;\n          break;\n\n        default:\n          break;\n      }\n\n      if (nextIndex === null) return;\n      roleRadios[nextIndex].click();\n      roleRadios[nextIndex].focus();\n    };\n\n    onMounted(function () {\n      var radios = radioGroupRef.value.querySelectorAll(\"[type=radio]\");\n      var firstLabel = radios[0];\n\n      if (!Array.from(radios).some(function (radio) {\n        return radio.checked;\n      }) && firstLabel) {\n        firstLabel.tabIndex = 0;\n      }\n    });\n    provide(radioGroupKey, reactive(_objectSpread(_objectSpread({}, toRefs(props)), {}, {\n      changeEvent: changeEvent\n    })));\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      return formItem == null ? void 0 : formItem.validate(\"change\");\n    });\n    return {\n      size: size,\n      disabled: disabled,\n      radioGroupRef: radioGroupRef,\n      handleKeydown: handleKeydown\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}