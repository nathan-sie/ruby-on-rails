{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, ref, effectScope, computed, watch, nextTick, onMounted } from 'vue';\nimport { useEventListener } from '@vueuse/core';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { EVENT_CODE } from '../../../utils/aria.mjs';\nimport { isFirefox, rafThrottle } from '../../../utils/util.mjs';\nimport { FullScreen, ScaleToOriginal, Close, ArrowLeft, ArrowRight, ZoomOut, ZoomIn, RefreshLeft, RefreshRight } from '@element-plus/icons';\nimport { imageViewerProps, imageViewerEmits } from './image-viewer.mjs';\nimport { useLocaleInject } from '../../../hooks/use-locale/index.mjs';\nvar Mode = {\n  CONTAIN: {\n    name: \"contain\",\n    icon: FullScreen\n  },\n  ORIGINAL: {\n    name: \"original\",\n    icon: ScaleToOriginal\n  }\n};\nvar mousewheelEventName = isFirefox() ? \"DOMMouseScroll\" : \"mousewheel\";\nvar script = defineComponent({\n  name: \"ElImageViewer\",\n  components: {\n    ElIcon: ElIcon,\n    Close: Close,\n    ArrowLeft: ArrowLeft,\n    ArrowRight: ArrowRight,\n    ZoomOut: ZoomOut,\n    ZoomIn: ZoomIn,\n    RefreshLeft: RefreshLeft,\n    RefreshRight: RefreshRight\n  },\n  props: imageViewerProps,\n  emits: imageViewerEmits,\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t;\n\n    var wrapper = ref();\n    var img = ref();\n    var scopeEventListener = effectScope();\n    var loading = ref(true);\n    var index = ref(props.initialIndex);\n    var mode = ref(Mode.CONTAIN);\n    var transform = ref({\n      scale: 1,\n      deg: 0,\n      offsetX: 0,\n      offsetY: 0,\n      enableTransition: false\n    });\n    var isSingle = computed(function () {\n      var urlList = props.urlList;\n      return urlList.length <= 1;\n    });\n    var isFirst = computed(function () {\n      return index.value === 0;\n    });\n    var isLast = computed(function () {\n      return index.value === props.urlList.length - 1;\n    });\n    var currentImg = computed(function () {\n      return props.urlList[index.value];\n    });\n    var imgStyle = computed(function () {\n      var _transform$value = transform.value,\n          scale = _transform$value.scale,\n          deg = _transform$value.deg,\n          offsetX = _transform$value.offsetX,\n          offsetY = _transform$value.offsetY,\n          enableTransition = _transform$value.enableTransition;\n      var style = {\n        transform: \"scale(\".concat(scale, \") rotate(\").concat(deg, \"deg)\"),\n        transition: enableTransition ? \"transform .3s\" : \"\",\n        marginLeft: \"\".concat(offsetX, \"px\"),\n        marginTop: \"\".concat(offsetY, \"px\")\n      };\n\n      if (mode.value.name === Mode.CONTAIN.name) {\n        style.maxWidth = style.maxHeight = \"100%\";\n      }\n\n      return style;\n    });\n\n    function hide() {\n      unregisterEventListener();\n      emit(\"close\");\n    }\n\n    function registerEventListener() {\n      var keydownHandler = rafThrottle(function (e) {\n        switch (e.code) {\n          case EVENT_CODE.esc:\n            hide();\n            break;\n\n          case EVENT_CODE.space:\n            toggleMode();\n            break;\n\n          case EVENT_CODE.left:\n            prev();\n            break;\n\n          case EVENT_CODE.up:\n            handleActions(\"zoomIn\");\n            break;\n\n          case EVENT_CODE.right:\n            next();\n            break;\n\n          case EVENT_CODE.down:\n            handleActions(\"zoomOut\");\n            break;\n        }\n      });\n      var mousewheelHandler = rafThrottle(function (e) {\n        var delta = e.wheelDelta ? e.wheelDelta : -e.detail;\n\n        if (delta > 0) {\n          handleActions(\"zoomIn\", {\n            zoomRate: 0.015,\n            enableTransition: false\n          });\n        } else {\n          handleActions(\"zoomOut\", {\n            zoomRate: 0.015,\n            enableTransition: false\n          });\n        }\n      });\n      scopeEventListener.run(function () {\n        useEventListener(document, \"keydown\", keydownHandler);\n        useEventListener(document, mousewheelEventName, mousewheelHandler);\n      });\n    }\n\n    function unregisterEventListener() {\n      scopeEventListener.stop();\n    }\n\n    function handleImgLoad() {\n      loading.value = false;\n    }\n\n    function handleImgError(e) {\n      loading.value = false;\n      e.target.alt = t(\"el.image.error\");\n    }\n\n    function handleMouseDown(e) {\n      if (loading.value || e.button !== 0 || !wrapper.value) return;\n      var _transform$value2 = transform.value,\n          offsetX = _transform$value2.offsetX,\n          offsetY = _transform$value2.offsetY;\n      var startX = e.pageX;\n      var startY = e.pageY;\n      var divLeft = wrapper.value.clientLeft;\n      var divRight = wrapper.value.clientLeft + wrapper.value.clientWidth;\n      var divTop = wrapper.value.clientTop;\n      var divBottom = wrapper.value.clientTop + wrapper.value.clientHeight;\n      var dragHandler = rafThrottle(function (ev) {\n        transform.value = _objectSpread(_objectSpread({}, transform.value), {}, {\n          offsetX: offsetX + ev.pageX - startX,\n          offsetY: offsetY + ev.pageY - startY\n        });\n      });\n      var removeMousemove = useEventListener(document, \"mousemove\", dragHandler);\n      useEventListener(document, \"mouseup\", function (evt) {\n        var mouseX = evt.pageX;\n        var mouseY = evt.pageY;\n\n        if (mouseX < divLeft || mouseX > divRight || mouseY < divTop || mouseY > divBottom) {\n          reset();\n        }\n\n        removeMousemove();\n      });\n      e.preventDefault();\n    }\n\n    function reset() {\n      transform.value = {\n        scale: 1,\n        deg: 0,\n        offsetX: 0,\n        offsetY: 0,\n        enableTransition: false\n      };\n    }\n\n    function toggleMode() {\n      if (loading.value) return;\n      var modeNames = Object.keys(Mode);\n      var modeValues = Object.values(Mode);\n      var currentMode = mode.value.name;\n      var index2 = modeValues.findIndex(function (i) {\n        return i.name === currentMode;\n      });\n      var nextIndex = (index2 + 1) % modeNames.length;\n      mode.value = Mode[modeNames[nextIndex]];\n      reset();\n    }\n\n    function prev() {\n      if (isFirst.value && !props.infinite) return;\n      var len = props.urlList.length;\n      index.value = (index.value - 1 + len) % len;\n    }\n\n    function next() {\n      if (isLast.value && !props.infinite) return;\n      var len = props.urlList.length;\n      index.value = (index.value + 1) % len;\n    }\n\n    function handleActions(action) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (loading.value) return;\n\n      var _zoomRate$rotateDeg$e = _objectSpread({\n        zoomRate: 0.2,\n        rotateDeg: 90,\n        enableTransition: true\n      }, options),\n          zoomRate = _zoomRate$rotateDeg$e.zoomRate,\n          rotateDeg = _zoomRate$rotateDeg$e.rotateDeg,\n          enableTransition = _zoomRate$rotateDeg$e.enableTransition;\n\n      switch (action) {\n        case \"zoomOut\":\n          if (transform.value.scale > 0.2) {\n            transform.value.scale = parseFloat((transform.value.scale - zoomRate).toFixed(3));\n          }\n\n          break;\n\n        case \"zoomIn\":\n          transform.value.scale = parseFloat((transform.value.scale + zoomRate).toFixed(3));\n          break;\n\n        case \"clockwise\":\n          transform.value.deg += rotateDeg;\n          break;\n\n        case \"anticlockwise\":\n          transform.value.deg -= rotateDeg;\n          break;\n      }\n\n      transform.value.enableTransition = enableTransition;\n    }\n\n    watch(currentImg, function () {\n      nextTick(function () {\n        var $img = img.value;\n\n        if (!($img == null ? void 0 : $img.complete)) {\n          loading.value = true;\n        }\n      });\n    });\n    watch(index, function (val) {\n      reset();\n      emit(\"switch\", val);\n    });\n    onMounted(function () {\n      var _a, _b;\n\n      registerEventListener();\n      (_b = (_a = wrapper.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    });\n    return {\n      index: index,\n      wrapper: wrapper,\n      img: img,\n      isSingle: isSingle,\n      isFirst: isFirst,\n      isLast: isLast,\n      currentImg: currentImg,\n      imgStyle: imgStyle,\n      mode: mode,\n      handleActions: handleActions,\n      prev: prev,\n      next: next,\n      hide: hide,\n      toggleMode: toggleMode,\n      handleImgLoad: handleImgLoad,\n      handleImgError: handleImgError,\n      handleMouseDown: handleMouseDown\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}