{"ast":null,"code":"import { defineComponent, ref } from 'vue';\nimport { NOOP, hasOwn } from '@vue/shared';\nimport upload from './ajax.mjs';\nimport './upload-dragger.mjs';\nimport script$1 from './upload-dragger.vue_vue&type=script&lang.mjs';\nvar script = defineComponent({\n  components: {\n    UploadDragger: script$1\n  },\n  props: {\n    type: {\n      type: String,\n      \"default\": \"\"\n    },\n    action: {\n      type: String,\n      required: true\n    },\n    name: {\n      type: String,\n      \"default\": \"file\"\n    },\n    data: {\n      type: Object,\n      \"default\": function _default() {\n        return null;\n      }\n    },\n    headers: {\n      type: Object,\n      \"default\": function _default() {\n        return null;\n      }\n    },\n    method: {\n      type: String,\n      \"default\": \"post\"\n    },\n    withCredentials: {\n      type: Boolean,\n      \"default\": false\n    },\n    multiple: {\n      type: Boolean,\n      \"default\": null\n    },\n    accept: {\n      type: String,\n      \"default\": \"\"\n    },\n    onStart: {\n      type: Function,\n      \"default\": NOOP\n    },\n    onProgress: {\n      type: Function,\n      \"default\": NOOP\n    },\n    onSuccess: {\n      type: Function,\n      \"default\": NOOP\n    },\n    onError: {\n      type: Function,\n      \"default\": NOOP\n    },\n    beforeUpload: {\n      type: Function,\n      \"default\": NOOP\n    },\n    drag: {\n      type: Boolean,\n      \"default\": false\n    },\n    onPreview: {\n      type: Function,\n      \"default\": NOOP\n    },\n    onRemove: {\n      type: Function,\n      \"default\": NOOP\n    },\n    fileList: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    autoUpload: {\n      type: Boolean,\n      \"default\": true\n    },\n    listType: {\n      type: String,\n      \"default\": \"text\"\n    },\n    httpRequest: {\n      type: Function,\n      \"default\": function _default() {\n        return upload;\n      }\n    },\n    disabled: Boolean,\n    limit: {\n      type: Number,\n      \"default\": null\n    },\n    onExceed: {\n      type: Function,\n      \"default\": NOOP\n    }\n  },\n  setup: function setup(props) {\n    var reqs = ref({});\n    var mouseover = ref(false);\n    var inputRef = ref(null);\n\n    function uploadFiles(files) {\n      if (props.limit && props.fileList.length + files.length > props.limit) {\n        props.onExceed(files, props.fileList);\n        return;\n      }\n\n      var postFiles = Array.from(files);\n\n      if (!props.multiple) {\n        postFiles = postFiles.slice(0, 1);\n      }\n\n      if (postFiles.length === 0) {\n        return;\n      }\n\n      postFiles.forEach(function (rawFile) {\n        props.onStart(rawFile);\n        if (props.autoUpload) upload(rawFile);\n      });\n    }\n\n    function upload(rawFile) {\n      inputRef.value.value = null;\n\n      if (!props.beforeUpload) {\n        return post(rawFile);\n      }\n\n      var before = props.beforeUpload(rawFile);\n\n      if (before instanceof Promise) {\n        before.then(function (processedFile) {\n          var fileType = Object.prototype.toString.call(processedFile);\n\n          if (fileType === \"[object File]\" || fileType === \"[object Blob]\") {\n            if (fileType === \"[object Blob]\") {\n              processedFile = new File([processedFile], rawFile.name, {\n                type: rawFile.type\n              });\n            }\n\n            for (var p in rawFile) {\n              if (hasOwn(rawFile, p)) {\n                processedFile[p] = rawFile[p];\n              }\n            }\n\n            post(processedFile);\n          } else {\n            post(rawFile);\n          }\n        })[\"catch\"](function () {\n          props.onRemove(null, rawFile);\n        });\n      } else if (before !== false) {\n        post(rawFile);\n      } else {\n        props.onRemove(null, rawFile);\n      }\n    }\n\n    function abort(file) {\n      var _reqs = reqs.value;\n\n      if (file) {\n        var uid = file;\n        if (file.uid) uid = file.uid;\n\n        if (_reqs[uid]) {\n          ;\n\n          _reqs[uid].abort();\n        }\n      } else {\n        Object.keys(_reqs).forEach(function (uid) {\n          if (_reqs[uid]) _reqs[uid].abort();\n          delete _reqs[uid];\n        });\n      }\n    }\n\n    function post(rawFile) {\n      var uid = rawFile.uid;\n      var options = {\n        headers: props.headers,\n        withCredentials: props.withCredentials,\n        file: rawFile,\n        data: props.data,\n        method: props.method,\n        filename: props.name,\n        action: props.action,\n        onProgress: function onProgress(e) {\n          props.onProgress(e, rawFile);\n        },\n        onSuccess: function onSuccess(res) {\n          props.onSuccess(res, rawFile);\n          delete reqs.value[uid];\n        },\n        onError: function onError(err) {\n          props.onError(err, rawFile);\n          delete reqs.value[uid];\n        }\n      };\n      var req = props.httpRequest(options);\n      reqs.value[uid] = req;\n\n      if (req instanceof Promise) {\n        req.then(options.onSuccess, options.onError);\n      }\n    }\n\n    function handleChange(e) {\n      var files = e.target.files;\n      if (!files) return;\n      uploadFiles(files);\n    }\n\n    function handleClick() {\n      if (!props.disabled) {\n        inputRef.value.value = null;\n        inputRef.value.click();\n      }\n    }\n\n    function handleKeydown() {\n      handleClick();\n    }\n\n    return {\n      reqs: reqs,\n      mouseover: mouseover,\n      inputRef: inputRef,\n      abort: abort,\n      post: post,\n      handleChange: handleChange,\n      handleClick: handleClick,\n      handleKeydown: handleKeydown,\n      upload: upload,\n      uploadFiles: uploadFiles\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}