{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { defineComponent, ref, inject, getCurrentInstance, onMounted, watch, onBeforeUnmount, computed, reactive } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Close, Check } from '@element-plus/icons';\nvar script = defineComponent({\n  name: \"ElStep\",\n  components: {\n    ElIcon: ElIcon,\n    Close: Close,\n    Check: Check\n  },\n  props: {\n    title: {\n      type: String,\n      \"default\": \"\"\n    },\n    icon: {\n      type: [String, Object],\n      \"default\": \"\"\n    },\n    description: {\n      type: String,\n      \"default\": \"\"\n    },\n    status: {\n      type: String,\n      \"default\": \"\",\n      validator: function validator(val) {\n        return [\"\", \"wait\", \"process\", \"finish\", \"error\", \"success\"].includes(val);\n      }\n    }\n  },\n  setup: function setup(props) {\n    var index = ref(-1);\n    var lineStyle = ref({});\n    var internalStatus = ref(\"\");\n    var parent = inject(\"ElSteps\");\n    var currentInstance = getCurrentInstance();\n    onMounted(function () {\n      watch([function () {\n        return parent.props.active;\n      }, function () {\n        return parent.props.processStatus;\n      }, function () {\n        return parent.props.finishStatus;\n      }], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            active = _ref2[0];\n\n        updateStatus(active);\n      }, {\n        immediate: true\n      });\n    });\n    onBeforeUnmount(function () {\n      parent.steps.value = parent.steps.value.filter(function (instance) {\n        return instance.uid !== currentInstance.uid;\n      });\n    });\n    var currentStatus = computed(function () {\n      return props.status || internalStatus.value;\n    });\n    var prevStatus = computed(function () {\n      var prevStep = parent.steps.value[index.value - 1];\n      return prevStep ? prevStep.currentStatus : \"wait\";\n    });\n    var isCenter = computed(function () {\n      return parent.props.alignCenter;\n    });\n    var isVertical = computed(function () {\n      return parent.props.direction === \"vertical\";\n    });\n    var isSimple = computed(function () {\n      return parent.props.simple;\n    });\n    var stepsCount = computed(function () {\n      return parent.steps.value.length;\n    });\n    var isLast = computed(function () {\n      var _a;\n\n      return ((_a = parent.steps.value[stepsCount.value - 1]) == null ? void 0 : _a.uid) === currentInstance.uid;\n    });\n    var space = computed(function () {\n      return isSimple.value ? \"\" : parent.props.space;\n    });\n    var style = computed(function () {\n      var style2 = {\n        flexBasis: typeof space.value === \"number\" ? \"\".concat(space.value, \"px\") : space.value ? space.value : \"\".concat(100 / (stepsCount.value - (isCenter.value ? 0 : 1)), \"%\")\n      };\n      if (isVertical.value) return style2;\n\n      if (isLast.value) {\n        style2.maxWidth = \"\".concat(100 / stepsCount.value, \"%\");\n      }\n\n      return style2;\n    });\n\n    var setIndex = function setIndex(val) {\n      index.value = val;\n    };\n\n    var calcProgress = function calcProgress(status) {\n      var step = 100;\n      var style2 = {};\n      style2.transitionDelay = \"\".concat(150 * index.value, \"ms\");\n\n      if (status === parent.props.processStatus) {\n        step = 0;\n      } else if (status === \"wait\") {\n        step = 0;\n        style2.transitionDelay = \"\".concat(-150 * index.value, \"ms\");\n      }\n\n      style2.borderWidth = step && !isSimple.value ? \"1px\" : 0;\n      style2[parent.props.direction === \"vertical\" ? \"height\" : \"width\"] = \"\".concat(step, \"%\");\n      lineStyle.value = style2;\n    };\n\n    var updateStatus = function updateStatus(activeIndex) {\n      if (activeIndex > index.value) {\n        internalStatus.value = parent.props.finishStatus;\n      } else if (activeIndex === index.value && prevStatus.value !== \"error\") {\n        internalStatus.value = parent.props.processStatus;\n      } else {\n        internalStatus.value = \"wait\";\n      }\n\n      var prevChild = parent.steps.value[stepsCount.value - 1];\n      if (prevChild) prevChild.calcProgress(internalStatus.value);\n    };\n\n    var stepItemState = reactive({\n      uid: computed(function () {\n        return currentInstance.uid;\n      }),\n      currentStatus: currentStatus,\n      setIndex: setIndex,\n      calcProgress: calcProgress\n    });\n    parent.steps.value = [].concat(_toConsumableArray(parent.steps.value), [stepItemState]);\n    return {\n      index: index,\n      lineStyle: lineStyle,\n      currentStatus: currentStatus,\n      isCenter: isCenter,\n      isVertical: isVertical,\n      isSimple: isSimple,\n      isLast: isLast,\n      space: space,\n      style: style,\n      parent: parent,\n      setIndex: setIndex,\n      calcProgress: calcProgress,\n      updateStatus: updateStatus\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}