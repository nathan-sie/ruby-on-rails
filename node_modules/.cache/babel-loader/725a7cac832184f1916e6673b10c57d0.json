{"ast":null,"code":"import { resolveComponent, openBlock, createElementBlock, mergeProps, Fragment, renderList, renderSlot, createVNode, createBlock, normalizeClass, createCommentVNode, normalizeProps } from 'vue';\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_skeleton_item = resolveComponent(\"el-skeleton-item\");\n\n  return _ctx.uiLoading ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    \"class\": [\"el-skeleton\", _ctx.animated ? \"is-animated\" : \"\"]\n  }, _ctx.$attrs), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.count, function (i) {\n    return openBlock(), createElementBlock(Fragment, {\n      key: i\n    }, [_ctx.loading ? renderSlot(_ctx.$slots, \"template\", {\n      key: i\n    }, function () {\n      return [createVNode(_component_el_skeleton_item, {\n        \"class\": \"is-first\",\n        variant: \"p\"\n      }), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, function (item) {\n        return openBlock(), createBlock(_component_el_skeleton_item, {\n          key: item,\n          \"class\": normalizeClass({\n            \"el-skeleton__paragraph\": true,\n            \"is-last\": item === _ctx.rows && _ctx.rows > 1\n          }),\n          variant: \"p\"\n        }, null, 8, [\"class\"]);\n      }), 128))];\n    }) : createCommentVNode(\"v-if\", true)], 64);\n  }), 128))], 16)) : renderSlot(_ctx.$slots, \"default\", normalizeProps(mergeProps({\n    key: 1\n  }, _ctx.$attrs)));\n}\n\nexport { render };","map":null,"metadata":{},"sourceType":"module"}