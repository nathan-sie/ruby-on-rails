{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defineComponent, getCurrentInstance, inject, ref, shallowRef, computed, nextTick, watch, onMounted, onUpdated } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleClose, View } from '@element-plus/icons';\nimport { ValidateComponentsMap } from '../../../utils/icon.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../utils/constants.mjs';\nimport '../../../utils/util.mjs';\nimport isServer from '../../../utils/isServer.mjs';\nimport { isKorean } from '../../../utils/isDef.mjs';\nimport { calcTextareaHeight } from './calc-textarea-height.mjs';\nimport { inputProps, inputEmits } from './input.mjs';\nimport useAttrs from '../../../hooks/use-attrs/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { isObject } from '@vue/shared';\nvar PENDANT_MAP = {\n  suffix: \"append\",\n  prefix: \"prepend\"\n};\nvar script = defineComponent({\n  name: \"ElInput\",\n  components: {\n    ElIcon: ElIcon,\n    CircleClose: CircleClose,\n    IconView: View\n  },\n  inheritAttrs: false,\n  props: inputProps,\n  emits: inputEmits,\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit,\n        rawAttrs = _ref.attrs;\n    var instance = getCurrentInstance();\n    var attrs = useAttrs();\n    var elForm = inject(elFormKey, void 0);\n    var elFormItem = inject(elFormItemKey, void 0);\n\n    var _useFormItem = useFormItem({}),\n        inputSize = _useFormItem.size,\n        inputDisabled = _useFormItem.disabled;\n\n    var input = ref();\n    var textarea = ref();\n    var focused = ref(false);\n    var hovering = ref(false);\n    var isComposing = ref(false);\n    var passwordVisible = ref(false);\n\n    var _textareaCalcStyle = shallowRef(props.inputStyle);\n\n    var inputOrTextarea = computed(function () {\n      return input.value || textarea.value;\n    });\n    var needStatusIcon = computed(function () {\n      var _a;\n\n      return (_a = elForm == null ? void 0 : elForm.statusIcon) != null ? _a : false;\n    });\n    var validateState = computed(function () {\n      return (elFormItem == null ? void 0 : elFormItem.validateState) || \"\";\n    });\n    var validateIcon = computed(function () {\n      return ValidateComponentsMap[validateState.value];\n    });\n    var containerStyle = computed(function () {\n      return rawAttrs.style;\n    });\n    var computedTextareaStyle = computed(function () {\n      return [props.inputStyle, _textareaCalcStyle.value, {\n        resize: props.resize\n      }];\n    });\n    var nativeInputValue = computed(function () {\n      return props.modelValue === null || props.modelValue === void 0 ? \"\" : String(props.modelValue);\n    });\n    var showClear = computed(function () {\n      return props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (focused.value || hovering.value);\n    });\n    var showPwdVisible = computed(function () {\n      return props.showPassword && !inputDisabled.value && !props.readonly && (!!nativeInputValue.value || focused.value);\n    });\n    var isWordLimitVisible = computed(function () {\n      return props.showWordLimit && !!attrs.value.maxlength && (props.type === \"text\" || props.type === \"textarea\") && !inputDisabled.value && !props.readonly && !props.showPassword;\n    });\n    var textLength = computed(function () {\n      return Array.from(nativeInputValue.value).length;\n    });\n    var inputExceed = computed(function () {\n      return !!isWordLimitVisible.value && textLength.value > Number(attrs.value.maxlength);\n    });\n\n    var resizeTextarea = function resizeTextarea() {\n      var type = props.type,\n          autosize = props.autosize;\n      if (isServer || type !== \"textarea\") return;\n\n      if (autosize) {\n        var minRows = isObject(autosize) ? autosize.minRows : void 0;\n        var maxRows = isObject(autosize) ? autosize.maxRows : void 0;\n        _textareaCalcStyle.value = _objectSpread({}, calcTextareaHeight(textarea.value, minRows, maxRows));\n      } else {\n        _textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value).minHeight\n        };\n      }\n    };\n\n    var setNativeInputValue = function setNativeInputValue() {\n      var input2 = inputOrTextarea.value;\n      if (!input2 || input2.value === nativeInputValue.value) return;\n      input2.value = nativeInputValue.value;\n    };\n\n    var calcIconOffset = function calcIconOffset(place) {\n      var el = instance.vnode.el;\n      if (!el) return;\n      var elList = Array.from(el.querySelectorAll(\".el-input__\".concat(place)));\n      var target = elList.find(function (item) {\n        return item.parentNode === el;\n      });\n      if (!target) return;\n      var pendant = PENDANT_MAP[place];\n\n      if (slots[pendant]) {\n        target.style.transform = \"translateX(\".concat(place === \"suffix\" ? \"-\" : \"\").concat(el.querySelector(\".el-input-group__\".concat(pendant)).offsetWidth, \"px)\");\n      } else {\n        target.removeAttribute(\"style\");\n      }\n    };\n\n    var updateIconOffset = function updateIconOffset() {\n      calcIconOffset(\"prefix\");\n      calcIconOffset(\"suffix\");\n    };\n\n    var handleInput = function handleInput(event) {\n      var value = event.target.value;\n      if (isComposing.value) return;\n      if (value === nativeInputValue.value) return;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"input\", value);\n      nextTick(setNativeInputValue);\n    };\n\n    var handleChange = function handleChange(event) {\n      emit(\"change\", event.target.value);\n    };\n\n    var focus = function focus() {\n      nextTick(function () {\n        var _a;\n\n        (_a = inputOrTextarea.value) == null ? void 0 : _a.focus();\n      });\n    };\n\n    var blur = function blur() {\n      var _a;\n\n      (_a = inputOrTextarea.value) == null ? void 0 : _a.blur();\n    };\n\n    var handleFocus = function handleFocus(event) {\n      focused.value = true;\n      emit(\"focus\", event);\n    };\n\n    var handleBlur = function handleBlur(event) {\n      var _a;\n\n      focused.value = false;\n      emit(\"blur\", event);\n\n      if (props.validateEvent) {\n        (_a = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"blur\");\n      }\n    };\n\n    var select = function select() {\n      var _a;\n\n      (_a = inputOrTextarea.value) == null ? void 0 : _a.select();\n    };\n\n    var handleCompositionStart = function handleCompositionStart(event) {\n      emit(\"compositionstart\", event);\n      isComposing.value = true;\n    };\n\n    var handleCompositionUpdate = function handleCompositionUpdate(event) {\n      var _a;\n\n      emit(\"compositionupdate\", event);\n      var text = (_a = event.target) == null ? void 0 : _a.value;\n      var lastCharacter = text[text.length - 1] || \"\";\n      isComposing.value = !isKorean(lastCharacter);\n    };\n\n    var handleCompositionEnd = function handleCompositionEnd(event) {\n      emit(\"compositionend\", event);\n\n      if (isComposing.value) {\n        isComposing.value = false;\n        handleInput(event);\n      }\n    };\n\n    var clear = function clear() {\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"change\", \"\");\n      emit(\"clear\");\n      emit(\"input\", \"\");\n    };\n\n    var handlePasswordVisible = function handlePasswordVisible() {\n      passwordVisible.value = !passwordVisible.value;\n      focus();\n    };\n\n    var suffixVisible = computed(function () {\n      return !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value;\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      var _a;\n\n      nextTick(resizeTextarea);\n\n      if (props.validateEvent) {\n        (_a = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n      }\n    });\n    watch(nativeInputValue, function () {\n      return setNativeInputValue();\n    });\n    watch(function () {\n      return props.type;\n    }, function () {\n      nextTick(function () {\n        setNativeInputValue();\n        resizeTextarea();\n        updateIconOffset();\n      });\n    });\n    onMounted(function () {\n      setNativeInputValue();\n      updateIconOffset();\n      nextTick(resizeTextarea);\n    });\n    onUpdated(function () {\n      nextTick(updateIconOffset);\n    });\n\n    var onMouseLeave = function onMouseLeave(evt) {\n      hovering.value = false;\n      emit(\"mouseleave\", evt);\n    };\n\n    var onMouseEnter = function onMouseEnter(evt) {\n      hovering.value = true;\n      emit(\"mouseenter\", evt);\n    };\n\n    var handleKeydown = function handleKeydown(evt) {\n      emit(\"keydown\", evt);\n    };\n\n    return {\n      input: input,\n      textarea: textarea,\n      attrs: attrs,\n      inputSize: inputSize,\n      validateState: validateState,\n      validateIcon: validateIcon,\n      containerStyle: containerStyle,\n      computedTextareaStyle: computedTextareaStyle,\n      inputDisabled: inputDisabled,\n      showClear: showClear,\n      showPwdVisible: showPwdVisible,\n      isWordLimitVisible: isWordLimitVisible,\n      textLength: textLength,\n      hovering: hovering,\n      inputExceed: inputExceed,\n      passwordVisible: passwordVisible,\n      inputOrTextarea: inputOrTextarea,\n      suffixVisible: suffixVisible,\n      resizeTextarea: resizeTextarea,\n      handleInput: handleInput,\n      handleChange: handleChange,\n      handleFocus: handleFocus,\n      handleBlur: handleBlur,\n      handleCompositionStart: handleCompositionStart,\n      handleCompositionUpdate: handleCompositionUpdate,\n      handleCompositionEnd: handleCompositionEnd,\n      handlePasswordVisible: handlePasswordVisible,\n      clear: clear,\n      select: select,\n      focus: focus,\n      blur: blur,\n      onMouseLeave: onMouseLeave,\n      onMouseEnter: onMouseEnter,\n      handleKeydown: handleKeydown\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}