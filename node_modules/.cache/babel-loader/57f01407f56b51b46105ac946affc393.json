{"ast":null,"code":"import { defineComponent, getCurrentInstance, watch, onUnmounted, onUpdated, h } from 'vue';\nimport { removeClass, addClass } from '../../../../utils/dom.mjs';\nimport isServer from '../../../../utils/isServer.mjs';\nimport { hColgroup } from '../h-helper.mjs';\nimport useLayoutObserver from '../layout-observer.mjs';\nimport { removePopper } from '../util.mjs';\nimport useRender from './render-helper.mjs';\nimport defaultProps from './defaults.mjs';\nvar TableBody = defineComponent({\n  name: \"ElTableBody\",\n  props: defaultProps,\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n    var parent = instance.parent;\n\n    var _useRender = useRender(props),\n        wrappedRowRender = _useRender.wrappedRowRender,\n        tooltipContent = _useRender.tooltipContent,\n        tooltipTrigger = _useRender.tooltipTrigger;\n\n    var _useLayoutObserver = useLayoutObserver(parent),\n        onColumnsChange = _useLayoutObserver.onColumnsChange,\n        onScrollableChange = _useLayoutObserver.onScrollableChange;\n\n    watch(props.store.states.hoverRow, function (newVal, oldVal) {\n      if (!props.store.states.isComplex.value || isServer) return;\n      var raf = window.requestAnimationFrame;\n\n      if (!raf) {\n        raf = function raf(fn) {\n          return window.setTimeout(fn, 16);\n        };\n      }\n\n      raf(function () {\n        var rows = instance.vnode.el.querySelectorAll(\".el-table__row\");\n        var oldRow = rows[oldVal];\n        var newRow = rows[newVal];\n\n        if (oldRow) {\n          removeClass(oldRow, \"hover-row\");\n        }\n\n        if (newRow) {\n          addClass(newRow, \"hover-row\");\n        }\n      });\n    });\n    onUnmounted(function () {\n      var _a;\n\n      (_a = removePopper) == null ? void 0 : _a();\n    });\n    onUpdated(function () {\n      var _a;\n\n      (_a = removePopper) == null ? void 0 : _a();\n    });\n    return {\n      onColumnsChange: onColumnsChange,\n      onScrollableChange: onScrollableChange,\n      wrappedRowRender: wrappedRowRender,\n      tooltipContent: tooltipContent,\n      tooltipTrigger: tooltipTrigger\n    };\n  },\n  render: function render() {\n    var _this = this;\n\n    var data = this.store.states.data.value || [];\n    return h(\"table\", {\n      \"class\": \"el-table__body\",\n      cellspacing: \"0\",\n      cellpadding: \"0\",\n      border: \"0\"\n    }, [hColgroup(this.store.states.columns.value), h(\"tbody\", {}, [data.reduce(function (acc, row) {\n      return acc.concat(_this.wrappedRowRender(row, acc.length));\n    }, [])])]);\n  }\n});\nexport { TableBody as default };","map":null,"metadata":{},"sourceType":"module"}