{"ast":null,"code":"import { getCurrentInstance, computed, provide, ref, inject } from 'vue';\nimport defaultLang from '../../locale/lang/en.mjs';\nimport { buildProp, definePropType } from '../../utils/props.mjs';\nvar useLocaleProps = {\n  locale: buildProp({\n    type: definePropType(Object)\n  })\n};\nvar LocaleInjectionKey = \"ElLocaleInjection\";\nvar localeObjCache;\n\nfunction translate(path, option, current) {\n  var paths = path.split(\".\");\n  var value;\n\n  for (var i = 0, j = paths.length; i < j; i++) {\n    var property = paths[i];\n    value = current[property];\n    if (i === j - 1) return template(value, option);\n    if (!value) return \"\";\n    current = value;\n  }\n}\n\nvar useLocale = function useLocale() {\n  var vm = getCurrentInstance();\n  var props = vm.props;\n  var locale = computed(function () {\n    return props.locale || defaultLang;\n  });\n  var lang = computed(function () {\n    return locale.value.name;\n  });\n\n  var _translator = function _translator() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var path = args[0],\n        option = args[1];\n    return translate(path, option, locale.value);\n  };\n\n  var t = function t() {\n    return _translator.apply(void 0, arguments);\n  };\n\n  var provides = {\n    locale: locale,\n    lang: lang,\n    t: t\n  };\n  localeObjCache = provides;\n  provide(LocaleInjectionKey, provides);\n};\n\nfunction template(str, option) {\n  if (!str || !option) return str;\n  return str.replace(/\\{(\\w+)\\}/g, function (_, key) {\n    return option[key];\n  });\n}\n\nvar localeProviderMaker = function localeProviderMaker() {\n  var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultLang;\n  var lang = ref(locale.name);\n  var localeRef = ref(locale);\n  return {\n    lang: lang,\n    locale: localeRef,\n    t: function t() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      var path = args[0],\n          option = args[1];\n      return translate(path, option, localeRef.value);\n    }\n  };\n};\n\nvar useLocaleInject = function useLocaleInject() {\n  return inject(LocaleInjectionKey, localeObjCache || {\n    lang: ref(defaultLang.name),\n    locale: ref(defaultLang),\n    t: function t() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var path = args[0],\n          option = args[1];\n      return translate(path, option, defaultLang);\n    }\n  });\n};\n\nexport { LocaleInjectionKey, localeProviderMaker, useLocale, useLocaleInject, useLocaleProps };","map":null,"metadata":{},"sourceType":"module"}