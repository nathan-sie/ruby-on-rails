{"ast":null,"code":"import { defineComponent, toRefs, provide, reactive, onMounted, nextTick, onBeforeUnmount, computed } from 'vue';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport _Popper from '../../popper/index.mjs';\nimport _Scrollbar from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../utils/constants.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../utils/resize-event.mjs';\nimport { isValidComponentSize } from '../../../utils/validators.mjs';\nimport { CircleClose } from '@element-plus/icons';\nimport './option.mjs';\nimport './select-dropdown.mjs';\nimport { useSelectStates, useSelect } from './useSelect.mjs';\nimport { selectKey } from './token.mjs';\nimport script$1 from './select-dropdown.vue_vue&type=script&lang.mjs';\nimport script$2 from './option.vue_vue&type=script&lang.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { useLocaleInject } from '../../../hooks/use-locale/index.mjs';\nimport useFocus from '../../../hooks/use-focus/index.mjs';\nimport { Effect } from '../../popper/src/use-popper/defaults.mjs';\nvar script = defineComponent({\n  name: \"ElSelect\",\n  componentName: \"ElSelect\",\n  components: {\n    ElInput: ElInput,\n    ElSelectMenu: script$1,\n    ElOption: script$2,\n    ElTag: ElTag,\n    ElScrollbar: _Scrollbar,\n    ElPopper: _Popper,\n    ElIcon: ElIcon\n  },\n  directives: {\n    ClickOutside: ClickOutside\n  },\n  props: {\n    name: String,\n    id: String,\n    modelValue: {\n      type: [Array, String, Number, Boolean, Object],\n      \"default\": void 0\n    },\n    autocomplete: {\n      type: String,\n      \"default\": \"off\"\n    },\n    automaticDropdown: Boolean,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    allowCreate: Boolean,\n    loading: Boolean,\n    popperClass: {\n      type: String,\n      \"default\": \"\"\n    },\n    remote: Boolean,\n    loadingText: String,\n    noMatchText: String,\n    noDataText: String,\n    remoteMethod: Function,\n    filterMethod: Function,\n    multiple: Boolean,\n    multipleLimit: {\n      type: Number,\n      \"default\": 0\n    },\n    placeholder: {\n      type: String\n    },\n    defaultFirstOption: Boolean,\n    reserveKeyword: Boolean,\n    valueKey: {\n      type: String,\n      \"default\": \"value\"\n    },\n    collapseTags: Boolean,\n    popperAppendToBody: {\n      type: Boolean,\n      \"default\": true\n    },\n    clearIcon: {\n      type: [String, Object],\n      \"default\": CircleClose\n    },\n    fitInputWidth: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"remove-tag\", \"clear\", \"visible-change\", \"focus\", \"blur\"],\n  setup: function setup(props, ctx) {\n    var _useLocaleInject = useLocaleInject(),\n        t = _useLocaleInject.t;\n\n    var states = useSelectStates(props);\n\n    var _useSelect = useSelect(props, states, ctx),\n        optionsArray = _useSelect.optionsArray,\n        selectSize = _useSelect.selectSize,\n        readonly = _useSelect.readonly,\n        handleResize = _useSelect.handleResize,\n        collapseTagSize = _useSelect.collapseTagSize,\n        debouncedOnInputChange = _useSelect.debouncedOnInputChange,\n        debouncedQueryChange = _useSelect.debouncedQueryChange,\n        deletePrevTag = _useSelect.deletePrevTag,\n        deleteTag = _useSelect.deleteTag,\n        deleteSelected = _useSelect.deleteSelected,\n        handleOptionSelect = _useSelect.handleOptionSelect,\n        scrollToOption = _useSelect.scrollToOption,\n        setSelected = _useSelect.setSelected,\n        resetInputHeight = _useSelect.resetInputHeight,\n        managePlaceholder = _useSelect.managePlaceholder,\n        showClose = _useSelect.showClose,\n        selectDisabled = _useSelect.selectDisabled,\n        iconComponent = _useSelect.iconComponent,\n        iconReverse = _useSelect.iconReverse,\n        showNewOption = _useSelect.showNewOption,\n        emptyText = _useSelect.emptyText,\n        toggleLastOptionHitState = _useSelect.toggleLastOptionHitState,\n        resetInputState = _useSelect.resetInputState,\n        handleComposition = _useSelect.handleComposition,\n        onOptionCreate = _useSelect.onOptionCreate,\n        onOptionDestroy = _useSelect.onOptionDestroy,\n        handleMenuEnter = _useSelect.handleMenuEnter,\n        handleFocus = _useSelect.handleFocus,\n        blur = _useSelect.blur,\n        handleBlur = _useSelect.handleBlur,\n        handleClearClick = _useSelect.handleClearClick,\n        handleClose = _useSelect.handleClose,\n        toggleMenu = _useSelect.toggleMenu,\n        selectOption = _useSelect.selectOption,\n        getValueKey = _useSelect.getValueKey,\n        navigateOptions = _useSelect.navigateOptions,\n        dropMenuVisible = _useSelect.dropMenuVisible,\n        reference = _useSelect.reference,\n        input = _useSelect.input,\n        popper = _useSelect.popper,\n        tags = _useSelect.tags,\n        selectWrapper = _useSelect.selectWrapper,\n        scrollbar = _useSelect.scrollbar,\n        queryChange = _useSelect.queryChange,\n        groupQueryChange = _useSelect.groupQueryChange;\n\n    var _useFocus = useFocus(reference),\n        focus = _useFocus.focus;\n\n    var _toRefs = toRefs(states),\n        inputWidth = _toRefs.inputWidth,\n        selected = _toRefs.selected,\n        inputLength = _toRefs.inputLength,\n        filteredOptionsCount = _toRefs.filteredOptionsCount,\n        visible = _toRefs.visible,\n        softFocus = _toRefs.softFocus,\n        selectedLabel = _toRefs.selectedLabel,\n        hoverIndex = _toRefs.hoverIndex,\n        query = _toRefs.query,\n        inputHovering = _toRefs.inputHovering,\n        currentPlaceholder = _toRefs.currentPlaceholder,\n        menuVisibleOnFocus = _toRefs.menuVisibleOnFocus,\n        isOnComposition = _toRefs.isOnComposition,\n        isSilentBlur = _toRefs.isSilentBlur,\n        options = _toRefs.options,\n        cachedOptions = _toRefs.cachedOptions,\n        optionsCount = _toRefs.optionsCount,\n        prefixWidth = _toRefs.prefixWidth,\n        tagInMultiLine = _toRefs.tagInMultiLine;\n\n    provide(selectKey, reactive({\n      props: props,\n      options: options,\n      optionsArray: optionsArray,\n      cachedOptions: cachedOptions,\n      optionsCount: optionsCount,\n      filteredOptionsCount: filteredOptionsCount,\n      hoverIndex: hoverIndex,\n      handleOptionSelect: handleOptionSelect,\n      onOptionCreate: onOptionCreate,\n      onOptionDestroy: onOptionDestroy,\n      selectWrapper: selectWrapper,\n      selected: selected,\n      setSelected: setSelected,\n      queryChange: queryChange,\n      groupQueryChange: groupQueryChange\n    }));\n    onMounted(function () {\n      states.cachedPlaceHolder = currentPlaceholder.value = props.placeholder || t(\"el.select.placeholder\");\n\n      if (props.multiple && Array.isArray(props.modelValue) && props.modelValue.length > 0) {\n        currentPlaceholder.value = \"\";\n      }\n\n      addResizeListener(selectWrapper.value, handleResize);\n\n      if (reference.value && reference.value.$el) {\n        var sizeMap = {\n          medium: 36,\n          small: 32,\n          mini: 28\n        };\n        var input2 = reference.value.input;\n        states.initialInputHeight = input2.getBoundingClientRect().height || sizeMap[selectSize.value];\n      }\n\n      if (props.remote && props.multiple) {\n        resetInputHeight();\n      }\n\n      nextTick(function () {\n        if (reference.value.$el) {\n          inputWidth.value = reference.value.$el.getBoundingClientRect().width;\n        }\n\n        if (ctx.slots.prefix) {\n          var inputChildNodes = reference.value.$el.childNodes;\n          var _input = [].filter.call(inputChildNodes, function (item) {\n            return item.tagName === \"INPUT\";\n          })[0];\n          var prefix = reference.value.$el.querySelector(\".el-input__prefix\");\n          prefixWidth.value = Math.max(prefix.getBoundingClientRect().width + 5, 30);\n\n          if (states.prefixWidth) {\n            _input.style.paddingLeft = \"\".concat(Math.max(states.prefixWidth, 30), \"px\");\n          }\n        }\n      });\n      setSelected();\n    });\n    onBeforeUnmount(function () {\n      removeResizeListener(selectWrapper.value, handleResize);\n    });\n\n    if (props.multiple && !Array.isArray(props.modelValue)) {\n      ctx.emit(UPDATE_MODEL_EVENT, []);\n    }\n\n    if (!props.multiple && Array.isArray(props.modelValue)) {\n      ctx.emit(UPDATE_MODEL_EVENT, \"\");\n    }\n\n    var popperPaneRef = computed(function () {\n      var _a;\n\n      return (_a = popper.value) == null ? void 0 : _a.popperRef;\n    });\n    return {\n      Effect: Effect,\n      tagInMultiLine: tagInMultiLine,\n      prefixWidth: prefixWidth,\n      selectSize: selectSize,\n      readonly: readonly,\n      handleResize: handleResize,\n      collapseTagSize: collapseTagSize,\n      debouncedOnInputChange: debouncedOnInputChange,\n      debouncedQueryChange: debouncedQueryChange,\n      deletePrevTag: deletePrevTag,\n      deleteTag: deleteTag,\n      deleteSelected: deleteSelected,\n      handleOptionSelect: handleOptionSelect,\n      scrollToOption: scrollToOption,\n      inputWidth: inputWidth,\n      selected: selected,\n      inputLength: inputLength,\n      filteredOptionsCount: filteredOptionsCount,\n      visible: visible,\n      softFocus: softFocus,\n      selectedLabel: selectedLabel,\n      hoverIndex: hoverIndex,\n      query: query,\n      inputHovering: inputHovering,\n      currentPlaceholder: currentPlaceholder,\n      menuVisibleOnFocus: menuVisibleOnFocus,\n      isOnComposition: isOnComposition,\n      isSilentBlur: isSilentBlur,\n      options: options,\n      resetInputHeight: resetInputHeight,\n      managePlaceholder: managePlaceholder,\n      showClose: showClose,\n      selectDisabled: selectDisabled,\n      iconComponent: iconComponent,\n      iconReverse: iconReverse,\n      showNewOption: showNewOption,\n      emptyText: emptyText,\n      toggleLastOptionHitState: toggleLastOptionHitState,\n      resetInputState: resetInputState,\n      handleComposition: handleComposition,\n      handleMenuEnter: handleMenuEnter,\n      handleFocus: handleFocus,\n      blur: blur,\n      handleBlur: handleBlur,\n      handleClearClick: handleClearClick,\n      handleClose: handleClose,\n      toggleMenu: toggleMenu,\n      selectOption: selectOption,\n      getValueKey: getValueKey,\n      navigateOptions: navigateOptions,\n      dropMenuVisible: dropMenuVisible,\n      focus: focus,\n      reference: reference,\n      input: input,\n      popper: popper,\n      popperPaneRef: popperPaneRef,\n      tags: tags,\n      selectWrapper: selectWrapper,\n      scrollbar: scrollbar\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}