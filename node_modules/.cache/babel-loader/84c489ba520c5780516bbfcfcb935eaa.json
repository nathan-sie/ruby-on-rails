{"ast":null,"code":"import { defineComponent, getCurrentInstance, shallowRef, ref, watch, onMounted } from 'vue';\nimport draggable from '../draggable.mjs';\nvar script = defineComponent({\n  name: \"ElColorAlphaSlider\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    },\n    vertical: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n    var thumb = shallowRef(null);\n    var bar = shallowRef(null);\n    var thumbLeft = ref(0);\n    var thumbTop = ref(0);\n    var background = ref(null);\n    watch(function () {\n      return props.color.get(\"alpha\");\n    }, function () {\n      update();\n    });\n    watch(function () {\n      return props.color.value;\n    }, function () {\n      update();\n    });\n\n    function getThumbLeft() {\n      if (props.vertical) return 0;\n      var el = instance.vnode.el;\n      var alpha = props.color.get(\"alpha\");\n      if (!el) return 0;\n      return Math.round(alpha * (el.offsetWidth - thumb.value.offsetWidth / 2) / 100);\n    }\n\n    function getThumbTop() {\n      var el = instance.vnode.el;\n      if (!props.vertical) return 0;\n      var alpha = props.color.get(\"alpha\");\n      if (!el) return 0;\n      return Math.round(alpha * (el.offsetHeight - thumb.value.offsetHeight / 2) / 100);\n    }\n\n    function getBackground() {\n      if (props.color && props.color.value) {\n        var _props$color$toRgb = props.color.toRgb(),\n            r = _props$color$toRgb.r,\n            g = _props$color$toRgb.g,\n            b = _props$color$toRgb.b;\n\n        return \"linear-gradient(to right, rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", 0) 0%, rgba(\").concat(r, \", \").concat(g, \", \").concat(b, \", 1) 100%)\");\n      }\n\n      return null;\n    }\n\n    function handleClick(event) {\n      var target = event.target;\n\n      if (target !== thumb.value) {\n        handleDrag(event);\n      }\n    }\n\n    function handleDrag(event) {\n      var el = instance.vnode.el;\n      var rect = el.getBoundingClientRect();\n\n      if (!props.vertical) {\n        var left = event.clientX - rect.left;\n        left = Math.max(thumb.value.offsetWidth / 2, left);\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n        props.color.set(\"alpha\", Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 100));\n      } else {\n        var top = event.clientY - rect.top;\n        top = Math.max(thumb.value.offsetHeight / 2, top);\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n        props.color.set(\"alpha\", Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 100));\n      }\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft();\n      thumbTop.value = getThumbTop();\n      background.value = getBackground();\n    }\n\n    onMounted(function () {\n      var dragConfig = {\n        drag: function drag(event) {\n          handleDrag(event);\n        },\n        end: function end(event) {\n          handleDrag(event);\n        }\n      };\n      draggable(bar.value, dragConfig);\n      draggable(thumb.value, dragConfig);\n      update();\n    });\n    return {\n      thumb: thumb,\n      bar: bar,\n      thumbLeft: thumbLeft,\n      thumbTop: thumbTop,\n      background: background,\n      handleClick: handleClick,\n      update: update\n    };\n  }\n});\nexport { script as default };","map":null,"metadata":{},"sourceType":"module"}