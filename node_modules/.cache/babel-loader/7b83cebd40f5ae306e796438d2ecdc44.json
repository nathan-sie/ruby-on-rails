{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getCurrentInstance, toRefs, ref, watch, unref } from 'vue';\nimport { hasOwn } from '@vue/shared';\nimport { orderBy, getKeysMap, toggleRowStatus, getRowIdentity, getColumnById, getColumnByKey } from '../util.mjs';\nimport useExpand from './expand.mjs';\nimport useCurrent from './current.mjs';\nimport useTree from './tree.mjs';\n\nvar sortData = function sortData(data, states) {\n  var sortingColumn = states.sortingColumn;\n\n  if (!sortingColumn || typeof sortingColumn.sortable === \"string\") {\n    return data;\n  }\n\n  return orderBy(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);\n};\n\nvar doFlattenColumns = function doFlattenColumns(columns) {\n  var result = [];\n  columns.forEach(function (column) {\n    if (column.children) {\n      result.push.apply(result, doFlattenColumns(column.children));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\n\nfunction useWatcher() {\n  var _a;\n\n  var instance = getCurrentInstance();\n\n  var _toRefs = toRefs((_a = instance.proxy) == null ? void 0 : _a.$props),\n      tableSize = _toRefs.size;\n\n  var rowKey = ref(null);\n  var data = ref([]);\n\n  var _data = ref([]);\n\n  var isComplex = ref(false);\n\n  var _columns = ref([]);\n\n  var originColumns = ref([]);\n  var columns = ref([]);\n  var fixedColumns = ref([]);\n  var rightFixedColumns = ref([]);\n  var leafColumns = ref([]);\n  var fixedLeafColumns = ref([]);\n  var rightFixedLeafColumns = ref([]);\n  var leafColumnsLength = ref(0);\n  var fixedLeafColumnsLength = ref(0);\n  var rightFixedLeafColumnsLength = ref(0);\n  var isAllSelected = ref(false);\n  var selection = ref([]);\n  var reserveSelection = ref(false);\n  var selectOnIndeterminate = ref(false);\n  var selectable = ref(null);\n  var filters = ref({});\n  var filteredData = ref(null);\n  var sortingColumn = ref(null);\n  var sortProp = ref(null);\n  var sortOrder = ref(null);\n  var hoverRow = ref(null);\n  watch(data, function () {\n    return instance.state && scheduleLayout(false);\n  }, {\n    deep: true\n  });\n\n  var assertRowKey = function assertRowKey() {\n    if (!rowKey.value) throw new Error(\"[ElTable] prop row-key is required\");\n  };\n\n  var updateColumns = function updateColumns() {\n    fixedColumns.value = _columns.value.filter(function (column) {\n      return column.fixed === true || column.fixed === \"left\";\n    });\n    rightFixedColumns.value = _columns.value.filter(function (column) {\n      return column.fixed === \"right\";\n    });\n\n    if (fixedColumns.value.length > 0 && _columns.value[0] && _columns.value[0].type === \"selection\" && !_columns.value[0].fixed) {\n      _columns.value[0].fixed = true;\n      fixedColumns.value.unshift(_columns.value[0]);\n    }\n\n    var notFixedColumns = _columns.value.filter(function (column) {\n      return !column.fixed;\n    });\n\n    originColumns.value = [].concat(fixedColumns.value).concat(notFixedColumns).concat(rightFixedColumns.value);\n    var leafColumns2 = doFlattenColumns(notFixedColumns);\n    var fixedLeafColumns2 = doFlattenColumns(fixedColumns.value);\n    var rightFixedLeafColumns2 = doFlattenColumns(rightFixedColumns.value);\n    leafColumnsLength.value = leafColumns2.length;\n    fixedLeafColumnsLength.value = fixedLeafColumns2.length;\n    rightFixedLeafColumnsLength.value = rightFixedLeafColumns2.length;\n    columns.value = [].concat(fixedLeafColumns2).concat(leafColumns2).concat(rightFixedLeafColumns2);\n    isComplex.value = fixedColumns.value.length > 0 || rightFixedColumns.value.length > 0;\n  };\n\n  var scheduleLayout = function scheduleLayout(needUpdateColumns) {\n    var immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (needUpdateColumns) {\n      updateColumns();\n    }\n\n    if (immediate) {\n      instance.state.doLayout();\n    } else {\n      instance.state.debouncedUpdateLayout();\n    }\n  };\n\n  var isSelected = function isSelected(row) {\n    return selection.value.indexOf(row) > -1;\n  };\n\n  var clearSelection = function clearSelection() {\n    isAllSelected.value = false;\n    var oldSelection = selection.value;\n\n    if (oldSelection.length) {\n      selection.value = [];\n      instance.emit(\"selection-change\", []);\n    }\n  };\n\n  var cleanSelection = function cleanSelection() {\n    var deleted;\n\n    if (rowKey.value) {\n      deleted = [];\n      var selectedMap = getKeysMap(selection.value, rowKey.value);\n      var dataMap = getKeysMap(data.value, rowKey.value);\n\n      for (var key in selectedMap) {\n        if (hasOwn(selectedMap, key) && !dataMap[key]) {\n          deleted.push(selectedMap[key].row);\n        }\n      }\n    } else {\n      deleted = selection.value.filter(function (item) {\n        return data.value.indexOf(item) === -1;\n      });\n    }\n\n    if (deleted.length) {\n      var newSelection = selection.value.filter(function (item) {\n        return deleted.indexOf(item) === -1;\n      });\n      selection.value = newSelection;\n      instance.emit(\"selection-change\", newSelection.slice());\n    } else {\n      if (selection.value.length) {\n        selection.value = [];\n        instance.emit(\"selection-change\", []);\n      }\n    }\n  };\n\n  var toggleRowSelection = function toggleRowSelection(row) {\n    var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n    var emitChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var changed = toggleRowStatus(selection.value, row, selected);\n\n    if (changed) {\n      var newSelection = (selection.value || []).slice();\n\n      if (emitChange) {\n        instance.emit(\"select\", newSelection, row);\n      }\n\n      instance.emit(\"selection-change\", newSelection);\n    }\n  };\n\n  var _toggleAllSelection = function _toggleAllSelection() {\n    var _a2, _b;\n\n    var value = selectOnIndeterminate.value ? !isAllSelected.value : !(isAllSelected.value || selection.value.length);\n    isAllSelected.value = value;\n    var selectionChanged = false;\n    var childrenCount = 0;\n    var rowKey2 = (_b = (_a2 = instance == null ? void 0 : instance.store) == null ? void 0 : _a2.states) == null ? void 0 : _b.rowKey.value;\n    data.value.forEach(function (row, index) {\n      var rowIndex = index + childrenCount;\n\n      if (selectable.value) {\n        if (selectable.value.call(null, row, rowIndex) && toggleRowStatus(selection.value, row, value)) {\n          selectionChanged = true;\n        }\n      } else {\n        if (toggleRowStatus(selection.value, row, value)) {\n          selectionChanged = true;\n        }\n      }\n\n      childrenCount += getChildrenCount(getRowIdentity(row, rowKey2));\n    });\n\n    if (selectionChanged) {\n      instance.emit(\"selection-change\", selection.value ? selection.value.slice() : []);\n    }\n\n    instance.emit(\"select-all\", selection.value);\n  };\n\n  var updateSelectionByRowKey = function updateSelectionByRowKey() {\n    var selectedMap = getKeysMap(selection.value, rowKey.value);\n    data.value.forEach(function (row) {\n      var rowId = getRowIdentity(row, rowKey.value);\n      var rowInfo = selectedMap[rowId];\n\n      if (rowInfo) {\n        selection.value[rowInfo.index] = row;\n      }\n    });\n  };\n\n  var updateAllSelected = function updateAllSelected() {\n    var _a2, _b, _c;\n\n    if (((_a2 = data.value) == null ? void 0 : _a2.length) === 0) {\n      isAllSelected.value = false;\n      return;\n    }\n\n    var selectedMap;\n\n    if (rowKey.value) {\n      selectedMap = getKeysMap(selection.value, rowKey.value);\n    }\n\n    var isSelected2 = function isSelected2(row) {\n      if (selectedMap) {\n        return !!selectedMap[getRowIdentity(row, rowKey.value)];\n      } else {\n        return selection.value.indexOf(row) !== -1;\n      }\n    };\n\n    var isAllSelected_ = true;\n    var selectedCount = 0;\n    var childrenCount = 0;\n\n    for (var i = 0, j = (data.value || []).length; i < j; i++) {\n      var keyProp = (_c = (_b = instance == null ? void 0 : instance.store) == null ? void 0 : _b.states) == null ? void 0 : _c.rowKey.value;\n      var rowIndex = i + childrenCount;\n      var item = data.value[i];\n      var isRowSelectable = selectable.value && selectable.value.call(null, item, rowIndex);\n\n      if (!isSelected2(item)) {\n        if (!selectable.value || isRowSelectable) {\n          isAllSelected_ = false;\n          break;\n        }\n      } else {\n        selectedCount++;\n      }\n\n      childrenCount += getChildrenCount(getRowIdentity(item, keyProp));\n    }\n\n    if (selectedCount === 0) isAllSelected_ = false;\n    isAllSelected.value = isAllSelected_;\n  };\n\n  var getChildrenCount = function getChildrenCount(rowKey2) {\n    var _a2;\n\n    if (!instance || !instance.store) return 0;\n    var treeData = instance.store.states.treeData;\n    var count = 0;\n    var children = (_a2 = treeData.value[rowKey2]) == null ? void 0 : _a2.children;\n\n    if (children) {\n      count += children.length;\n      children.forEach(function (childKey) {\n        count += getChildrenCount(childKey);\n      });\n    }\n\n    return count;\n  };\n\n  var updateFilters = function updateFilters(columns2, values) {\n    if (!Array.isArray(columns2)) {\n      columns2 = [columns2];\n    }\n\n    var filters_ = {};\n    columns2.forEach(function (col) {\n      filters.value[col.id] = values;\n      filters_[col.columnKey || col.id] = values;\n    });\n    return filters_;\n  };\n\n  var updateSort = function updateSort(column, prop, order) {\n    if (sortingColumn.value && sortingColumn.value !== column) {\n      sortingColumn.value.order = null;\n    }\n\n    sortingColumn.value = column;\n    sortProp.value = prop;\n    sortOrder.value = order;\n  };\n\n  var execFilter = function execFilter() {\n    var sourceData = unref(_data);\n    Object.keys(filters.value).forEach(function (columnId) {\n      var values = filters.value[columnId];\n      if (!values || values.length === 0) return;\n      var column = getColumnById({\n        columns: columns.value\n      }, columnId);\n\n      if (column && column.filterMethod) {\n        sourceData = sourceData.filter(function (row) {\n          return values.some(function (value) {\n            return column.filterMethod.call(null, value, row, column);\n          });\n        });\n      }\n    });\n    filteredData.value = sourceData;\n  };\n\n  var execSort = function execSort() {\n    data.value = sortData(filteredData.value, {\n      sortingColumn: sortingColumn.value,\n      sortProp: sortProp.value,\n      sortOrder: sortOrder.value\n    });\n  };\n\n  var execQuery = function execQuery() {\n    var ignore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : void 0;\n\n    if (!(ignore && ignore.filter)) {\n      execFilter();\n    }\n\n    execSort();\n  };\n\n  var clearFilter = function clearFilter(columnKeys) {\n    var _instance$refs = instance.refs,\n        tableHeader = _instance$refs.tableHeader,\n        fixedTableHeader = _instance$refs.fixedTableHeader,\n        rightFixedTableHeader = _instance$refs.rightFixedTableHeader;\n    var panels = {};\n    if (tableHeader) panels = Object.assign(panels, tableHeader.filterPanels);\n    if (fixedTableHeader) panels = Object.assign(panels, fixedTableHeader.filterPanels);\n    if (rightFixedTableHeader) panels = Object.assign(panels, rightFixedTableHeader.filterPanels);\n    var keys = Object.keys(panels);\n    if (!keys.length) return;\n\n    if (typeof columnKeys === \"string\") {\n      columnKeys = [columnKeys];\n    }\n\n    if (Array.isArray(columnKeys)) {\n      var columns_ = columnKeys.map(function (key) {\n        return getColumnByKey({\n          columns: columns.value\n        }, key);\n      });\n      keys.forEach(function (key) {\n        var column = columns_.find(function (col) {\n          return col.id === key;\n        });\n\n        if (column) {\n          column.filteredValue = [];\n        }\n      });\n      instance.store.commit(\"filterChange\", {\n        column: columns_,\n        values: [],\n        silent: true,\n        multi: true\n      });\n    } else {\n      keys.forEach(function (key) {\n        var column = columns.value.find(function (col) {\n          return col.id === key;\n        });\n\n        if (column) {\n          column.filteredValue = [];\n        }\n      });\n      filters.value = {};\n      instance.store.commit(\"filterChange\", {\n        column: {},\n        values: [],\n        silent: true\n      });\n    }\n  };\n\n  var clearSort = function clearSort() {\n    if (!sortingColumn.value) return;\n    updateSort(null, null, null);\n    instance.store.commit(\"changeSortCondition\", {\n      silent: true\n    });\n  };\n\n  var _useExpand = useExpand({\n    data: data,\n    rowKey: rowKey\n  }),\n      setExpandRowKeys = _useExpand.setExpandRowKeys,\n      toggleRowExpansion = _useExpand.toggleRowExpansion,\n      updateExpandRows = _useExpand.updateExpandRows,\n      expandStates = _useExpand.states,\n      isRowExpanded = _useExpand.isRowExpanded;\n\n  var _useTree = useTree({\n    data: data,\n    rowKey: rowKey\n  }),\n      updateTreeExpandKeys = _useTree.updateTreeExpandKeys,\n      toggleTreeExpansion = _useTree.toggleTreeExpansion,\n      updateTreeData = _useTree.updateTreeData,\n      loadOrToggle = _useTree.loadOrToggle,\n      treeStates = _useTree.states;\n\n  var _useCurrent = useCurrent({\n    data: data,\n    rowKey: rowKey\n  }),\n      updateCurrentRowData = _useCurrent.updateCurrentRowData,\n      updateCurrentRow = _useCurrent.updateCurrentRow,\n      setCurrentRowKey = _useCurrent.setCurrentRowKey,\n      currentData = _useCurrent.states;\n\n  var setExpandRowKeysAdapter = function setExpandRowKeysAdapter(val) {\n    setExpandRowKeys(val);\n    updateTreeExpandKeys(val);\n  };\n\n  var toggleRowExpansionAdapter = function toggleRowExpansionAdapter(row, expanded) {\n    var hasExpandColumn = columns.value.some(function (_ref) {\n      var type = _ref.type;\n      return type === \"expand\";\n    });\n\n    if (hasExpandColumn) {\n      toggleRowExpansion(row, expanded);\n    } else {\n      toggleTreeExpansion(row, expanded);\n    }\n  };\n\n  return {\n    assertRowKey: assertRowKey,\n    updateColumns: updateColumns,\n    scheduleLayout: scheduleLayout,\n    isSelected: isSelected,\n    clearSelection: clearSelection,\n    cleanSelection: cleanSelection,\n    toggleRowSelection: toggleRowSelection,\n    _toggleAllSelection: _toggleAllSelection,\n    toggleAllSelection: null,\n    updateSelectionByRowKey: updateSelectionByRowKey,\n    updateAllSelected: updateAllSelected,\n    updateFilters: updateFilters,\n    updateCurrentRow: updateCurrentRow,\n    updateSort: updateSort,\n    execFilter: execFilter,\n    execSort: execSort,\n    execQuery: execQuery,\n    clearFilter: clearFilter,\n    clearSort: clearSort,\n    toggleRowExpansion: toggleRowExpansion,\n    setExpandRowKeysAdapter: setExpandRowKeysAdapter,\n    setCurrentRowKey: setCurrentRowKey,\n    toggleRowExpansionAdapter: toggleRowExpansionAdapter,\n    isRowExpanded: isRowExpanded,\n    updateExpandRows: updateExpandRows,\n    updateCurrentRowData: updateCurrentRowData,\n    loadOrToggle: loadOrToggle,\n    updateTreeData: updateTreeData,\n    states: _objectSpread(_objectSpread(_objectSpread({\n      tableSize: tableSize,\n      rowKey: rowKey,\n      data: data,\n      _data: _data,\n      isComplex: isComplex,\n      _columns: _columns,\n      originColumns: originColumns,\n      columns: columns,\n      fixedColumns: fixedColumns,\n      rightFixedColumns: rightFixedColumns,\n      leafColumns: leafColumns,\n      fixedLeafColumns: fixedLeafColumns,\n      rightFixedLeafColumns: rightFixedLeafColumns,\n      leafColumnsLength: leafColumnsLength,\n      fixedLeafColumnsLength: fixedLeafColumnsLength,\n      rightFixedLeafColumnsLength: rightFixedLeafColumnsLength,\n      isAllSelected: isAllSelected,\n      selection: selection,\n      reserveSelection: reserveSelection,\n      selectOnIndeterminate: selectOnIndeterminate,\n      selectable: selectable,\n      filters: filters,\n      filteredData: filteredData,\n      sortingColumn: sortingColumn,\n      sortProp: sortProp,\n      sortOrder: sortOrder,\n      hoverRow: hoverRow\n    }, expandStates), treeStates), currentData)\n  };\n}\n\nexport { useWatcher as default };","map":null,"metadata":{},"sourceType":"module"}