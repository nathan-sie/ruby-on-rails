{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { computed, unref, provide, ref, onMounted, isRef, watch, onUnmounted, inject } from 'vue';\nvar VAR_PREFIX = \"--el-\";\n\nvar setVars = function setVars(target, val) {\n  Object.keys(val).forEach(function (key) {\n    if (key.startsWith(VAR_PREFIX)) {\n      target == null ? void 0 : target.style.setProperty(key, val[key]);\n    } else {\n      target == null ? void 0 : target.style.setProperty(VAR_PREFIX + key, val[key]);\n    }\n  });\n};\n\nvar themeVarsKey = \"themeVars\";\n\nfunction useCssVar(vars, target) {\n  var stopWatchCssVar = null;\n  var elRef = computed(function () {\n    var _a;\n\n    return unref(target) || ((_a = window == null ? void 0 : window.document) == null ? void 0 : _a.documentElement);\n  });\n  var themeVars = useThemeVars();\n\n  var customVars = _objectSpread(_objectSpread({}, themeVars), unref(vars));\n\n  provide(themeVarsKey, ref(customVars));\n  onMounted(function () {\n    isRef(vars) ? stopWatchCssVar = watch(vars, function (val) {\n      setVars(elRef.value, _objectSpread(_objectSpread({}, unref(themeVars)), val));\n    }, {\n      immediate: true,\n      deep: true\n    }) : setVars(elRef.value, _objectSpread(_objectSpread({}, unref(themeVars)), vars));\n  });\n  onUnmounted(function () {\n    return stopWatchCssVar && stopWatchCssVar();\n  });\n}\n\nvar useThemeVars = function useThemeVars() {\n  var themeVars = inject(themeVarsKey, {});\n  return themeVars;\n};\n\nexport { themeVarsKey, useCssVar, useThemeVars };","map":null,"metadata":{},"sourceType":"module"}