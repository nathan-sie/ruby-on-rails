{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getCurrentInstance, computed } from 'vue';\nimport '../../utils/util.mjs';\nimport { isArray } from '@vue/shared';\nvar DEFAULT_TRIGGER = \"hover\";\n\nvar useTargetEvents = function useTargetEvents(onShow, onHide, onToggle) {\n  var _getCurrentInstance = getCurrentInstance(),\n      props = _getCurrentInstance.props;\n\n  var triggerFocused = false;\n\n  var popperEventsHandler = function popperEventsHandler(e) {\n    e.stopPropagation();\n\n    switch (e.type) {\n      case \"click\":\n        {\n          if (triggerFocused) {\n            triggerFocused = false;\n          } else {\n            onToggle();\n          }\n\n          break;\n        }\n\n      case \"mouseenter\":\n        {\n          onShow();\n          break;\n        }\n\n      case \"mouseleave\":\n        {\n          onHide();\n          break;\n        }\n\n      case \"focus\":\n        {\n          triggerFocused = true;\n          onShow();\n          break;\n        }\n\n      case \"blur\":\n        {\n          triggerFocused = false;\n          onHide();\n          break;\n        }\n    }\n  };\n\n  var triggerEventsMap = {\n    click: [\"onClick\"],\n    hover: [\"onMouseenter\", \"onMouseleave\"],\n    focus: [\"onFocus\", \"onBlur\"]\n  };\n\n  var mapEvents = function mapEvents(t) {\n    var _a;\n\n    var events = {};\n    (_a = triggerEventsMap[t]) == null ? void 0 : _a.forEach(function (event) {\n      events[event] = popperEventsHandler;\n    });\n    return events;\n  };\n\n  return computed(function () {\n    if (isArray(props.trigger)) {\n      return Object.values(props.trigger).reduce(function (pre, t) {\n        return _objectSpread(_objectSpread({}, pre), mapEvents(t));\n      }, {});\n    } else {\n      return mapEvents(props.trigger);\n    }\n  });\n};\n\nexport { DEFAULT_TRIGGER, useTargetEvents };","map":null,"metadata":{},"sourceType":"module"}