{"ast":null,"code":"import { defineComponent, getCurrentInstance, computed, inject, ref, reactive, watch, provide, onMounted, onBeforeUnmount, h, Fragment, withDirectives, vShow } from 'vue';\nimport { useTimeoutFn } from '@vueuse/core';\nimport _CollapseTransition from '../../collapse-transition/index.mjs';\nimport _Popper from '../../popper/index.mjs';\nimport { buildProps } from '../../../utils/props.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { ArrowDown, ArrowRight } from '@element-plus/icons';\nimport { ElIcon } from '../../icon/index.mjs';\nimport useMenu from './use-menu.mjs';\nimport { useMenuCssVar } from './use-menu-css-var.mjs';\nvar subMenuProps = buildProps({\n  index: {\n    type: String,\n    required: true\n  },\n  showTimeout: {\n    type: Number,\n    \"default\": 300\n  },\n  hideTimeout: {\n    type: Number,\n    \"default\": 300\n  },\n  popperClass: String,\n  disabled: Boolean,\n  popperAppendToBody: {\n    type: Boolean,\n    \"default\": void 0\n  }\n});\nvar COMPONENT_NAME = \"ElSubMenu\";\nvar SubMenu = defineComponent({\n  name: COMPONENT_NAME,\n  props: subMenuProps,\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        expose = _ref.expose;\n    var instance = getCurrentInstance();\n\n    var _useMenu = useMenu(instance, computed(function () {\n      return props.index;\n    })),\n        paddingStyle = _useMenu.paddingStyle,\n        indexPath = _useMenu.indexPath,\n        parentMenu = _useMenu.parentMenu;\n\n    var rootMenu = inject(\"rootMenu\");\n    if (!rootMenu) throwError(COMPONENT_NAME, \"can not inject root menu\");\n    var subMenu = inject(\"subMenu:\".concat(parentMenu.value.uid));\n    if (!subMenu) throwError(COMPONENT_NAME, \"can not inject sub menu\");\n    var items = ref({});\n    var subMenus = ref({});\n    var timeout;\n    var currentPlacement = ref(\"\");\n    var mouseInChild = ref(false);\n    var verticalTitleRef = ref();\n    var vPopper = ref();\n    var subMenuTitleIcon = computed(function () {\n      return mode.value === \"horizontal\" && isFirstLevel.value || mode.value === \"vertical\" && !rootMenu.props.collapse ? ArrowDown : ArrowRight;\n    });\n    var isFirstLevel = computed(function () {\n      var isFirstLevel2 = true;\n      var parent = instance.parent;\n\n      while (parent && parent.type.name !== \"ElMenu\") {\n        if ([\"ElSubMenu\", \"ElMenuItemGroup\"].includes(parent.type.name)) {\n          isFirstLevel2 = false;\n          break;\n        } else {\n          parent = parent.parent;\n        }\n      }\n\n      return isFirstLevel2;\n    });\n    var appendToBody = computed(function () {\n      return props.popperAppendToBody === void 0 ? isFirstLevel.value : Boolean(props.popperAppendToBody);\n    });\n    var menuTransitionName = computed(function () {\n      return rootMenu.props.collapse ? \"el-zoom-in-left\" : \"el-zoom-in-top\";\n    });\n    var fallbackPlacements = computed(function () {\n      return mode.value === \"horizontal\" && isFirstLevel.value ? [\"bottom-start\", \"bottom-end\", \"top-start\", \"top-end\", \"right-start\", \"left-start\"] : [\"right-start\", \"left-start\", \"bottom-start\", \"bottom-end\", \"top-start\", \"top-end\"];\n    });\n    var opened = computed(function () {\n      return rootMenu.openedMenus.includes(props.index);\n    });\n    var active = computed(function () {\n      var isActive = false;\n      Object.values(items.value).forEach(function (item2) {\n        if (item2.active) {\n          isActive = true;\n        }\n      });\n      Object.values(subMenus.value).forEach(function (subItem) {\n        if (subItem.active) {\n          isActive = true;\n        }\n      });\n      return isActive;\n    });\n    var backgroundColor = computed(function () {\n      return rootMenu.props.backgroundColor || \"\";\n    });\n    var activeTextColor = computed(function () {\n      return rootMenu.props.activeTextColor || \"\";\n    });\n    var textColor = computed(function () {\n      return rootMenu.props.textColor || \"\";\n    });\n    var mode = computed(function () {\n      return rootMenu.props.mode;\n    });\n    var item = reactive({\n      index: props.index,\n      indexPath: indexPath,\n      active: active\n    });\n    var titleStyle = computed(function () {\n      if (mode.value !== \"horizontal\") {\n        return {\n          color: textColor.value\n        };\n      }\n\n      return {\n        borderBottomColor: active.value ? rootMenu.props.activeTextColor ? activeTextColor.value : \"\" : \"transparent\",\n        color: active.value ? activeTextColor.value : textColor.value\n      };\n    });\n\n    var doDestroy = function doDestroy() {\n      var _a;\n\n      return (_a = vPopper.value) == null ? void 0 : _a.doDestroy();\n    };\n\n    var handleCollapseToggle = function handleCollapseToggle(value) {\n      if (value) {\n        updatePlacement();\n      } else {\n        doDestroy();\n      }\n    };\n\n    var handleClick = function handleClick() {\n      if (rootMenu.props.menuTrigger === \"hover\" && rootMenu.props.mode === \"horizontal\" || rootMenu.props.collapse && rootMenu.props.mode === \"vertical\" || props.disabled) return;\n      rootMenu.handleSubMenuClick({\n        index: props.index,\n        indexPath: indexPath.value,\n        active: active.value\n      });\n    };\n\n    var handleMouseenter = function handleMouseenter(event) {\n      var showTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.showTimeout;\n\n      var _a;\n\n      if (event.type === \"focus\" && !event.relatedTarget) {\n        return;\n      }\n\n      if (rootMenu.props.menuTrigger === \"click\" && rootMenu.props.mode === \"horizontal\" || !rootMenu.props.collapse && rootMenu.props.mode === \"vertical\" || props.disabled) {\n        return;\n      }\n\n      mouseInChild.value = true;\n      timeout == null ? void 0 : timeout();\n\n      var _useTimeoutFn = useTimeoutFn(function () {\n        return rootMenu.openMenu(props.index, indexPath.value);\n      }, showTimeout);\n\n      timeout = _useTimeoutFn.stop;\n\n      if (appendToBody.value) {\n        (_a = parentMenu.value.vnode.el) == null ? void 0 : _a.dispatchEvent(new MouseEvent(\"mouseenter\"));\n      }\n    };\n\n    var handleMouseleave = function handleMouseleave() {\n      var deepDispatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var _a, _b;\n\n      if (rootMenu.props.menuTrigger === \"click\" && rootMenu.props.mode === \"horizontal\" || !rootMenu.props.collapse && rootMenu.props.mode === \"vertical\") {\n        return;\n      }\n\n      mouseInChild.value = false;\n      timeout == null ? void 0 : timeout();\n\n      var _useTimeoutFn2 = useTimeoutFn(function () {\n        return !mouseInChild.value && rootMenu.closeMenu(props.index, indexPath.value);\n      }, props.hideTimeout);\n\n      timeout = _useTimeoutFn2.stop;\n\n      if (appendToBody.value && deepDispatch) {\n        if (((_a = instance.parent) == null ? void 0 : _a.type.name) === \"ElSubMenu\") {\n          (_b = subMenu.handleMouseleave) == null ? void 0 : _b.call(subMenu, true);\n        }\n      }\n    };\n\n    var updatePlacement = function updatePlacement() {\n      currentPlacement.value = mode.value === \"horizontal\" && isFirstLevel.value ? \"bottom-start\" : \"right-start\";\n    };\n\n    watch(function () {\n      return rootMenu.props.collapse;\n    }, function (value) {\n      return handleCollapseToggle(Boolean(value));\n    });\n    {\n      var addSubMenu = function addSubMenu(item2) {\n        subMenus.value[item2.index] = item2;\n      };\n\n      var removeSubMenu = function removeSubMenu(item2) {\n        delete subMenus.value[item2.index];\n      };\n\n      provide(\"subMenu:\".concat(instance.uid), {\n        addSubMenu: addSubMenu,\n        removeSubMenu: removeSubMenu,\n        handleMouseleave: handleMouseleave\n      });\n    }\n    expose({\n      opened: opened\n    });\n    onMounted(function () {\n      rootMenu.addSubMenu(item);\n      subMenu.addSubMenu(item);\n      updatePlacement();\n    });\n    onBeforeUnmount(function () {\n      subMenu.removeSubMenu(item);\n      rootMenu.removeSubMenu(item);\n    });\n    return function () {\n      var _a;\n\n      var titleTag = [(_a = slots.title) == null ? void 0 : _a.call(slots), h(ElIcon, {\n        \"class\": [\"el-sub-menu__icon-arrow\"]\n      }, {\n        \"default\": function _default() {\n          return h(subMenuTitleIcon.value);\n        }\n      })];\n      var ulStyle = useMenuCssVar(rootMenu.props);\n      var child = rootMenu.isMenuPopup ? h(_Popper, {\n        ref: vPopper,\n        manualMode: true,\n        visible: opened.value,\n        effect: \"light\",\n        pure: true,\n        offset: 6,\n        showArrow: false,\n        popperClass: props.popperClass,\n        placement: currentPlacement.value,\n        appendToBody: appendToBody.value,\n        fallbackPlacements: fallbackPlacements.value,\n        transition: menuTransitionName.value,\n        gpuAcceleration: false\n      }, {\n        \"default\": function _default() {\n          var _a2;\n\n          return h(\"div\", {\n            \"class\": [\"el-menu--\".concat(mode.value), props.popperClass],\n            onMouseenter: function onMouseenter(evt) {\n              return handleMouseenter(evt, 100);\n            },\n            onMouseleave: function onMouseleave() {\n              return handleMouseleave(true);\n            },\n            onFocus: function onFocus(evt) {\n              return handleMouseenter(evt, 100);\n            }\n          }, [h(\"ul\", {\n            \"class\": [\"el-menu el-menu--popup\", \"el-menu--popup-\".concat(currentPlacement.value)],\n            style: ulStyle.value\n          }, [(_a2 = slots[\"default\"]) == null ? void 0 : _a2.call(slots)])]);\n        },\n        trigger: function trigger() {\n          return h(\"div\", {\n            \"class\": \"el-sub-menu__title\",\n            style: [paddingStyle.value, titleStyle.value, {\n              backgroundColor: backgroundColor.value\n            }],\n            onClick: handleClick\n          }, titleTag);\n        }\n      }) : h(Fragment, {}, [h(\"div\", {\n        \"class\": \"el-sub-menu__title\",\n        style: [paddingStyle.value, titleStyle.value, {\n          backgroundColor: backgroundColor.value\n        }],\n        ref: verticalTitleRef,\n        onClick: handleClick\n      }, titleTag), h(_CollapseTransition, {}, {\n        \"default\": function _default() {\n          var _a2;\n\n          return withDirectives(h(\"ul\", {\n            role: \"menu\",\n            \"class\": \"el-menu el-menu--inline\",\n            style: ulStyle.value\n          }, [(_a2 = slots[\"default\"]) == null ? void 0 : _a2.call(slots)]), [[vShow, opened.value]]);\n        }\n      })]);\n      return h(\"li\", {\n        \"class\": [\"el-sub-menu\", {\n          \"is-active\": active.value,\n          \"is-opened\": opened.value,\n          \"is-disabled\": props.disabled\n        }],\n        role: \"menuitem\",\n        ariaHaspopup: true,\n        ariaExpanded: opened.value,\n        onMouseenter: handleMouseenter,\n        onMouseleave: function onMouseleave() {\n          return handleMouseleave(true);\n        },\n        onFocus: handleMouseenter\n      }, [child]);\n    };\n  }\n});\nexport { SubMenu as default, subMenuProps };","map":null,"metadata":{},"sourceType":"module"}