{"ast":null,"code":"import { shallowRef, onMounted, onBeforeUnmount, onUpdated, watch } from 'vue';\nimport { EVENT_CODE } from '../../../../utils/aria.mjs';\nimport { on, off } from '../../../../utils/dom.mjs';\n\nfunction useKeydown(_ref, store) {\n  var el$ = _ref.el$;\n  var treeItems = shallowRef([]);\n  var checkboxItems = shallowRef([]);\n  onMounted(function () {\n    initTabIndex();\n    on(el$.value, \"keydown\", handleKeydown);\n  });\n  onBeforeUnmount(function () {\n    off(el$.value, \"keydown\", handleKeydown);\n  });\n  onUpdated(function () {\n    treeItems.value = Array.from(el$.value.querySelectorAll(\"[role=treeitem]\"));\n    checkboxItems.value = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n  });\n  watch(checkboxItems, function (val) {\n    val.forEach(function (checkbox) {\n      checkbox.setAttribute(\"tabindex\", \"-1\");\n    });\n  });\n\n  var handleKeydown = function handleKeydown(ev) {\n    var currentItem = ev.target;\n    if (currentItem.className.indexOf(\"el-tree-node\") === -1) return;\n    var code = ev.code;\n    treeItems.value = Array.from(el$.value.querySelectorAll(\".is-focusable[role=treeitem]\"));\n    var currentIndex = treeItems.value.indexOf(currentItem);\n    var nextIndex;\n\n    if ([EVENT_CODE.up, EVENT_CODE.down].indexOf(code) > -1) {\n      ev.preventDefault();\n\n      if (code === EVENT_CODE.up) {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex !== 0 ? currentIndex - 1 : treeItems.value.length - 1;\n        var startIndex = nextIndex;\n\n        while (true) {\n          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus) break;\n          nextIndex--;\n\n          if (nextIndex === startIndex) {\n            nextIndex = -1;\n            break;\n          }\n\n          if (nextIndex < 0) {\n            nextIndex = treeItems.value.length - 1;\n          }\n        }\n      } else {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex < treeItems.value.length - 1 ? currentIndex + 1 : 0;\n        var _startIndex = nextIndex;\n\n        while (true) {\n          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus) break;\n          nextIndex++;\n\n          if (nextIndex === _startIndex) {\n            nextIndex = -1;\n            break;\n          }\n\n          if (nextIndex >= treeItems.value.length) {\n            nextIndex = 0;\n          }\n        }\n      }\n\n      nextIndex !== -1 && treeItems.value[nextIndex].focus();\n    }\n\n    if ([EVENT_CODE.left, EVENT_CODE.right].indexOf(code) > -1) {\n      ev.preventDefault();\n      currentItem.click();\n    }\n\n    var hasInput = currentItem.querySelector('[type=\"checkbox\"]');\n\n    if ([EVENT_CODE.enter, EVENT_CODE.space].indexOf(code) > -1 && hasInput) {\n      ev.preventDefault();\n      hasInput.click();\n    }\n  };\n\n  var initTabIndex = function initTabIndex() {\n    var _a;\n\n    treeItems.value = Array.from(el$.value.querySelectorAll(\".is-focusable[role=treeitem]\"));\n    checkboxItems.value = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n    var checkedItem = el$.value.querySelectorAll(\".is-checked[role=treeitem]\");\n\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute(\"tabindex\", \"0\");\n      return;\n    }\n\n    (_a = treeItems.value[0]) == null ? void 0 : _a.setAttribute(\"tabindex\", \"0\");\n  };\n}\n\nexport { useKeydown };","map":null,"metadata":{},"sourceType":"module"}